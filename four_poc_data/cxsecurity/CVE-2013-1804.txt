{
    "text": "vul_name : PHP-Fusion 7.02.05 XSS & LFI & SQL Injection ， vul_cve : CVE-2013-1803 , CVE-2013-1804 , CVE-2013-1805 , CVE-2013-1806 , CVE-2013-1807 ， vul_poc :  [ waraxe-2013-SA # 097 ] - Multiple Vulnerabilities in PHP-Fusion 7.02.05 ， Author : Janek Vind \"waraxe\" ， Date : 27. February 2013 ， Location : Estonia , Tartu ， Web :  ， Description of vulnerable software :  ， PHP-Fusion is a light-weight open-source content management system ( CMS )  ， written in PHP 5. It utilises a MySQL database to store your site content and ， includes a simple , comprehensive administration system. PHP-Fusion includes the ， most common features you would expect to see in many other CMS packages. ， Vulnerable is version 7.02.05 and possibly older versions. ， New , patched version 7.02.06 available here :  ， 1. Local File Inclusion in \"maincore.php\" ， Reason : insufficient sanitization of user-supplied data ， Attack vector : user-supplied POST parameter \"user_theme\" ， Preconditions :  ， 1. Logged in as valid user ， 2. \"Allow users to change theme\" option must be activated ( it is by default )  ， 3. PHP must be < 5.3.4 for null-byte attacks to work ， PHP-Fusion users can edit their profile and by default there is possibility to ， change the theme. There is no sufficient sanitization of the POST parameter ， \"user_theme\" :  ， Php script \"includes/user_fields/user_theme_include\" line 41 :  ， - [ source code start ] - ， } elseif (  $ profile_method = \"validate_insert\" |  $ profile_method = \"validate_update\" ) { ， / Get input data ， / Set update or insert user data ，  $ this->_setDBValue ( \"user_theme\" , stripinput ( trim (  $ _POST [ 'user_theme' ]  )  ;  ， - [ source code end ] - ， We can see , that user-supplied parameter \"user_theme\" goes through the ， function \"stripinput (  ) \" :  ， Php script \"maincore.php\" line 332 :  ， - [ source code start ] - ， / Strip Input Function , prevents HTML in unwanted places ，  $ text = stripslash ( trim (  $ text )  ;  ，  $ text = preg_replace ( \"/ ( &amp ;  ) + ( ?=\\ #  (  [ 0-9 ] {2 , 3} )  ;  ) /i\" , \"&\" ,  $ text )  ;  ，  $ search = array ( \"&\" , \"\\\" , \"'\" , \"\\\" , '\\\"' , \"\\'\" , \"<\" , \">\" , \"&nbsp ; \" )  ;  ，  $ replace = array ( \"&amp ; \" , \"&quot ; \" , \"& # 39 ; \" , \"& # 92 ; \" , \"&quot ; \" , \"& # 39 ; \" , \"&lt ; \" , \"&gt ; \" , \" \" )  ;  ，  $ text = str_replace (  $ search ,  $ replace ,  $ text )  ;  ， } else { ， foreach (  $ text as $ key => $ value ) { ，  $ text [  $ key ] = stripinput (  $ value )  ;  ， } ， } ， } ， - [ source code end ] - ， This function works against XSS and SQL Injection attacks , but not against ， file inclusion attacks. Attacker can submit user theme value as one below :  ， ./images/avatars/waraxe.jpg\\0z ， Directory traversal symbols \"./\" and null byte will pass through the ， function \"stripinput (  ) \" and whole string will be saved to the database. ， All subsequent requests by attacker will use this malicious theme string ， and as result , previously uploaded avatar picture with PHP payload gets ， included and executed. ， Most front-end scripts start with this :  ， - [ source code start ] - ， require_once \"maincore.php\" ;  ， require_once THEMES.\"templates/header.php\" ;  ， - [ source code end ] - ， Php script \"maincore.php\" line 264 :  ， - [ source code start ] - ， / Set theme ， . ， / Check that site or user theme exists ， global $ settings ;  ， . ， } elseif ( file_exists ( THEMES. $ theme.\"/theme.php\" ) file_exists ( THEMES. $ theme.\"/styles.css\" ) { ， define ( \"THEME\" , THEMES. $ theme.\"/\" )  ;  ， - [ source code end ] - ， We can see , that malicious theme string from database will be used in theme path ， definition and later is used in \"require_once\". ， This security vulnerability was tested by using Burp Proxy and exploitation ， succeeded. ， 2. Local File Inclusion in \"administration/user_fields.php\" ， Reason : insufficient sanitization of user-supplied data ， Attack vector : user-supplied GET parameter \"enable\" ， Preconditions :  ， 1. Logged in as admin with user field administration privileges ， 2. PHP must be < 5.3.4 for null-byte attacks to work ， Php script \"administration/user_fields.php\" line 84 :  ， - [ source code start ] - ， } elseif ( isset (  $ _GET [ 'enable' ]  )  ， file_exists ( INCLUDES.\"user_fields/\".stripinput (  $ _GET [ 'enable' ]  ) .\"_include_var.php\" )  ， file_exists ( INCLUDES.\"user_fields/\".stripinput (  $ _GET [ 'enable' ]  ) .\"_include.php\" )  ，  ) { ，  $ user_field_api_version = \"1.00.00\" ;  ， include LOCALE.LOCALESET.\"user_fields/\".stripinput (  $ _GET [ 'enable' ]  ) .\".php\" ;  ， - [ source code end ] - ， Test ( parameter \"aid\" needs to be valid )  :  ， Upload avatar picture with PHP payload and then issue request :  ， aid=e017e24eb00e8ccf&enable=././images/avatars/waraxe.jpg%00z ， 3. SQL Injection in \"includes/classes/Authenticate.class.php\" ， Reason : insufficient sanitization of user-supplied data ， Attack vector : user-supplied HTTP cookie ， Preconditions :  ， 1. magic_quotes_gpc=off ， Php script \"includes/classes/Authenticate.class.php\" line 143 :  ， - [ source code start ] - ， / Validate authenticated user ， public static function validateAuthUser (  $ userCookie = true ) { ，  $ cookieDataArr = explode ( \".\" ,  $ _COOKIE [ COOKIE_USER ]  )  ;  ， list (  $ userID ,  $ cookieExpiration ,  $ cookieHash ) = $ cookieDataArr ;  ，  $ result = dbquery (  ， \"SELECT * FROM \".DB_USERS.\" ， WHERE user_id='\". $ userID.\"' AND user_status='0' AND user_actiontime='0' ， LIMIT 1\" ，  )  ;  ， - [ source code end ] - ， We can see , that user-supplied cookie will be exploded to three parts and ， first part , \"userID\" is used in SQL query without any sanitization , which ， leads to SQL Injection vulnerability. ， 4. SQL Injection in \"downloads.php\" ， Reason : insufficient sanitization of user-supplied data ， Attack vector : user-supplied GET parameter \"orderby\" ， Preconditions :  ， 1. valid download category with at least one download ， Php script \"downloads.php\" line 111 :  ， - [ source code start ] - ，  $ order_by = stripinput (  $ _GET [ 'orderby' ]  )  ;  ， . ，  $ result = dbquery (  ， \"SELECT td.download_id , td.download_user , td.download_datestamp ,  ， . ， ORDER BY \". (  $ order_by = \" ? $ cat_data [ 'download_cat_sorting' ]  :  $ order_by.\" \". $ sort ) .\" ， - [ source code end ] - ， Tests :  ， \"Unknown column 'waraxe' in 'order clause'\" ， Result : error message \"Subquery returns more than 1 row\" ， Result : normal page ， 5. SQL Injection in \"forum/postedit.php\" ， Reason : insufficient sanitization of user-supplied data ， Attack vector : user-supplied POST parameter \"delete_attach_ * \" ， Preconditions :  ， 1. Logged in as user with forum posting privileges ， 2. magic_quotes_gpc=off ， Php script \"forum/postedit.php\" line 219 :  ， - [ source code start ] - ， foreach (  $ _POST as $ key=> $ value ) { ，  $ key = str_replace ( \"delete_attach_\" , \" ,  $ key )  ;  ，  $ result = dbquery ( \"SELECT * FROM \".DB_FORUM_ATTACHMENTS.\" WHERE post_id='\". $ _GET [ 'post_id' ] .\"' and attach_id=' $ key'\" )  ;  ， - [ source code end ] - ， Test ( parameters \"forum_id\" , \"thread_id\" and \"post_id\" must be valid )  :  ， - [ test code start ] -",
    "time": "2013-03-01 / 2013-03-03"
}