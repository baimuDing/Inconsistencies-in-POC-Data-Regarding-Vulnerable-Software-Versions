{
    "text": "vul_name : Merethis Centreon Multiple Vulnerabilities ， vul_cve : CVE-2011-4431 , CVE-2011-4432 ， vul_poc : Trustwave's SpiderLabs Security Advisory TWSL2011-017 :  ， Published : 2011-11-04 ， Version : 1.0 ， Vendor : Merethis ( and ， Product : Centreon ， Version affected : 2.3.1 and prior ， Product description :  ， Centreon is network supervision and monitoring tool that is based upon ， the Nagios open source monitoring engine. Centreon can be used as a ， Nagios GUI and it can provide such features as real time system ， monitoring , performance management and system management. ， Credit : Christophe De La Fuente of Trustwave SpiderLabs ， Finding 1 : Remote Command Execution ， Centreon supervision and monitoring tool provided by Merethis permits ， remote code execution from the command help web page allowing an ， attacker to execute arbitrary commands in the context of the webserver ， hosting the application. Any account that has been granted the access ， to \"Configuration > Nagios > Checks\" is able to execute commands. ， The following Proof of Concept ( PoC ) executes the command ， 'cat /etc/passwd' :  ， Finding 2 : One-Way Hash Without a Salt ， The following code at lines 329-349 from ， www/include/configuration/nconfigObject/contact/DB-Func.php ， shows the insertContactInDB (  ) function inserting the MD5 or SHA1 ， password hash in the database without using a salt :  ，  $ rq = \"INSERT INTO `contact` ( \" . ， \"`contact_id` , `timeperiod_tp_id` , `timeperiod_tp_id2` ,  ， `contact_name` , \" . \"`contact_alias` , `contact_autologin_key` ,  ， `contact_passwd` , `contact_lang` , `contact_template_id` , \" . ， \"`contact_host_notification_options` ,  ， `contact_service_notification_options` , \" . \"`contact_email` ,  ， `contact_pager` , `contact_comment` , `contact_oreon` ,  ， `contact_register` , `contact_enable_notifications` , \" . ， \"`contact_admin` , `contact_type_msg` , `contact_activate` ,  ， `contact_auth_type` , \" . \"`contact_ldap_dn` , `contact_location` ,  ， `contact_address1` , `contact_address2` , \" . \"`contact_address3` ,  ， `contact_address4` , `contact_address5` , `contact_address6` ) \" . ， \"VALUES ( \" ;  ，  $ rq .= \"NULL , \" ; isset (  $ ret [ \"timeperiod_tp_id\" ]  )  $ ret [ \"timeperiod_tp_id\" ]  ，  ! = NULL ? $ rq .= \"'\". $ ret [ \"timeperiod_tp_id\" ] .\"' , \" :  $ rq .= \"NULL , \" ;  ， isset (  $ ret [ \"timeperiod_tp_id2\" ]  )  $ ret [ \"timeperiod_tp_id2\" ]  ! = NULL ? $ rq ， .= \"'\". $ ret [ \"timeperiod_tp_id2\" ] .\"' , \" :  $ rq .= \"NULL , \" ;  ， isset (  $ ret [ \"contact_name\" ]  )  $ ret [ \"contact_name\" ]  ! = NULL ? $ rq .= ， \"'\".htmlentities (  $ ret [ \"contact_name\" ]  , ENT_QUOTES , \"UTF-8\" ) .\"' , \" :  $ rq .= ， \"NULL , \" ; -isset (  $ ret [ \"contact_alias\" ]  )  $ ret [ \"contact_alias\" ]  ! = NULL ? ，  $ rq .= \"'\".htmlentities (  $ ret [ \"contact_alias\" ]  , ENT_QUOTES , \"UTF-8\" ) .\"' , \" :  ，  $ rq .= \"NULL , \" ; isset (  $ ret [ \"contact_autologin_key\" ]  )  ，  $ ret [ \"contact_autologin_key\" ]  ! = NULL ? $ rq .= ， \"'\".htmlentities (  $ ret [ \"contact_autologin_key\" ]  , ENT_QUOTES ) .\"' , \" :  $ rq .= ， \"NULL , \" ; if (  $ encryptType = 1 )  ， isset (  $ ret [ \"contact_passwd\" ]  )  $ ret [ \"contact_passwd\" ]  ! = NULL ? $ rq .= ， \"'\".md5 (  $ ret [ \"contact_passwd\" ]  ) .\"' , \" :  $ rq .= \"NULL , \" ;  ， isset (  $ ret [ \"contact_passwd\" ]  )  $ ret [ \"contact_passwd\" ]  ! = NULL ? $ rq .= ， \"'\".sha1 (  $ ret [ \"contact_passwd\" ]  ) .\"' , \" :  $ rq .= \"NULL , \" ;  ， isset (  $ ret [ \"contact_passwd\" ]  )  $ ret [ \"contact_passwd\" ]  ! = NULL ? $ rq .= ， \"'\".md5 (  $ ret [ \"contact_passwd\" ]  ) .\"' , \" :  $ rq .= \"NULL , \" ;  ， The combination of unsalted hashes and Finding 1 allows an attacker to ， recover passwords for all accounts. The following example illustrates ， this attack. ， The following php code will dump the hashes of all users : ",
    "time": "2011.11.13"
}