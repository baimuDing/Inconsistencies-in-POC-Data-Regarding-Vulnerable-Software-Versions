{
    "text": "vul_url : ， vul_name : Multiple Vulnerabilities in Xythos Server Products ， vul_date : 2007.06.30 ， vul_credit_name : Brian Reilly ， vul_risk : Medium ， vul_local : ， vul_remote : Yes ， vul_cve : CVE-2007-3256, CVE-2007-3255, CVE-2007-3254 ， vul_cwe : ， vul_poc : -BEGIN PGP SIGNED MESSAGE- ， Hash: SHA1 ， Symantec Vulnerability Research ， Security Advisory ， Advisory ID: SYMSA-2007-004 ， Advisory Title: Multiple Vulnerabilities in Xythos Server Products ， Author: Brian Reilly / brian_reilly (at) symantec (dot) com [email concealed] ， Release Date: 26-06-2007 ， Application: Xythos Enterprise Document Manager (XEDM) and Xythos ， Digital Locker (XDL) 5.0 and 6.0 Platform: All ， Severity: Remotely exploitable / Full application control ， Vendor status: Verified by vendor, patches available ， CVE Number: CVE-2007-3254, CVE-2007-3255, CVE-2007-3256 [Requested] ， Overview: ， Xythos Enterprise Document Manager (XEDM) is a web-based ， document management system that provides features including ， document check-in, check-out, version control, workflow, ， sharing, classification, retention schedules. Xythos ， Enterprise Document Manager 6.0 is compliant with the U.S ， Department of Defense (DoD) 5015.2-Standard (STD) for records ， management systems. ， XEDM is vulnerable to multiple HTML and JavaScript injection ， attacks. The application fails to sanitize user input in a ， number of locations, and these vulnerabilities can be leveraged ， to conduct stored and reflected Cross-Site Scripting (XSS) and ， Cross-Site Request Forgery (CSRF). Although XEDM 6.0 uses ， unique action tokens to decrease the risk of CSRF, these ， tokens can be obtained via XSS thereby allowing an attacker to ， circumvent this countermeasure. Successful exploitation can ， lead to an attacker gaining complete control of user accounts, ， directories, files, and the XEDM administrative interface. ， All XEDM users also have the ability to set the Content Type ， of their files, and subsequently share them with other XEDM ， users or external Internet users. There is no administrative ， or server-side control to remove this ability from selected ， users, nor is there a way for administrators to globally set ， the Content Type based on file extension or actual file ， contents. As a result, malicious XEDM users have an easy way ， to distribute URLs from a trusted XEDM server that link to ， files which may appear to be \"safe,\" but actually contain ， dangerous content. ， Please note that XEDM was the only application tested by ， Symantec Vulnerability Research. Based on information provided ， by Xythos, Xythos Digital Locker (XDL) is also affected by ， vulnerabilities #3, #4, and #5 described in this advisory ， Details: ， Vulnerability #1: Persistent XSS and CSRF Vulnerability in a ， File Workflow Name ， XEDM?s Workflow feature allows users to manage and monitor the ， state of their documents with defined routing, reviews, ， approvals, and notifications between multiple users. The ， application performs no input validation on the name of a ， saved Workflow, allowing an attacker to include HTML, ， JavaScript, and other active content. Exploitation occurs ， when an administrator logs into the Xythos administrative ， interface and exports Workflow definitions. Attackers can ， trigger arbitrary XSS and CSRF payloads, thereby gaining ， complete control of the administrative interface and ， performing such actions as changing server configuration ， options and creating, modifying, or deleting XEDM users ， Vulnerability #2: Persistent XSS Vulnerability in a File ， Workflow Name ， There is an additional exploitation vector for Workflow names ， that contain active content. When a user deletes a Workflow ， template that contains such content, the payload is triggered. ， Due to likely attack scenarios, this vulnerability is less ， significant than the others described in this advisory ， Vulnerability #3: Persistent XSS and CSRF Vulnerability in a ， File Content-Type Value ， All XEDM users are able to change the Content Type of all ， files in their directories to ensure they are handled by the ， correct client applications. In addition to being displayed ， in HTTP Response headers when downloading a file, this ， information is also displayed within XEDM when users view a ， file?s properties. The web form to set a file?s Content Type ， uses a MAXLENGTH value in an <INPUT> tag to enforce a maximum ， length of 30 characters. However, it is trivial to set ， Content-Types of an arbitrary length above this limit by using ， a client Web proxy, a custom browser, or an HTTP API. The ， only server-side validation performed on a user-supplied ， Content-Type is that it must contain a forward slash, allowing ， an attacker to include HTML, JavaScript, and other active ， content. Exploitation occurs when another XDEM user views the ， file?s properties or \"manages\" the file. Attackers can ， trigger arbitrary XSS and CSRF payloads, thereby gaining ， complete control of the user?s account, and performing actions ， including changing file permissions, and creating, modifying ， and deleting files and directories ， Vulnerability #4: Reflected XSS Vulnerability in the File ， Upload Action ， XEDM is also vulnerable to a reflected XSS vulnerability that ， is exploited when the user uploads a file that contains HTML, ， JavaScript, or other active content in the filename. ， Successful exploitation can result in the standard XSS ， payloads. Due to likely attack scenarios, this vulnerability ， is less significant than the others described in this ， advisory. ， Vulnerability #5: Distributing Malicious Content due to ， Misleading URLs and User-Supplied File Content Types ， As mentioned in the details of Vulnerability #3, all XEDM ， users are able to change the Content Types of all files in ， their directories. While this behavior is similar to ， functionality offered by other web applications and web ， servers (such as the AddType directive in an Apache .htaccess ， file), there is no way for an administrator to globally set ， MIME types for certain file extensions or override user-set ， options (such as an 'AllowOverride None' directive in an ， Apache HTTP server configuration file). As a result, ， malicious users have an easy way to distribute URLs from a ， trusted XEDM server that link to files which may appear to be ， \"safe,\" but actually contain dangerous content. For example, ， a URL of the syntax ， and ， a Content Type of application/msword could really distribute a ， payload such as a zero-day Microsoft Office exploit. Other ， payloads include hostile executables, HTML, JavaScript, or any ， other malicious content with an arbitrary filename and the ， appropriate MIME type set"
}