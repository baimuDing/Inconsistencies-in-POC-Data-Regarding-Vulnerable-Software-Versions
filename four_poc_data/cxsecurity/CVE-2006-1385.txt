{
    "text": "vul_name : KisMAC Cisco Vendor Tag Encapsulated SSID Overflow ， vul_cve : CVE-2006-1385 ， vul_poc : -BEGIN PGP SIGNED MESSAGE- ， Hash : SHA1 ， Happy PPC Hacking Project ， www.hardened-php.net ， -= Security Advisory =- ， Advisory : KisMAC Cisco Vendor Tag Encapsulated SSID Overflow ， Release Date : 2006/03/23 ， Last Modified : 2006/03/23 ， Author : Stefan Esser [ sesser ( at ) hardened-php ( dot ) net [ email concealed ]  ， Application : KisMAC < dev version 113 ， KisMAC < 73p ， Severity : Special crafted 80211 management frames may cause ， a stackoverflow that eventually leads to remote ， code execution ， Risk : Critical ， Vendor Status : Vendor has a released an updated version ， Overview :  ， Quote from www.kismac.de :  ， \"KisMAC is a free stumbler application for MacOS X , that puts ， your card into the monitor mode. Unlike most other applications ， send no probe requests.\" ， While playing around with wifi , raw packets , MacOS X , ppc and ， KisMAC a quick audit revealed a remotely triggerable buffer ， overflow in KisMAC's parser for tagged data in 80211 management ， frames , that can lead to execution of arbitrary code. ， To exploit this vulnerability an attacker must either trick the ， victim in opening a pcap file containing the special crafted ， management frames OR the attacker must send such raw frames ， Details :  ， When KisMAC receives a 80211 management frame ( or finds one in ， a imported pcap file ) it parses the attached tagged data with ， the function WavePacket : parseTaggedData. With the help of this ， method the SSID , the channel and the rates get extracted from ， the management packet. ， The function in question also supports a special Cisco vendor tag ,  ， which is scanned by KisMAC for additional SSIDs. Unfortunately it ， then copies the SSIDs found into a 33 bytes big stackbuffer ， without any kind of size check. ， slen = (  *  ( ssidl + 5 )  ; / <- reading SSID length ( UINT8 )  ， ssidl += 6 ;  ，  @ try { ， memcpy ( ssid , ssidl , slen )  ; / <- copying without check into 33 ， / bytes big stackbuffer ， ssid [ slen ] =0 ;  ，  [ _SSIDs addObject :  [ NSString stringWithUTF8String : ssid ]  ;  ， } ，  @ catch ( NSException * exception ) { ，  [ _SSIDs addObject :  [ NSString stringWithCString :  ( char *  )  ( ssidl ) length : slen ]  ;  ， } ， Due to the try/catch block around the memcpy (  ) the stacklayout ， allows to overwrite the jump_buf for setjmp/longjump which are ， used for the exception handling. This actually means it is not ， only possible to control the execution flow by manipulating the ， program counter ( pc ) but also to have control over the content ， of all registers once the execution flow has been manipulated. ， It should be obvious that this eventually leads to the execution ， of arbitrary code.",
    "time": "2006.03.23"
}