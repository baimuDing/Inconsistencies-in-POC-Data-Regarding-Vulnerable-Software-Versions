{
    "text": "vul_name : Multiple Vulnerabilities in TorrentTrader Classic 1.09 ， vul_cve : CVE-2009-2156 , CVE-2009-2157 , CVE-2009-2158 , CVE-2009-2159 , CVE-2009-2160 , CVE-2009-2161 ， vul_poc :  [ waraxe-2009-SA # 074 ] - Multiple Vulnerabilities in TorrentTrader Classic 1.09 ， Author : Janek Vind \"waraxe\" ， Date : 15. June 2009 ， Location : Estonia , Tartu ， Web :  ， Description of vulnerable software :  ， TorrentTrader is a feature packed and highly customisable PHP/MySQL Based ， BitTorrent tracker. Featuring integrated forums and plenty of administration ， options. Please visit www.torrenttrader.org for the support forums. ， List of found vulnerabilities ， 1. Sql Injection vulnerability in \"account-inbox.php\" ， Reasons :  ， 1. unsanitized user submitted parameter \"origmsg\" is used in sql query ， Preconditions :  ， 1. attacker must be logged in as valid user ， Test :  ， e&origmsg=foobar&delete=yes ， Result : \"MYSQL Error has occurred ! \" ， - [ source code start ] - ，  $ msg = trim (  $ msg )  ;  ，  $ res = mysql_query ( \"SELECT id , acceptpms , notifs , email , UNIX_TIMESTAMP ( last_access ) as la FROM users WHERE username=\".sqlesc (  $ receiver ) .\" )  ;  ，  $ user = mysql_fetch_assoc (  $ res )  ;  ，  $ message = \"Username not found.\" ;  ， . ， mysql_query ( \"DELETE FROM messages WHERE id= $ origmsg\" ) or sqlerr (  )  ;  ， - [ source code end ] - ， 2. Weak password generation algorithm in \"account-recover.php\" ， Reasons :  ， 1. generated password is weak and can be easily bruteforced ， Preconditions :  ， 1. attacker must know email address associated with target's account ， Torrenttrader contains password reseting functionality :  ， Anyone can initiate password reset , only condition is , that target's email ， address must be know. Torrenttrader will check email address and after successful ， validation new , temporal password will be generated and sent to that email address. ， Specific autogenerated password appears to be random number between 10000 and 50000 ,  ， so basically there can be only 40000 possible temporal passwords. It's easy to ， write bruteforce script , which will try all possible password combinations. ， This process can take couple of hours or more , but eventually the password will ， be guessed and target account becomes compromised. ， - [ source code start ] - ，  $ email = trim (  $ _POST [ \"email\" ]  )  ;  ，  $ msg = \" . NOT_VAILD_EMAIL . \" ;  ，  $ kind = \"Error\" ;  ， } ，  $ res = mysql_query ( \"SELECT * FROM users WHERE email=\" . sqlesc (  $ email ) . \" LIMIT 1\" )  ;  ，  $ arr = mysql_fetch_assoc (  $ res )  ;  ，  $ msg = \" . EMAIL_INVALID . \" ;  ，  $ kind = \"Error\" ;  ， } ， . ，  $ newpassword = rand ( 10000 , 50000 )  ;  ，  $ md5pass = md5 (  $ newpassword )  ;  ， - [ source code end ] - ， 3. Unauthorized database backup vulnerability in \"backup-database.php\" ， Reasons :  ， 1. missing access control ， Preconditions :  ， 1. mysqldump utility must be available ， 2. gzip utility must be available ， 3. target directory must be writable ， 4. database name must be known in order to successfully guess archive filename ， Test :  ， Resulting message : \"Database backup successful , entry inserted into database.\" ， - [ source code start ] - ， system ( sprintf (  ， 'mysqldump -opt -h %s -u %s -p%s %s | gzip > %s/%s/%s-%s-%s-%s.gz' ,  ，  $ host ,  ，  $ user ,  ，  $ pass ,  ，  $ db ,  ， getenv ( 'DOCUMENT_ROOT' )  ,  ，  $ backupdir ,  ，  $ db ,  ，  $ day ,  ，  $ month ,  ，  $ year ，  )  ;  ， - [ source code end ] - ， Attacker is able to create database backup and resulting \"gz\" archive's ， filename can be guessed , if attacker knows database name. This file is also ， directly downloadable from website. Example download URI :  ， As result information leakage exists. For example , attacker can fetch admin ， credentials from backed up database. ， 4. Sql Injection vulnerability in \"browse.php\" ， Reasons :  ， 1. uninitialized variable \"wherecatin\" is used in sql query ， Preconditions :  ， 1. none ， Test :  ， Result :  ， Unknown column 'waraxe' in 'where clause' ， - [ source code start ] - ，  $ wherecatin = implode ( \" , \" ,  $ wherecatina )  ;  ， elseif ( count (  $ wherecatina ) = 1 )  ，  $ wherea [  ] = \"category = $ wherecatina [ 0 ] \" ;  ， . ，  $ where .= (  $ where ? \" AND \" : \" ) . \"category IN ( \" . $ wherecatin . \" ) \" ;  ，  $ where = \"WHERE $ where\" ;  ，  $ res = mysql_query ( \"SELECT COUNT (  *  ) FROM torrents $ where\" ) or die ( mysql_error (  )  ;  ， - [ source code end ] - ， This specific sql injection vulneraility can be exploited using blind attack ， methods. If there is one or more active torrents in database , then usable is ， attack pattern below :  ， version ) >1 , 1 , 2 ) = ( SELECT+1 ， and we see found torrents. ， version ) >50 , 1 , 2 ) = ( SELECT+1 ， \"No torrents were found based on your search criteria.\" ， In this way attacker is able to ask boolean questions from database and retrieve ， needed information bit by bit - example of classical blind sql injection. ， If there is no active torrents in database , then induced sql errors method can be used. ， version ) >1 ,  ( SELECT 1 UNION ALL SELECT 1 )  , 2 ) = ( SELECT+1 ， \"Subquery returns more than 1 row\" ， version ) >50 ,  ( SELECT 1 UNION ALL SELECT 1 )  , 2 ) = ( SELECT+1 ， \"No torrents were found based on your search criteria.\" ， 5. Information leakage in \"check.php\" ， Reasons :  ， 1. missing access control ， Preconditions :  ， 1. none ， Test :  ， This script is originally meant to be used by installer and lately by admins. ， Because of lacking access control attacker is able to use it for gathering some ， useful information about target system - full path to webroot , file and directory ， permissions of specific files , couple of php settings. ， 6. Sql Injection vulnerability in \"delreq.php\" ， Reasons :  ， 1. unsanitized user submitted parameter \"categ\" is used in sql query ， Preconditions :  ， 1. attacker must have at least super moderator privileges ( user class > 3 )  ， Comments :  ， 1. very easy to exploit ， Test :  ， Result :  ， You have an error in your SQL syntax ; check the manual that corresponds to your ， MySQL server version for the right syntax to use near ， 'waraxe order by requests.request LIMIT 0 , 50' at line 1 ， Test 2 :  ， 3 , 4 , 5 , username , password , email+FROM+users-+ ， and we can see all usernames , password hashes and emails from database. ， 7. Sql Injection vulnerability in \"index.php\" ， Reasons :  ， 1. unsanitized user submitted parameter \"choice\" is used in sql query ， Preconditions :  ， 1. attacker must be logged in as valid user ， 2. there must exist at least one poll ， Testing needs custom written html form : ",
    "time": "2009.06.24"
}