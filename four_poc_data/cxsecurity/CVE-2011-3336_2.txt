{
    "text": "vul_name : Multiple BSD libc/regcomp ( 3 ) Multiple Vulnerabilities ， vul_cve : CVE-2011-3336 ， vul_poc :  [ Multiple BSD libc/regcomp ( 3 ) Multiple Vulnerabilities ]  ， Author : Maksymilian Arciemowicz ， Date :  ， - Dis. : 05.10.2011 ， - Pub. : 04.11.2011 ， CVE : CVE-2011-3336 ， Affected Software :  ， - NetBSD 5.1 ( fixed )  ， - OpenBSD 5.0 ， - FreeBSD 8.2 ， - MacOSX ， - 0.Description - ， regcomp (  ) compiles the regular expression contained in the pattern string , subject to the flags in cflags , and places the results in the regex_t structure pointed to by preg. ， cflags is the bitwise OR of zero or more of the following flags :  ， REG_EXTENDED ， Compile modern ( extended ) REs , rather than the obsolete ( basic ) REs that are the default. ， REG_BASIC ， This is a synonym for 0 , provided as a counterpart to REG_EXTENDED to improve readability. ， - 1. Multiple BSD libc/regcomp ( 3 ) Multiple Vulnerabilities - ， In regcomp ( 3 ) of BSD implementation , i've discovered a several flaws. Similar problem was diagnosed one year ago in GNU libc ( 01.10.2010 ) . But GNU regcomp (  ) code is different from BSD. ， Recursion and bad memory managment , may admit to unexpected end of application. Together with NetBSD we have decided to fix all these flaws. Most important was limit of recursion for REG_EXTENDED and REG_BASIC , and get better control over memory usage. ， Specifically crafted .ftpaccess file can return result as below ， -proftpd- ，  # telnet 127.0.0.1 21 ， Trying 127.0.0.1. ， Connected to 127.0.0.1. ， Escape character is '^ ] '. ， 220 ProFTPD 1.3.3f Server ( ProFTPD Default Installation )  [ 127.0.0.1 ]  ， user dude ， 331 Password required for dude ， pass dude ， and in the same time ，  # gdb -q proftpd 15814 ，  ( no debugging symbols found )  ， Attaching to program : /usr/local/sbin/proftpd , process 15814 ， Reading symbols from /usr/lib/libutil.so.11.2.done. ， Loaded symbols for /usr/lib/libutil.so.11.2 ， Reading symbols from /usr/lib/libc.so.58.0.done. ， Loaded symbols for /usr/lib/libc.so.58.0 ， Reading symbols from /usr/libexec/ld.so.done. ， Loaded symbols for /usr/libexec/ld.so ， 0x001f39e9 in select (  ) from /usr/lib/libc.so.58.0 ，  ( gdb ) c ， Continuing. ， Program received signal SIGSEGV , Segmentation fault. ， 0x0026d951 in memcpy (  ) from /usr/lib/libc.so.58.0 ， crash in regcomp (  )  ， . ， assert ( finish >= start )  ;  ， enlarge ( p , p->ssize + len )  ; / * this many unexpected additions * / ， assert ( p->ssize >= p->slen + len )  ;  ，  ( void ) memcpy ( p->strip + p->slen , p->strip + start ,  ，  ( size_t ) len * sizeof ( sop )  ;  ， . ，  ( gdb ) x/i $ eip ， 0x2d42951 <memcpy+61> : repz movsl %ds :  ( %esi )  , %es :  ( %edi )  ， . ， -proftpd- ， Uncontrolled memory exhaustion , allow to create an RE consuming all free memory. As we can read in manual :  ， -man regcomp 3- ， regexec (  ) performance is poor. This will improve with later releases. nmatch exceeding 0 is expensive ; nmatch exceeding 1 is worse. ， regexec is largely insensitive to RE complexity except that back references are massively expensive. RE length does matter ; in particular , there is a strong speed bonus for keeping RE length under about 30 characters , with most special characters counting roughly double. ， regcomp (  ) implements bounded repetitions by macro expansion , which is costly in time and space if counts are large or bounded repetitions are nested. An RE like , say , ` ( a{1 , 100} ) {1 , 100} ) {1 , 100} ) {1 , 100} ) {1 , 100}' will ( eventually ) run almost any existing machine out of swap space. ， -man regcomp 3- ， Using RE like ` ( a{1 , 100} ) {1 , 100} ) {1 , 100} ) {1 , 100} ) {1 , 100}' may lead to out of swap space. It can be helpful to attack last stable version of proftpd. ， To fix memory exhaustion problem , we should create some limit of memory usage. In my opinion 128MB is optimal limit for one regcomp ( 3 ) call. Then function , checking memory usage like below ， -part-of-fix-",
    "time": "2011.11.04"
}