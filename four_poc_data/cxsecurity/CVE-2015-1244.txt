{
    "text": "vul_name : Chrome 42.0.2311 HSTS Redirect sensitive information ， vul_cve : CVE-2015-1244 ， vul_poc : Apply HSTS to WebSocket connections. ， With this change , ws : connections to hosts which have an existing HSTS pin will be automatically changed to use wss :  , ie. SSL. ， In addition , Strict-Transport-Security headers that are sent from a wss : server with a valid SSL certificate will be enforced on subsequent ws : and http : connections to the same host. This CL also modifies HttpNetworkTransaction to treat wss : the same as https : . ， BUG=455215 , 446480 ， TEST=net_unittests ， R=rsleevi @ chromium.org , tyoshino @ chromium.org ， Review URL :  ， Cr-Original-Commit-Position : refs/heads/master @ { # 317252} ， Cr-Mirrored-From :  ， Cr-Mirrored-Commit : cb76ac67dca0a133cdfa96678ac5cd2a65af96a3 ， diff -git a/data/websocket/set-hsts_wsh.py b/data/websocket/set-hsts_wsh.py ， new file mode 100644 ， index 0000000.c78a82a ， - /dev/null ， + b/data/websocket/set-hsts_wsh.py ， -0 , 0 +1 , 19 ， + # Copyright 2015 The Chromium Authors. All rights reserved. ， + # Use of this source code is governed by a BSD-style license that can be ， + # found in the LICENSE file. ， + #  ， + # Add a Strict-Transport-Security header to the response. ， + ， + ， +import json ， + ， + ， +def web_socket_do_extra_handshake ( request )  :  ， + request.extra_headers.append (  ， + ( 'Strict-Transport-Security' , 'max-age=3600' )  ， + pass ， + ， + ， +def web_socket_transfer_data ( request )  :  ， + # Wait for closing handshake ， + request.ws_stream.receive_message (  )  ， diff -git a/http/http_network_transaction.cc b/http/http_network_transaction.cc ， index e16d7c6.5ce7572 100644 ， - a/http/http_network_transaction.cc ， + b/http/http_network_transaction.cc ， -569 , 8 +569 , 8 ， OnIOComplete ( ERR_HTTPS_PROXY_TUNNEL_RESPONSE )  ;  ， } ， -bool HttpNetworkTransaction : is_https_request (  ) const { ， - return request_->url.SchemeIs ( \"https\" )  ;  ， +bool HttpNetworkTransaction : IsSecureRequest (  ) const { ， + return request_->url.SchemeIsSecure (  )  ;  ， } ， bool HttpNetworkTransaction : UsingHttpProxyWithoutTunnel (  ) const { ， -969 , 7 +969 , 7 ， } else if ( result = ERR_SSL_CLIENT_AUTH_CERT_NEEDED ) { ， / TODO ( wtc )  : Need a test case for this code path !  ， DCHECK ( stream_.get (  )  ;  ， - DCHECK ( is_https_request (  )  ;  ， + DCHECK ( IsSecureRequest (  )  ;  ， response_.cert_request_info = new SSLCertRequestInfo ;  ， stream_->GetSSLCertRequestInfo ( response_.cert_request_info.get (  )  ;  ， result = HandleCertificateRequest ( result )  ;  ， -1050 , 7 +1050 , 7 ， - if ( is_https_request (  )  ， + if ( IsSecureRequest (  )  ， stream_->GetSSLInfo ( &response_.ssl_info )  ;  ， headers_valid_ = true ;  ， diff -git a/http/http_network_transaction.h b/http/http_network_transaction.h ， index 2c4bd93.c098d75 100644 ， - a/http/http_network_transaction.h ， + b/http/http_network_transaction.h ， -142 , 7 +142 , 7 ， STATE_NONE ， } ;  ， - bool is_https_request (  ) const ;  ， + bool IsSecureRequest (  ) const ;  ， / Returns true if the request is using an HTTP ( S ) proxy without being ， / tunneled via the CONNECT method. ， diff -git a/http/http_network_transaction_unittest.cc b/http/http_network_transaction_unittest.cc ， index c3eab76.6e1ad43 100644 ， - a/http/http_network_transaction_unittest.cc ， + b/http/http_network_transaction_unittest.cc ， -12554 , 7 +12554 , 7 ， } ， - void GetSSLInfo ( SSLInfo * ssl_info ) override { NOTREACHED (  )  ; } ， + void GetSSLInfo ( SSLInfo * ssl_info ) override {} ， void GetSSLCertRequestInfo ( SSLCertRequestInfo * cert_request_info ) override { ， NOTREACHED (  )  ;  ， diff -git a/url_request/url_request.cc b/url_request/url_request.cc ， index a9f8744.2f8edd5 100644 ， - a/url_request/url_request.cc ， + b/url_request/url_request.cc ， -993 , 13 +993 , 14 ， bool URLRequest : GetHSTSRedirect ( GURL * redirect_url ) const { ， const GURL& url = this->url (  )  ;  ， - if (  ! url.SchemeIs ( \"http\" )  ， + bool scheme_is_http = url.SchemeIs ( \"http\" )  ;  ， + if (  ! scheme_is_http ! url.SchemeIs ( \"ws\" )  ， TransportSecurityState * state = context (  ) ->transport_security_state (  )  ;  ， - url : Replacements<char> replacements ;  ， - const char kNewScheme [  ] = \"https\" ;  ， - replacements.SetScheme ( kNewScheme , url : Component ( 0 , strlen ( kNewScheme )  ;  ， + GURL : Replacements replacements ;  ， + const char * new_scheme = scheme_is_http ? \"https\" : \"wss\" ;  ， + replacements.SetSchemeStr ( new_scheme )  ;  ，  * redirect_url = url.ReplaceComponents ( replacements )  ;  ， } ， diff -git a/url_request/url_request_unittest.cc b/url_request/url_request_unittest.cc ， index 5937464.cfe3b71 100644 ， - a/url_request/url_request_unittest.cc ， + b/url_request/url_request_unittest.cc ， -7267 , 6 +7267 , 26 ， EXPECT_EQ ( kOriginHeaderValue , received_cors_header )  ;  ， } ， +/ This just tests the behaviour of GetHSTSRedirect (  ) . End-to-end tests of HSTS ， +/ are performed in net/websockets/websocket_end_to_end_test.cc. ， +TEST ( WebSocketURLRequestTest , HSTSApplied ) { ， + TestNetworkDelegate network_delegate ;  ， + TransportSecurityState transport_security_state ;  ， + base : Time expiry = base : Time : Now (  ) + base : TimeDelta : FromDays ( 1 )  ;  ， + bool include_subdomains = false ;  ， + transport_security_state.AddHSTS ( \"example.net\" , expiry , include_subdomains )  ;  ， + TestURLRequestContext context ( true )  ;  ， + context.set_transport_security_state ( &transport_security_state )  ;  ， + context.set_network_delegate ( &network_delegate )  ;  ， + context.Init (  )  ;  ， + GURL ws_url ( \"ws : /example.net/echo\" )  ;  ， + TestDelegate delegate ;  ， + scoped_ptr<URLRequest> request (  ， + context.CreateRequest ( ws_url , DEFAULT_PRIORITY , &delegate , NULL )  ;  ， + EXPECT_TRUE ( request->GetHSTSRedirect ( &ws_url )  ;  ， + EXPECT_TRUE ( ws_url.SchemeIs ( \"wss\" )  ;  ， +} ， + ， namespace { ， diff -git a/websockets/websocket_end_to_end_test.cc b/websockets/websocket_end_to_end_test.cc ， index 1a3df04.fc42db9 100644 ， - a/websockets/websocket_end_to_end_test.cc ， + b/websockets/websocket_end_to_end_test.cc ， -16 , 6 +16 , 7",
    "time": "2015.04.19"
}