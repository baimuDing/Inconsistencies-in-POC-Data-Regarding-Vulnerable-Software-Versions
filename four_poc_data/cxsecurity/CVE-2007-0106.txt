{
    "text": "vul_url : ， vul_name : WordPress CSRF Protection XSS Vulnerability ， vul_date : 2007.01.09 ， vul_credit_name : Stefan Esser (sesser hardened-php net) ， vul_risk : Low ， vul_local : No ， vul_remote : Yes ， vul_cve : CVE-2007-0106 ， vul_cwe : CWE-79 ， vul_poc : -BEGIN PGP SIGNED MESSAGE- ， Hash: SHA1 ， Hardened-PHP Project ， www.hardened-php.net ， -= Security Advisory =- ， Advisory: WordPress CSRF Protection XSS Vulnerability ， Release Date: 2007/01/05 ， Last Modified: 2007/01/05 ， Author: Stefan Esser [sesser (at) hardened-php (dot) net [email concealed] ， Application: WordPress <= 2.0.5 ， Severity: The CSRF protection of WordPress's administration ， interface is vulnerable to an XSS vulnerability ， which might result in a compromise of the admin ， account and the execution of arbitrary PHP code ， on the server ， Risk: Critical ， Vendor Status: Vendor has released WordPress 2.0.6 which fixes this issue ， Overview: ， Quote from ， \"WordPress was born out of a desire for an elegant, well- ， architectured personal publishing system built on PHP and MySQL ， and licensed under the GPL. It is the official successor of ， b2/cafelog. WordPress is fresh software, but its roots and ， development go back to 2001. It is a mature and stable product. ， We hope by focusing on user experience and web standards we can ， create a tool different from anything else out there.\" ， While testing WordPress it was discovered that there is a XSS ， vulnerability in the CSRF protection of WordPress's administration ， interface. This might result in a compromise of the admin account ， and might result in the execution of arbitrary PHP code. ， Details: ， The administration interface within WordPress comes with a token ， based CSRF protection. When a request is received with an invalid ， token it is not discarded like in many similar applications, but ， a warning screen is returned that asks the admin to verify the ， action by clicking on a link (that contains a valid token). ， Unfortunately there was a bug in the way the request information ， (URL variables) was put into the new link. Due to this fault it ， was possible to break out of the HTML string context by embedding ， quotes and HTML tags into the names of URL variables. ， Due to this is is possible to launch XSS attacks against admin ， users currently logged into their WordPress and perform all possible ， administrative actions (or simply steal the login cookie). ， Depending on the file permissions on the server (for example a ， writeable wp-config.php or template file) this can also be ， exploited to execute arbitrary PHP code."
}