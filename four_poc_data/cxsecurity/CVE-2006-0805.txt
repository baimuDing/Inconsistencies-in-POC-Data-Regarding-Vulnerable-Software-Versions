{
    "text": "vul_name : Bypassing CAPTCHA in phpNuke 6.x-7.9 ， vul_cve : CVE-2006-0805 ， vul_poc : {= ， =} ， { [ waraxe-2006-SA # 045 ] } ， {= ， =} ， { } ， { [ Bypassing CAPTCHA in phpNuke 6.x-7.9 ] } ， { } ， {= ， =} ， Author : Janek Vind \"waraxe\" ， Date : 18. February 2006 ， Location : Estonia , Tartu ， Web :  ， Target software description :  ， phpNuke 6.0 - 7.9 ， Homepage :  ， What is phpNuke ? ， PHP-Nuke is a news automated system specially designed to be used in Intranets and ， Internet. The Administrator has total control of his web site , registered users , and ， he will have in the hand a powerful assembly of tools to maintain an active and 100% ， interactive web site using databases. ， Vulnerabilities :  ， So what's the CAPTCHA? From wikipedia :  ， A captcha ( an acronym for \"completely automated public Turing test to tell computers ， and humans apart\" ) is a type of challenge-response test used in computing to determine ， whether or not the user is human. The term was coined in 2000 by Luis von Ahn , Manuel ， Blum , and Nicholas J. Hopper of Carnegie Mellon University , and John Langford of IBM. ， A common type of captcha requires that the user type the letters of a distorted and/or ， obscured sequence of letters or digits that appears on the screen. ， Phpnuke is using very simple form of CAPTCHA ( called \"security code\" )  , which will try ， to resist against automated actions - login bruteforce , account creation DoS , ect. ， As usual , we can use OCR software for \"guessing\" the security code. In most of the cases ， this will succeed , but what is more important - phpNuke's CAPTCHA has very big design flaw. ， It appears , that nuke CAPTCHA's challenge and response are reusable as many times as we ， need. ， Details ， Let's look at source ( \"mainfile.php\" line ~ 898 )  :  ， - [ from source code ] - ， global $ user ,  $ sitekey ,  $ gfx_chk ;  ， mt_srand ( double ) microtime (  )  * 1000000 )  ;  ，  $ maxran = 1000000 ;  ，  $ random_num = mt_rand ( 0 ,  $ maxran )  ;  ，  $ datekey = date ( \"F j\" )  ;  ，  $ rcode = hexdec ( md5 (  $ _SERVER [ 'HTTP_USER_AGENT' ] . $ sitekey . $ random_num . $ datekey )  ;  ，  $ code = substr (  $ rcode , 2 , 6 )  ;  ， - [ /from source code ] - ， We can see , that challenge is called \" $ random_num\" and response \" $ code\" is constructed ， from various parts. And this algrithm means , that some specific challenge will have same ， response in following conditions :  ， 1. It must be same day ( because of the \" $ datekey\" )  ， 2. HTTP_USER_AGENT must be the same ， So how to exploit this design weakness. First we need working challenge/response pair ， from \"victim\" server. For this let's look at CAPTHA picture with numbers at login page. ， Right mouse click on that picture and ( in case of IE ) -> properties->address , and we ， can see picture url , something like this :  ， \" ， Let's write down \"random_num\" , this is our challenge number. Now just look at the same picture and ， you will see response number , in this case \"304380\". ， So challenge/response pair for this day is 112652/304380. ， And then just implement this knowledge in script or whatever else. As example , there is",
    "time": "2006.02.22"
}