{
    "text": "vul_name : SQL-Ledger 2.8.24 several vulnerabilities ， vul_cve : CVE-2009-3580 , CVE-2009-3581 , CVE-2009-3582 , CVE-2009-3583 , CVE-2009-3584 , CVE-2009-4402 ， vul_poc : = ，  | Security Advisory AKLINK-SA-2009-001 |  ，  | CVE-2009-3580 ( CVE candidate )  |  ，  | CVE-2009-3581 ( CVE candidate )  |  ，  | CVE-2009-3582 ( CVE candidate )  |  ，  | CVE-2009-3583 ( CVE candidate )  |  ，  | CVE-2009-3584 ( CVE candidate )  |  ， SQL-Ledger ? several issues ， Date released : 21.12.2009 ， Date reported : 28.07.2009 ，  $ Revision : 1.1 $  ， by Alexander Klink ， Fraunhofer Institute for Secure Information Technology ， alexander.klink ( at ) sit.fraunhofer ( dot ) de [ email concealed ]  ， es.txt ， Vendor : DWS Systems , Inc. ， Product : SQL-Ledger ? an open source double entry accounting/ERP system ， Website :  ， Vulnerabilities :  ， - no Cross-Site-Request-Forgery ( XSRF ) protection ， - persistent cross site scripting ， - SQL injections ， - local file include ， - secure cookie flag not set ， Class : remote ， Status : unpatched ， Severity : moderate ， Releases known to be affected : 2.8.24 ， Releases known NOT to be affected : none ， + ， Background :  ， Quoting ，  | SQL-Ledger& # 174 ; ERP is a double entry accounting/ERP system. Accounting data is ，  | stored in a SQL database server , for the display any text or GUI browser can be ，  | used. The entire system is linked through a chart of accounts. Each item in ，  | inventory is linked to income , expense , inventory and tax accounts. When items ，  | are sold and purchased the accounts are automatically updated. ， + ， Overview :  ， Several issues have been found in SQL-Ledger which might lead to attacks ， on the confidentiality and availability of business-critical data stored ， within SQL-Ledger. ， Fraunhofer SIT advises to use SQL-Ledger only in non-critical application ， scenarios with low security requirements. Furthermore , risk mitigation in ， the form of the following measures should be undertaken :  ， - Users shall be advised to use a seperate browser or browser profile ， solely to access SQL-Ledger to counter XSRF attacks. ， - Untrusted users should be given read-only access to the database to prevent ， damage from SQL injection attacks. ， - The server administrator shall restrict file creation rights on the ， SQL-Ledger server in order to prevent the storing of arbitrary files which ， may be used in local file include attacks later on. ， + ， Technical details :  ，  * No Cross-Site-Request-Forgery ( XSRF ) protection ( CVE-2009-3580 )  ， The forms in SQL-Ledger are not protected against XSRF. They include the username ， in the hidden field & # 187 ; login& # 171 ;  , though , which has to be specified correctly. An ， attacker is thus required to know the login name ? it can be guessed , brute-forced ， or retrieved using a Cross-Site-Scripting attack , though. ， An example attack would be to send the following link to the user which unknowningly ， changes his password to the application. Given network access to SQL-Ledger , the ， attacker could then use the application with the user's account and the newly set ， password. ， To set the password for the & # 187 ; test& # 171 ; user to & # 187 ; 1234& # 171 ;  , the following URL would need to ， be retrieved by a victim :  ， &email=&signature=&tel=&fax=&new_password=1234&confirm_password=1234&dat ， eformat=mm-dd-yy&numberformat=1%2C000.00&vclimit=1000&menuwidth=155&coun ， trycode=&timeout=10800&usestylesheet=sql-ledger.css&outputformat=html&pr ， inter=&old_password=te41jrt0ygm5k&path=bin%2Fmozilla&login=test&action=S ， ave ， As SQL-Ledger would typically run on an intranet server which is not directly accessible ， to an outside attacker , the missing XSRF protection makes it much easier for an attacker ， to exploit other weaknesses ( such as the XSS or SQL injection vulnerabilities that were ， found during this test ) . ，  * Persistent Cross-Site-Scripting ( CVE-2009-3581 )  ， An attacker which is logged into SQL-Ledger ( or abuses the missing XSRF protection to execute ， requests in the context of a logged-in victim ) can inject arbitrary JavaScript code which ， will then be run in the session context of other users. ， XSS injection is possible ( at least ) in the following fields :  ， - name field of the & # 187 ; Customers& # 171 ; ? & # 187 ; Add Customer& # 171 ; menu ， - name field of the & # 187 ; Vendor& # 171 ; ? & # 187 ; Add Vendor& # 171 ; menu ， Any time the customer/vendor is shown ( or can be selected in a form ) on the ， web interface , the JavaScript code is then executed in that user's context. ， - DCN Description field of the & # 187 ; Accounts Receivables& # 171 ; ? & # 187 ; Add Transaction& # 171 ; menu ， - Description field of the & # 187 ; Accounts Payable& # 171 ; ? & # 187 ; Add Transaction& # 171 ; menu ， To trigger the JavaScript code , the victim would need to view a corresponding ， report on the web interface ， As session credentials are stored within cookies , an attacker can thus steal those ， credentials or control the web application within the browser context of the victim. ， There is no central filtering of input data within SQL-Ledger ( input data is only ， filtered for some select variables , apparently more for functional than security ， reasons )  , so it is is likely that many more similar vulnerabilities exist. ，  * SQL Injection ( CVE-2009-3582 )  ， An attacker which is logged into SQL-Ledger ( or abuses the missing XSRF protection to execute ， requests in the context of a logged-in victim ) can modify input variables to perform ， SQL injection attacks. One attack is to search for an existing vendor using the & # 187 ; Vendors& # 171 ;  ， ? & # 187 ; Reports& # 171 ; ? & # 187 ; Search& # 171 ; menu. Before submitting the form using the & # 187 ; Delete& # 171 ; button , the ， hidden & # 187 ; id& # 171 ; form field is modified to & # 187 ; 1 OR 1=1& # 171 ; . This will in turn delete not only one ， vendor , but all vendors in the database. As the database table name is also passed in the ， form as the hidden & # 187 ; db& # 171 ; form field , data from any database table which has an & # 187 ; id& # 171 ; key can ， be deleted using this method. ， Similarly to the XSS finding , the main cause of this vulnerability is the inadequate ， filtering of user input. As this is present throughout the complete codebase , it is likely ， that there are similar vulnerabilities in other places. ， The README file of LedgerSMB , a fork of SQL-Ledger says the following about SQL injections ， in SQL-Ledger :  ，  | LedgerSMB 1.2 has been through a detailed SQL injection audit of the codebase ，  | inherited from SQL-Ledger. As a result several vulnerabilities which were known ，  | to be exploitable were corrected along with hundreds of places where ，  | vulnerabilities may have been exploitable but we didn't have time to verify the ，  | what was involved in exploiting it. We believe though that many or most of the ，  | issues were exploitable given a little time and effort. ， SQL-Ledger uses SQL queries which are concatenated with user input which is rarely quoted. ， For example , this is the code which is vulnerable to the attack detailed above ，  | sub delete { ，  | my (  $ self ,  $ myconfig ,  $ form ) = @ _ ;  ，  |  # connect to database ，  | my $ dbh = $ form->dbconnect_noauto (  $ myconfig )  ;  ，  |  # delete customer/vendor ，  | my $ query = qq | DELETE FROM $ form->{db} ，  | WHERE id = $ form->{id} |  ;  ，  |  $ dbh->do (  $ query )  |  $ form->dberror (  $ query )  ;  ， The values for $ form->{db} and $ form->{id} are supplied by the user and are not filtered or ， quoted before using them in the SQL query. ， Perl's DBI module offers prepared statements with bound parameter queries ( e.g. ， \"DELETE FROM ? WHERE id = ?\" )  , which should be used ? together with input filtering as a ， defense in depth strategy ? to prevent this kind of attack. ，  * Local File Include ( CVE-2009-3583 )  ， For this attack to be successful , an attacker must be able to write files containing Perl ， code to a file in an arbitrary directory on the filesystem of the server running SQL-Ledger. ， These files need to have the name of a SQL-Ledger CGI script without the & # 187 ; .pl& # 171 ; extension. ， The attacker also either needs an account on the system itself or can utilize the XSRF attack ， to trigger the necessary request. ， The attacker uses the & # 187 ; Preferences& # 171 ; menu entry to set the & # 187 ; countrycode& # 171 ; field to ( e.g. )  ， & # 187 ; ././././././././././tmp& # 171 ; . Once the new countrycode is saved for the user ,  ， SQL-Ledger executed the following code for every request to the application :  ，  | if (  $ country -d \"locale/ $ country\" ) { ，  |  $ self->{countrycode} = $ country ; ",
    "time": "2009.12.25"
}