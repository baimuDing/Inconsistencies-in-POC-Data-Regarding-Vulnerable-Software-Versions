{
    "text": "vul_name : Help project files ( .HPJ ) buffer overflow vulnerability in Microsoft Help Workshop ， vul_cve : CVE-2007-0427 ， vul_poc : Advisory :  ， Microsoft Help Workshop is prone to stack based memory corruption vulnerability ， during processing ( .HPJ ) help project files , caused by the lack of input data boundary check. ， It could be exploited by malicious entity to execute arbitrary code within the remote ， user context. ， Affected vendor :  ， Microsoft ， Product overview :  ， Microsoft Help Workshop 4.03.0002 is standard component of Microsoft Visual Studio 6 / 2003 ( .NET )  ， It could be also downloaded alone from the Microsoft download center. ， Impact :  ， Remote code execution ， Attack vector :  ， An attacker must construct malformed ( .HPJ ) file and induce victim to ， open it with the tool , or if MS Help Workshop has been launched ， in the past ( after first launch it associates the .HPJ files with itself )  ,  ， to launch the malicious file by doubleclicking/selecting to OPEN the help project. ， Technical Details :  ， The stack based buffer overflow occurs in Microsoft Help Workshop ， Example .hpj file :  ，  [ OPTIONS ]  ， REPORT=Yes ， HLP=HelpFilePathString01 ， The problem lies in lack of boundary check of file path variables ，  ( in this case : HelpFilePathString01 ) in the 'HLP' field of 'OPTIONS' section. ， When the string lenght exceeds 256 bytes , programs static buffer is overflowed ， and its memory is corrupted. ， The EIP register value is then overwritten by the DWORD value ， placed 108h bytes counting from the beginning of 'HelpFilePathString01' string. ， The ESP is set to DWORD value placed 534 bytes counting from the beggining of ， the string. ， The process control can be therefore ， intercepted by the attacker by redirecting the instruction flow ， to the attackers provided code within the malformed .hpj file. ， However before the data from the input file is being copied to the ， buffer it is parsed by the process and the specific ， ascii ranges ( 41-5A , 8A , 8C-8F , A3 , A5 , AA , Af , BC , C0-D6 , D8-DE if the string ， ends with ' ) are modified before being deployed in the stack memory. ， Therefore successful exploitation using ESP-pointed data area ， requires strongly limited instruction set or payload encoder. ， However after buffer overflows ESI value is pointing to ， the buffer in the HCW.EXE .data PE section which holds the 'untouched' ， input string , probably temp buffer for the parser. ， ESI points to the beginning of the 'HelpFilePathString01'. ， That simplifies the shellcode issue , althought ， it must be considered that the DWORD return address to overwrite EIP with the ， JMP ESI code offset in process memory space has ， still to follow the ascii-excluding rules of the parser , because the overflow ， is being produced by the parser procedure itself. ， Vulnerable software :  ， Microsoft Help Workshop v4.03.0002 ， Microsoft Visual Studio 6.0 SP6 ， Microsoft Visual Studio 2003 ( .Net ) ",
    "time": "2007.01.25"
}