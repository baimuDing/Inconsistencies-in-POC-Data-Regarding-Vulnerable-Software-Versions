{
    "text": "vul_name : Coldfusion / JNBridge Remote Code Execution ， vul_cve : CVE-2019-7839 ， vul_poc : Advisory ID : SYSS-2019-006 ， Product : Coldfusion/JNBridge ， Manufacturer : Adobe/JNBridge LLC ， Affected Version ( s )  : Coldfusion 2016 , 2018 , JNBridge all versions ， Tested Version ( s )  : 2018 ， Vulnerability Type : Remote Code Execution ， Risk Level : High ， Solution Status : Fixed ， Manufacturer Notification : 2019-03-27 ， Solution Date : 2019-06-11 ， Public Disclosure : 2019-06-24 ， CVE ， Author of Advisory : Moritz Bechler , SySS GmbH ， Overview :  ， JNBridge is a technology for integrating Java and .NET application code. ， The manufacturer describes the product as follows ( see [ 1 ]  )  :  ， \"Access Java classes from .NET as if Java were a .NET language ，  ( C #  , VB , etc ) . Access .NET classes ( written in C #  , VB , F #  , etc. )  ， from Java as if they were Java classes. Access objects and libraries ， across the platform boundary.\" ， \"Create objects , call methods , access fields , return objects.\" ， As stated , this technology , more or less by design , allows unrestricted ， access to a remote Java Runtime Environment , thereby allowing the execution ， of arbitrary code and system commands. ， Adobe Coldfusion is a web application development platform. ， Coldfusion servers running on Windows publicly expose an JNBridge ， network listener on TCP port 6093 or 6095. ， An attacker that is able to reach that service can execute arbitrary ， Java code or system commands. By default this services is running with ， highest privileges ( SYSTEM ) . ， Vulnerability Details :  ， Analysis of the JNBridge protocol reveals that it directly exposes ， basic operations like :  ，  * creating Java objects using arbitrary constructors ，  * calling methods on these objects ，  * getting/setting fields of these objects ，  * calling static methods ， Combined , these primitives essentially expose all of the Java runtime ， environment's available code/methods. For example the sequence ， 1. objectStaticCall java.lang.Runtime : getRuntime ， -> handle to java.lang.Runtime instance ， 2. objectVirtualCall handle->exec ( \"command\" )  ， -> handle to Process ， can be used to invoke arbitrary system commands. ， Proof of Concept ( PoC )  :  ， The necessary parts of the protocol to invoke the Runtime.exec (  ) method ， like described above were implemented. That code remains unreleased at ， this time. ， The PoC also reads and shows the command output. Running it against ， a default installation of Coldfusion 2018 on Windows 10 :  ，  $ ./jnbridge.py -p 6095 192.168.56.101 'whoami' ， nt authority\\system",
    "time": "2019.06.27"
}