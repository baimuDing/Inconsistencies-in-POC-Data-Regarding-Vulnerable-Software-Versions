{
    "text": "vul_url : ， vul_name : phpMyAdmin Multiple CSRF Vulnerabilities ， vul_date : 2006.10.05 ， vul_credit_name : Stefan Esser (sesser hardened-php net) ， vul_risk : Medium ， vul_local : No ， vul_remote : Yes ， vul_cve : CVE-2006-5116 ， vul_cwe : CWE-352 ， vul_poc : -BEGIN PGP SIGNED MESSAGE- ， Hash: SHA1 ， Hardened-PHP Project ， www.hardened-php.net ， -= Security Advisory =- ， Advisory: phpMyAdmin Multiple CSRF Vulnerabilities ， Release Date: 2006/10/01 ， Last Modified: 2006/10/01 ， Author: Stefan Esser [sesser (at) hardened-php (dot) net [email concealed] ， Application: phpMyAdmin <= 2.9.0 ， Severity: Multiple vulnerabilities within phpMyAdmin allow ， bypassing it's protection against CSRF ， Risk: Medium Critical ， Vendor Status: Vendor has a released an updated version ， Overview: ， Quote from ， \"phpMyAdmin is a tool written in PHP intended to handle the ， administration of MySQL over the Web. Currently it can create and ， drop databases, create/drop/alter tables, delete/edit/add fields, ， execute any SQL statement, manage keys on fields, manage privileges, ， export data into various formats and is available in 50 languages.\" ， During an audit of phpMyAdmin's protection against CSRF: Cross Site ， Request Forgeries we discovered that there were multiple ways to ， bypass the protection. ， The failure of phpMyAdmin's CSRF protection obviously means that a ， potential attacker can use CSRF attacks to trick the browser of a ， phpMyAdmin user to execute any kind of SQL queries on the victims ， database server. ， Details: ， phpMyAdmin uses a random token that is stored within the user's ， session to protect against Cross Site Request Forgeries. CSRF ， basically means that a website tricks the browser of a visiting ， user into issuing HTTP requests against another site that does ， ensure, that the request was intended. ， In case of phpMyAdmin a CSRF vulnerability obviously means that ， another site could trick the browser of a phpMyAdmin user into ， issuing arbitrary SQL queries against his database. ， In phpMyAdmin the CSRF protection works like this ， 1) Start PHP's Session Handling ， 2) Is there already a token assigned to the session? ， -> No: create a random token ， 3) Is supplied token equal to session token? ， -> No: unset() all request variables not in white-list ， While this design could actually work the implementation in ， phpMyAdmin was vulnerable to multiple attacks because before ， and during the 3 steps mentioned several modifications to the ， request variable arrays are made and these variables get ， globalised. (This is done within the PHP code and has nothing ， to do with register_globals) ， The attacks we found attack different phases of the CSRF ， protection. The following is an overview of the vulnerabilities ， within the 3 phases. For each phase several different attacks"
}