{
    "text": "vul_name : WordPress Photo Gallery 1.1.30 Cross Site Scripting ， vul_cve : CVE-2014-6315 ， vul_poc : Advisory ID : HTB23232 ， Product : Photo Gallery WordPress plugin ， Vendor :  ， Vulnerable Version ( s )  : 1.1.30 and probably prior ， Tested Version : 1.1.30 ， Advisory Publication : September 10 , 2014 [ without technical details ]  ， Vendor Notification : September 10 , 2014 ， Vendor Patch : September 10 , 2014 ， Public Disclosure : October 1 , 2014 ， Vulnerability Type : Cross-Site Scripting [ CWE-79 ]  ， CVE ， Risk Level : Low ， CVSSv2 Base Score : 2.6 ( AV : N/AC : H/Au : N/C : N/I : P/A : N )  ， Solution Status : Fixed by Vendor ， Discovered and Provided : High-Tech Bridge Security Research Lab (  )  ， Advisory Details :  ， High-Tech Bridge Security Research Lab discovered three vulnerabilities in Photo Gallery WordPress plugin , which can be exploited to perform Cross-Site Scripting ( XSS ) attacks. ， 1 ) Cross-Site Scripting ( XSS ) in Photo Gallery WordPress plugin : CVE-2014-6315 ， 1.1 Input passed via the \"callback\" HTTP GET parameter to \"/wp-admin/admin-ajax.php\" script is not properly sanitised before being returned to the user. A remote attacker can trick a logged-in administrator to open a specially crafted link and execute arbitrary HTML and script code in victim's browser in context of the vulnerable website. ， The exploitation example below uses the \"alert (  ) \" JavaScript function to display \"immuniweb\" word :  ， 1.2 Input passed via the \"dir\" HTTP GET parameter to \"/wp-admin/admin-ajax.php\" script is not properly sanitised before being returned to the user. A remote attacker can trick a logged-in administrator to open a specially crafted link and execute arbitrary HTML and script code in victim's browser in context of the vulnerable website. ， The exploitation example below uses the \"alert (  ) \" JavaScript function to display \"immuniweb\" word :  ， 1.3 Input passed via the \"extensions\" HTTP GET parameter to \"/wp-admin/admin-ajax.php\" script is not properly sanitised before being returned to the user. A remote attacker can trick a logged-in administrator to open a specially crafted link and execute arbitrary HTML and script code in victim's browser in context of the vulnerable website. ， The exploitation example below uses the \"alert (  ) \" JavaScript function to display \"immuniweb\" word : ",
    "time": "2014.10.02"
}