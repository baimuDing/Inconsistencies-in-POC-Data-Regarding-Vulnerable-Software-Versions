{
    "text": "vul_name : Security bug in CGI : Lite : escape_dangerous_chars (  ) function ， vul_cve : CVE-2003-1365 ， vul_poc :  ， SUBJECT ， Security bug in CGI : Lite : escape_dangerous_chars (  ) function , part ， of the CGI : Lite 2.0 package , and earlier revisions thereof. ， SUMMARY ， The CGI : Lite : escape_dangerous_chars (  ) function fails to escape ， the entire set of special characters that may have significance ， to the underlying shell command processor. When the function is ， used from within a web CGI script which processes arbitrary user ， input from some HTML form , an attacker may be able to read and/or ， write some or all local files and may be able to obtain shell- ， level access to the attacked web server. ， SCOPE ， Any and all UNIX and/or Linux systems which incorporate the Perl ， CGI : Lite module , or onto which this module has been installed. ， It appears likely that any/all MS Windows systems onto which the ， Perl CGI : Lite module has been installed may also be affected ,  ， however the author of this advisory HAS NOT verified that. ， IMPACT ， If the CGI : Lite : escape_dangerous_chars (  ) function is used within ，  ( for example ) a web CGI script , a remote attacker may be able to ， read and/or write local files on the attacked web server and/or ， may be able to gain shell-level access to the attacked web server ,  ， via the CGI script , as the user-id under which the CGI script is ， executed ( typically , but not always the `nobody' user ) . ， The potential exists for remote root compromise ( or other privileged ， access ) if a CGI script using CGI : Lite : escape_dangerous_chars (  ) is ， installed as set-uid ( root ) or set-gid. ， DISCUSSION ， Although poorly documented , the CGI : Lite : escape_dangerous_chars (  )  ， function appears to be a function whose purpose is to modify an ， input character string in a way so that `dangerous' characters ， which might otherwise have special significance to an underlying ， shell command processor will each be preceded by a backslash ，  ( escape ) character in the resulting output string. The intent is ， clearly to convert possibly dangerous user input strings into ， benign forms that , when provided as command line arguments to an ， underlying shell command processor , will not have any undesirable ， and/or unanticipated effects. ( The classical example is the semi- ， colon character , which acts as a command separator for most UNIX ， and/or Linux shell command processors. )  ， It is reasonable to believe that CGI : Lite : escape_dangerous_chars (  )  ， has , in all probability , been used for exactly this purpose ( i.e. ， rendering user input strings `harmless' in advance of their being ， provided , as arguments , to an underlying shell processor ) in many ， existing Perl CGI scripts. ， Unfortunately , CGI : Lite : escape_dangerous_chars (  ) fails to escape ， many of the characters mentioned as possibly dangerous characters ， in the WWW security FAQ ( Question 7 )  , specifically :  ， \\ - backslash ， ? - question mark ，  ~ - tilde ， ^ - carat ， \\n - newline ， \\r - carriage return ， Note that all or most of these character _do_ in fact have special ， meaning , when presented as parts of command line arguments to ， various UNIX and/or Linux shell command processors ( and , I suspect ,  ， probably MS Windows shell command line processors also ) . ， Below is a trivially simple example of how this security flaw can ， cause a problem , in practice :  ，  #  ! /usr/bin/perl -w ， use strict ;  ， use CGI : Lite ;  ， my $ cgi = new CGI : Lite ;  ， my %form = $ cgi->parse_form_data ;  ， my $ recipient = $ form{'recipient'} ;  ， my $ message = \"From : sender\\nSubject : Hello\\n\\nHello my friend ! \\n\\n\" ;  ，  $ recipient = escape_dangerous_chars (  $ recipient )  ;  ， open ( SM , \" | /usr/sbin/sendmail -f rfg $ recipient\" )  ;  ， print SM $ message ;  ， close SM ; ",
    "time": "2007.10.17"
}