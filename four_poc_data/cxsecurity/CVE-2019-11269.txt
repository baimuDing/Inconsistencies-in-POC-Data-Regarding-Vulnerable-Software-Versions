{
    "text": "vul_name : Spring Security OAuth 2.3 Open Redirection ， vul_cve : CVE-2019-3778 ， vul_poc :  # Exploit Title : Open Redirector in spring-security-oauth2 ，  # Date : 17 June 2019 ，  # Exploit Author : Riemann ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : Spring Security OAuth versions 2.3 prior to 2.3.6 -org.springframework.security.oauth : spring-security-oauth2 : 2.3.3.RELEASE ，  # Tested on : UBUNTU 16.04 LTS -org.springframework.security.oauth : spring-security-oauth2 : 2.3.3.RELEASE ，  # CVE : CVE-2019-11269 | CVE-2019-3778 ，  # Description ， Spring Security OAuth versions 2.3 prior to 2.3.6 , 2.2 prior to 2.2.5 , 2.1 prior to 2.1.5 , and 2.0 prior to 2.0.18 , as well as older unsupported versions could be susceptible to an open redirector attack that can leak an authorization code. A malicious user or attacker can craft a request to the authorization endpoint using the authorization code grant type , and specify a manipulated redirection URI via the redirect_uri parameter. This can cause the authorization server to redirect the resource owner user-agent to a URI under the control of the attacker with the leaked authorization code. ，  # VULNERABILITY :  ， By manipulating the REDIRECT_URI parameter , an attacker can actually bypass the validation. ， The code causing the vulnerability is found under the package org.springframework.security.oauth2.provider.endpoint ， The Class : DefaultRedirectResolver , which method obtainMatchingRedirect does not proper sanitation ，  * Attempt to match one of the registered URIs to the that of the requested one. ，  *  @ param redirectUris the set of the registered URIs to try and find a match. This cannot be null or empty. ，  *  @ param requestedRedirect the URI used as part of the request ，  *  @ return the matching URI ，  *  @ throws RedirectMismatchException if no match was found ， private String obtainMatchingRedirect ( Set<String> redirectUris , String requestedRedirect ) { ， Assert.notEmpty ( redirectUris , \"Redirect URIs cannot be empty\" )  ;  ， } ， } ， } ， throw new RedirectMismatchException ( \"Invalid redirect : \" + requestedRedirect ， + \" does not match one of the registered values : \" + redirectUris.toString (  )  ;  ， } ，  # POC ATTACK VECTOR ， The following request done by the CLIENT APP after the user has logged in , contains the REDIRECT_URI parameter. The validation is bypassed by simply adding a percentage sign which triggers a redirect instead of the RedirectMismatchException error ， The ORIGINAL REQUEST containing a valid URI :  ， GET /auth/oauth/authorize?response_type=code&client_id=R2dpxQ3vPrtfgF72&scope=user_info&state=HPRbfRgJLWdmLMi9KXeLJDesMLfPC3vZ0viEkeIvGuQ%3D&redirect_uri= HTTP/1.1 ， The attacker then tricks the application by changing entirely the URI to another server adding a percentage for example :  ， GET /auth/oauth/authorize?response_type=code&client_id=R2dpxQ3vPrtfgF72&scope=user_info&state=HPRbfRgJLWdmLMi9KXeLJDesMLfPC3vZ0viEkeIvGuQ%3D&redirect_uri= HTTP/1.1 ， Host : localhost : 8085 ， User-Agent : Mozilla/5.0 ( X11 ; Ubuntu ; Linux x86_64 ; rv : 67.0 ) Gecko/20100101 Firefox/67.0",
    "time": "2019.06.19"
}