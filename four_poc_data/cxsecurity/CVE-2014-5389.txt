{
    "text": "vul_name : WordPress Content Audit 1.6 Blind SQL Injection ， vul_cve : CVE-2014-5389 ， vul_poc : Details ， Software : Content Audit ， Version : 1.6 ， Homepage :  ， Advisory report :  ， CVE : CVE-2014-5389 ， CVSS : 3.6 ( Low ; AV : N/AC : H/Au : S/C : P/I : N/A : P )  ， Description ， Blind SQLi vulnerability in Content Audit could allow a privileged attacker to exfiltrate password hashes ， Vulnerability ， An attacker with an admin account is able to add arbitrary text in the Audited content types option by using a DOM inspector to modify the value of a checkbox field. This text is theninserted into an SQL query and executed as part of a daily wp-cron job. ， The fact that this is run only once a day makes it rather minor. An attacker would potentially need to poll /wp-cron.php repeatedly for 24 hours until they got the first result. As blind SQL injection attacks are usually done by comparing the first character to all possible characters one at a time , until a match is found it would take a very long time to exfiltrate useful data. ， However , we dont discount the possibility that someone cleverer than us could figure out a more practical attack. ， Proof of concept ， Steps an attacker may take :  ， Visit/wp-admin/options-general.php?page=content-audit ， Check an Audited content types checkbox ， Right-click that checkbox and select Inspect element ， Set the value attribute of the element tosomethingwhich does sleep ( 5 ) if the first byteof the admins password hash is a or sleep ( 10 ) otherwise ， Press Update Options ， Poll /wp-cron.php repeatedly until it takes longer than 5 seconds and recordhow long the requesttook ， Repeat",
    "time": "2014.10.02"
}