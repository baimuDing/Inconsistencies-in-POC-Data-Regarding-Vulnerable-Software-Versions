{
    "text": "vul_url : ， vul_name : AFFLIB(TM): Multiple Format String Injections ， vul_date : 2007.05.04 ， vul_credit_name : Timothy D. Morgan ， vul_risk : Medium ， vul_local : No ， vul_remote : Yes ， vul_cve : CVE-2007-2054, CVE-2007-2352 ， vul_cwe : ， vul_poc : -BEGIN PGP SIGNED MESSAGE- ， Hash: SHA1 ， Virtual Security Research, LLC. ， Security Advisory ， Advisory Name: Multiple Format String Injections in AFFLIB ， Release Date: 2007-04-27 ， Application: AFFLIB(TM) ， Versions: 2.2.0-2.2.5 and likely earlier. ， 2.2.6-2.2.8 contain a subset of these vulnerabilities. ， Severity: Medium to Low ， Author: Timothy D. Morgan <tmorgan {at} vsecurity {dot} com> ， Vendor Status: Vendor Notified, Limited Fixes Available ， CVE Candidate: CVE-2007-2054 ， Product Description: ， > From the forensicswiki.org website[1]: ， \"The Advanced Forensics Format (AFF) is an extensible open format for ， the storage of disk images and related forensic metadata. It was ， developed by Simson Garfinkel and Basis Technology.\" ， AFFLIB(TM) is the reference implementation of the AFF(TM) format, ， written primarily by Simson Garfinkel. It comes in the form of an open ， source library and a set of command line tools used to manipulate ， AFF(TM) files. ， Vulnerability Overview: ， In mid-March, 2007 Virtual Security Research, LLC (VSR) performed a ， security code review of AFFLIB(TM) as a part of an internal tool ， assessment process. As a result, multiple vulnerabilities of varying ， severities were discovered. The most significant of these ， vulnerabilities are being announced publicly to raise awareness and help ， end-users secure themselves against potential attack. ， Several command line utilities included in AFFLIB(TM) pass command line ， arguments to warn() and err() calls as part of the format string ， argument. If an attacker could influence these command line parameters, ， these could be exploited to execute arbitrary code. ， Some of the listed vulnerabilities have been fixed in versions 2.2.6 and ， later, but others remain in the latest release (2.2.8). All line numbers ， listed below are from version 2.2.0. ， Vulnerability Details: ， The following sections include detailed descriptions of the format ， string injection vulnerabilities found during the assessment. ， * Format String Injection in s3 * ， File: lib/s3.cpp ， Line: 207 ， Description: ， A command line parameter is used as the format string in the err() ， call. If an attacker could control this name, a format string injection ， vulnerability could be exploited. Lines 192-207 are included to ， illustrate the problem: ， void s3_cp(const char *fname,string key) ， { ， struct s3headers meta[2] = {0,0},{0,0}; ， char buf[64]; ， snprintf(buf,sizeof(buf),\"%d\",opt_flag); ， meta[0].name = AMAZON_METADATA_PREFIX \"arg\"; ， meta[0].value = buf; ， } ， /* Read from fname into a buffer. ， * Note that we do this with read, so that we can read from stdin ， FILE *f = fopen(fname,\"r\"); ， An attacker could exploit this problem if the s3 binary were ， setuid/setgid, or if the s3 program were executed in a CGI script or ， something similar. ， * Format String Injections in afconvert * ， File: tools/afconvert.cpp ， Lines: 226, 263, and 305 ， Description: ， A command line parameter is used as the format string in three err() ， calls. If an attacker could control this name, a format string injection ， vulnerability could be exploited. ， * Format String Injection in afcopy * ， File: tools/afcopy.cpp ， Lines: 202 and 250 ， Description: ， A command line parameter is used as the format string in two err() ， calls. If an attacker could control this name, a format string injection ， vulnerability could be exploited. ， * Format String Injection in afinfo * ， File: tools/afinfo.cpp ， Line: 584 ， Description: ， A command line parameter is used as the format string in the err() ， call. If an attacker could control this name, a format string injection ， vulnerability could be exploited. ， * Format String Injection in aimage * ， File: aimage/aimage.cpp ， Line: 577 ， Description: ， A command line parameter is used as the format string in the err() ， call. If an attacker could control this name, a format string injection ， vulnerability could be exploited. Lines 548-577 are included below to ， help illustrate the problem: ， int getlock(class imager *im) ， { ， /* If the file exists and the PID in the file is running, ， * can't get the lock. ， char lockfile[MAXPATHLEN]; ， sprintf(lockfile,\"/tmp/aimge.%s.lock\",im->infile); ， /* Lockfile exists. Get it's pid */ ， char buf[1024]; ， FILE *f = fopen(lockfile,\"r\"); ， perror(lockfile); / can't read lockfile. ， } ， fgets(buf,sizeof(buf),f); ， buf[sizeof(buf)-1] = 0; ， int pid = atoi(buf); ， /* PID is not running; we can delete the lockfile */ ， err(1,\"could not delete lockfile %s: \",lockfile); ， } ， } ， /* PID is running; generate error */ ， errx(1,\"%s is locked by process %dn\",im->infile,pid); ， } ， FILE *f = fopen(lockfile,\"w\"); ， err(1,lockfile); ， Since the im->infile value could be specified by a user, the lockfile ， string could contain format string characters. An attacker could ， exploit this problem if the aimage binary were setuid/setgid, or if the ， aimage program were executed in a CGI script or something similar. ， * Format String Injection in imager * ， File: aimage/imager.cpp ， Line: 265 ， Description: ， A command line parameter is used as the format string in the err() ， call. If an attacker could control this name, a format string injection ， vulnerability could be exploited. ， * Format String Injection in afxml * ， File: tools/afxml.cpp ， Line: 101 ， Description: ， A command line parameter is used as the format string in the err() ， call. If an attacker could control this name, a format string injection ， vulnerability could be exploited."
}