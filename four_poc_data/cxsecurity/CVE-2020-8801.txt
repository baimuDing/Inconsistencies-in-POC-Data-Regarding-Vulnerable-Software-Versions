{
    "text": "vul_name : SuiteCRM 7.11.11 Phar Deserialization ， vul_cve : CVE-2020-8801 ， vul_poc : - ， SuiteCRM <= 7.11.11 Multiple Phar Deserialization Vulnerabilities ，  [ - ] Software Link :  ，  [ - ] Affected Versions :  ， Version 7.11.11 and prior versions. ，  [ - ] Vulnerabilities Description :  ， 1 ) User input passed through the \"backup_dir\" parameter when handling ， the \"Backups\" action ， within the \"Administration\" module is not properly sanitized before ， being used in a file ， operation. This can be exploited by malicious users to inject arbitrary ， PHP objects into ， the application scope ( PHP Object Injection via phar : / stream wrapper )  ,  ， allowing them to ， carry out a variety of attacks , such as executing arbitrary PHP code. ， Successful ， exploitation of this vulnerability requires a System Administrator ， account. ， 2 ) User input passed through the \"file_name\" parameter when handling the ， \"step3 action ， within the \"Import\" module is not properly sanitized before being used ， in a file operation. ， This can be exploited by malicious users to inject arbitrary PHP objects ， into the application ， scope ( PHP Object Injection via phar : / stream wrapper )  , allowing them ， to carry out a variety ， of attacks , such as executing arbitrary PHP code. ， 3 ) User input passed through the \"load_module_from_dir\" parameter when ， handling the ， \"UpgradeWizard\" action within the \"Administration\" module is not ， properly sanitized before ， being used in a file operation. This can be exploited by malicious users ， to inject arbitrary ， PHP objects into the application scope ( PHP Object Injection via phar : / ， stream wrapper )  ,  ， allowing them to carry out a variety of attacks , such as executing ， arbitrary PHP code. ， Successful exploitation of this vulnerability requires a System ， Administrator account. ， 4 ) User input passed through the \"file_name\" parameter when handling the ， \"UploadFileCheck\" ， action within the \"UpgradeWizard\" module is not properly sanitized ， before being used in a ， file operation. This can be exploited by malicious users to inject ， arbitrary PHP objects ， into the application scope ( PHP Object Injection via phar : / stream ， wrapper )  , allowing them ， to carry out a variety of attacks , such as executing arbitrary PHP code. ， Successful",
    "time": "2020.02.13"
}