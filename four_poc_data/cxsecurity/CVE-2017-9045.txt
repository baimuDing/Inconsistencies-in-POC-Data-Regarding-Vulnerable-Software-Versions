{
    "text": "vul_name : Google I/O 2017 Android Man-In-The-Middle ， vul_cve : CVE-2017-9045 ， vul_poc :  [ Original posted here :  ， SUMMARY ， Google I/O 2017 Application for Android does not use SSL for ， retrieving some information to populate the app. This would allow an ， MITM attacker to inject their own content into the application. The ， vendor ( Google ) fixed the issue in v5.1.4 of the application. ， DETAILS ， The Google I/O 2017 application for Android is a companion app ， produced by Google for their annual I/O conference that takes place in ， May. This particular version was produced for I/O conference in May of ， 2017. ， While performing network level testing of various Google applications ,  ， we discovered that the content for the application did not use SSL. ， This would allow an MITM attacker to inject their own content into the ， application using a method like ARP spoofing , DNS takeover , etc. ， To replicate the issue on v5.03 :  ， 1. Install the application ， 2. Setup the proxy without an SSL certificate and point the Android device to it. ， 3. Go to the application and select the \"feed\" option ( middle icon on the bottom ) . ， 4. Go back to the proxy and observe captured traffic. ，  [ Screenshots are in the blog post ]  ， The specific URL was ， \" which ， then causes the device to download additional URLs. The following URLs ， are downloaded :  ， This can also be seen in the source code of the I/O 2016 application ， on Github here ( lines 42-43 )  :  ，  # API manifest URLs. These URLs provide the data files to load to download data for the app. ，  # When data needs to change the underlying data file is published as a new revision and the manifest ，  # is updated with the new file name. staging_api_manifest_endpoint = ， production_api_manifest_endpoint = ， All testing was done on Android 7 , Google I/O version 5.03. Network ， captures were performed using an on-device proxy ( PacketCapture )  ， without a trusted SSL certificate. ， PROOF OF CONCEPT ， All testing was done on Ubuntu v17.04 and Android 7 :  ， 1. Install nginx - \"sudo apt-get install nginx\". ， 2. Install dnsmasq - \"sudo apt-get install dnsmasq\" ， 3. Find out the IP address of your computer via ifconfig. ， 4. Add the IP address mapping to the hosts file : \"192.168.1.x storage.googleapis.com\" ， 5. Create and download the files from Google to the NGINX directory : ",
    "time": "2017.05.20"
}