{
    "text": "vul_name : Collection of Vulnerabilities in Fully Patched Vim 7.1 ， vul_cve : CVE-2008-2712 ， vul_poc : 1. Summary ， Product : Vim - Vi IMproved ， Version : Tested with 7.1.314 and 6.4 ， Impact : Arbitrary code execution ， Wherefrom : Local and remote ， Original :  ， Improper quoting in some parts of Vim written in the Vim Script can lead to ， arbitrary code execution upon opening a crafted file. ， 2. Overview ， `Vim is an almost compatible version of the UNIX editor Vi. Many new features ， have been added : multi-level undo , syntax highlighting , command line history ,  ， on-line help , spell checking , filename completion , block operations , etc.' ， - VIM 7.1 README.txt ， Parts of Vim are written in the Vim script language. A feature of this ， language widely used in the Vim code is the `execute' command , an equivalent ， of `eval' in some other languages. Throughout Vim , arguments passed to ， `execute' are not sanitized properly. This can lead to arbitrary code ， execution. We will show several exploits which execute arbitrary code upon ， opening a crafted file with the ex ( 1 )  , vim ( 1 )  , or view ( 1 ) commands. Only in ， few cases will we explore the possibility of remote exploitation. We will ， present fixes/workarounds to some of the vulnerabilities. ， The archive with code that is a part of this advisory can be found at ， ` ， 3. Details ， 3.0. Vim version ， In this advisory , we analyse Vim version 7.1.298. ， 3.1. Vim Script in Vim ， `The Vim script language is used for the startup vimrc file , syntax files , and ， many other things.' ， - Vim User Manual , Chapter 41 ( usr_41.txt )  ， How much is Vim Script used throughout Vim? ，  $ find /usr/local/share/vim -type f -name * .vim | wc -l ， 1037 ，  $ find /usr/local/share/vim -type f -name * .vim -exec cat {} ;  ，  | wc 2>/dev/null ， 149617 710299 6502709 ， 3.2. The `execute' command ，  : exe [ cute ] {expr1} . Executes the string that results from the evaluation ， of {expr1} as an Ex command. ， - Vim ， `execute' is similar e.g. to the `eval' command of the POSIX shell. As Vim ， Script doesn't allow variables as arguments to commands , only literals ,  ， `execute' is very popular :  ， let a = \"vim\" ， execute \"setfiletype\" a \" Alternative is cumbersome ， let b = \"/path/to/foo\" ， execute \"split\" b \" No alternative ， Now whereas the setfiletype line can be written as :  ， let &l : filetype = a ， endif ， There is no alternative for the split command - execute must be used. Which ， is a pity , because we might not even necessarily have control over the file ， name [ 1 ] . Symlinks or shell redirection might be used as a workaround. ， 3.3. Quoting in Vim Script ， There is no way to quote Ex command arguments transparently. When sanitizing ， an argument for shell's `eval' command , one can simply prepend all single ， quotes with a backslash , prepend and append a single quote , and that's it. In ， Vim , this algorithm has been recently introduced in the form of the ， shellescape (  ) function [ 2 ]  :  ，  $ ex ， Entering Ex mode. Type \"visual\" to go to Normal mode. ，  : let fmt = \"%l o'clock\" ，  : let fmt_escape = shellescape ( fmt )  ，  : echo fmt_escape ， '%l o'clock' ，  : echo system ( \"date +\" . fmt_escape )  ， 6 o'clock ， Sanitizing an argument of an Ex command in a generic way is not going to be ， that easy. ， 3.3.1. Three Character Classes ， Ex commands don't accept strings for arguments , only bare-words. In other ， words , there is just one level of quoting. It is possible to quote individual ， characters by prepending a backslash. As we can learn in the Vim ， Manual ( `cmdline.txt' ) we can divide the characters in three classes - ， characters that are treated specially :  ，  ( 1 )  * unless * preceded by a backslash ，  ( 2 )  * when * preceded by a backslash ，  ( 3 ) when preceded by a * quoted * backslash ， Example :  ， Command File written ，  : write % Current file name ，  : write % % ，  : write \\% % ， So , now we have to write a piece of code that knows which class the characters ， belong to , and quote them accordingly , right? Not really. ， There is a plethora of characters treated in a special way by Vim commands. ， Treatment varies with context. We haven't found a comprehensive description ， which characters are treated specially by which commands , in which way. ， 3.4. Vulnerabilities ， 3.4.1. Statistics ， How many Vim Scripts use `execute'? :  ，  $ find /usr/local/share/vim -type f -name * .vim -exec grep -l ， '<exe ( c ( u ( te? ) ? ) ? ) ?>' {} ;  | wc -l ， 159 ， How many `execute' statements are there? :  ，  $ find /usr/local/share/vim -type f -name * .vim -exec grep -h ， '<exe ( c ( u ( te? ) ? ) ? ) ?>' {} ;  | wc -l ， 991 ， Without comments :  ，  $ find /usr/local/share/vim -type f -name * .vim -exec grep -h ， '<exe ( c ( u ( te? ) ? ) ? ) ?>' {} ;  | grep -v '^ [  : blank :  ]  * \"' |  ， wc -l ， 901 ， 3.4.2. Exploits ， All the exploits are created using the accompanying Makefiles in the respective ， subdirectories. When open in vim ( or ex , view )  , the exploits create a file ， called `pwned' in the current directory. To create all the exploits in a ， certain subdirectory , run `make all' in that subdirectory. See the respective ， Makefile sources for details. ， It is also possible to use the Makefile in the root directory of this archive. ， To test all the exploits , run `make test'. On an unpatched system , this",
    "time": "2008.06.15"
}