{
    "text": "vul_name : Apache Struts2 2.0.0 < 2.3.15 Prefixed Parameters OGNL Injection ， vul_cve : CVE-2013-2251 , CVE-2013-2248 ， vul_poc : CVE Number : CVE-2013-2251 ， Title : Struts2 Prefixed Parameters OGNL Injection Vulnerability ， Affected Software : Apache Struts v2.0.0 - 2.3.15 ， Credit : Takeshi Terada of Mitsui Bussan Secure Directions , Inc. ， Issue Status : v2.3.15.1 was released which fixes this vulnerability ， Issue ID by Vender : S2-016 ， Overview :  ， Struts2 is an open-source web application framework for Java. ， Struts2 ( v2.0.0 - 2.3.15 ) is vulnerable to remote OGNL injection which ， leads to arbitrary Java method execution on the target server. This is ， caused by insecure handling of prefixed special parameters ( action :  ,  ， redirect : and redirectAction :  ) in DefaultActionMapper class of Struts2. ， Details :  ， <About DefaultActionMapper> ， Struts2's ActionMapper is a mechanism for mapping between incoming HTTP ， request and action to be executed on the server. DefaultActionMapper is ， a default implementation of ActionMapper. It handles four types of ， prefixed parameters : action :  , redirect :  , redirectAction : and method : . ， For example , redirect prefix is used for HTTP redirect. ， Normal redirect prefix usage in JSP :  ， <s : form action=\"foo\"> ， . ， <s : submit value=\"Register\"/> ， <s : submit name=\"redirect : value=\"Cancel\"/> ， </s : form> ， If the cancel button is clicked , redirection is performed. ， Request URI for redirection :  ， /foo.action?redirect :  ， Resopnse Header :  ， HTTP/1.1 302 Found ， Location :  ， Usage of other prefixed parameters is similar to redirect. ， See Struts2 document for details. ， <How the Attack Works> ， As stated already , there are four types of prefixed parameters. ， action :  , redirect :  , redirectAction :  , method :  ， All except for method : can be used for attacks. But regarding action :  ,  ， it can be used only if wildcard mapping is enabled in configuration. ， On the one hand , redirect : and redirectAction : are not constrained by ， configuration ( thus they are convenient for attackers ) . ， One thing that should be noted is that prefixed parameters are quite ， forceful. It means that behavior of application which is not intended ， to accept prefixed parameters can also be overwritten by prefixed ， parameters added to HTTP request. Therefore all Struts2 applications ， that use DefaultActionMapper are vulnerable to the attack. ， The injection point is name of prefixed parameters. ， Example of attack using redirect : is shown below. ， Attack URI :  ， /bar.action?redirect :  ， Response Header :  ， HTTP/1.1 302 Found ， Location :  ， As you can see , expression ( 1000-1 ) is evaluated and the result ( 999 )  ， is appeared in Location response header. As I shall explain later ,  ， more complex attacks such as OS command execution is possible too. ， In DefaultActionMapper , name of prefixed parameter is once stored as ， ActionMapping object and is later executed as OGNL expression. ， Rough method call flow in execution phase is as the following. ， org.apache.struts2.dispatcher.ng.filter.StrutsExecuteFilter.doFilter (  )  ， org.apache.struts2.dispatcher.ng.ExecuteOperations.executeAction (  )  ， org.apache.struts2.dispatcher.Dispatcher.serviceAction (  )  ， org.apache.struts2.dispatcher.StrutsResultSupport.execute (  )  ， org.apache.struts2.dispatcher.StrutsResultSupport.conditionalParse (  )  ， com.opensymphony.xwork2.util.TextParseUtil.translateVariables (  )  ， com.opensymphony.xwork2.util.OgnlTextParser.evaluate (  ) ",
    "time": "2018.05.04"
}