{
    "text": "vul_name : GNU chown and chgrp ( coreutils ) privilege escalation via recursive dereferences ， vul_cve : CVE-2017-18018 ， vul_poc : Product : GNU chown and chgrp ( coreutils )  ， Versions-affected : 8.29 and earlier ( all )  ， Author : Michael Orlitzky ， Bug-report :  ， = Summary = ， The chown program in GNU coreutils is vulnerable to a race condition ， when using the POSIX \"-R -L\" options to follow symlinks recursively. ， In the presence of symlinks , the recursive directory traversal is not ， guaranteed to be performed depth-first. As a result , the \"new owner\" may ， be able to introduce a symlink at a point in the traversal that has yet ， to be reached. When it is reached , chown will be performed on the target ， of that symlink - a situation that is often exploitable to gain root ， privileges. ， The chgrp program is implemented with chown and is vulnerable in the ， same way when used on group-writable paths. ， = Details = ， When calling GNU chown recursively , there is an \"obvious\" race ， condition that is handled correctly :  ， mjo $ sudo mkdir -p foo/bar ， mjo $ sudo chown -verbose -recursive mjo foo ， changed ownership of 'foo/bar' from root to mjo ， changed ownership of 'foo' from root to mjo ， If the order was switched ( that is , if the traversal was not ， depth-first )  , then there would be a period of time where mjo ( as the ， owner of \"foo\" ) could do bad things to \"foo/bar\" before chown was ， called on it. But so far so good : the order above is safe , and chown ， does not follow symlinks by default with \"-recursive\" or \"-R\". ， The bad news : if , in addition , you pass the POSIX \"-L\" flag to chown ,  ， then the new owner of \"foo\" can exploit the situation. The main idea ， is to use a symlink that points up , to reorder the traversal , and then ， to exploit the aforementioned race condition. If you're lucky , the ， race can be won with a naive loop in a second shell. The unlucky ( or ， merely impatient ) reader might want to add some sleep (  ) calls after ， the printf (  ) statements in src/chown-core.c. ， = Terminal 1 ( root ) =",
    "time": "2018-01-06 / 2018-01-05"
}