{
    "text": "vul_name : WordPress 4.6 Unauthenticated Remote Code Execution ( RCE ) PoC Exploit ， vul_cve : CVE-2016-10033 ， vul_poc : = ， - Discovered by : Dawid Golunski ， - dawid [ at ] legalhackers.com ， - CVE-2016-10033 ， - Release date : 03.05.2017 ， - Revision 1.0 ， - Severity : Critical ， I. VULNERABILITY ， WordPress Core 4.6 - Unauthenticated Remote Code Execution ( RCE ) PoC Exploit ，  ( default configuration , no plugins , no auth )  ， II. BACKGROUND ， \"WordPress is a free and open-source content management system ，  ( CMS ) based on PHP and MySQL. ， WordPress was used by more than 27.5% of the top 10 million ， websites as of February 2017. WordPress is reportedly the ， most popular website management or blogging system in ， use on the Web , supporting more than 60 million websites.\" ， III. INTRODUCTION ， This advisory reveals details of exploitation of the PHPMailer ， vulnerability ( CVE-2016-10033 ) in WordPress Core which ( contrary to what ， was believed and announced by WordPress security team ) was affected by the ， vulnerability. ， The Remote Code Execution attack could be used by unauthenticated remote attackers ， to gain instant access to the target server on which a vulnerable WordPress ， core version was installed in its default configuration which could lead ， to a full compromise of the target application server. ， No plugins or non-standard settings are required to exploit the vulnerability. ， This advisory reveals new exploitation vectors for PHP mail (  )  ， function discovered by the author that allow to exploit the vulnerability on a ， most popular MTA ( Mail Transfer Agent ) - Exim which can be found installed by ， default on many system such as Debian or Ubuntu , as opposed to rarely used ， Sendmail MTA that has been thought to be a requirement for mail (  ) injection ， attacks to date. ， Due to critical severity of this vulnerability , disclosure of new ， exploitation vectors that increase the range of this type of attacks , and the ease ， of mass exploitation , the release of this advisory was delayed by an ， extended period of time to allow WordPress and other potentially affected ， software vendors enough time to update affected mail libraries. ， The release was also delayed to allow WordPress team more time for patching ， another WordPress vulnerability ( CVE-2017-8295 ) which will be described in detail ， in a separate advisory shortly. ， IV. DESCRIPTION ， The following snippet of code from WordPress 4.6 - file wp-includes/pluggable.php :  ， / Get the site domain and get rid of www. ，  $ sitename = strtolower (  $ _SERVER [ 'SERVER_NAME' ]  )  ;  ，  $ sitename = substr (  $ sitename , 4 )  ;  ， } ，  $ from_email = 'wordpress @ ' . $ sitename ;  ， } ，  * Filters the name to associate with the \"from\" email address. ，  *  @ since 2.3.0 ，  *  @ param string $ from_name Name associated with the \"from\" email address. ，  $ from_name = apply_filters ( 'wp_mail_from_name' ,  $ from_name )  ;  ，  $ phpmailer->setFrom (  $ from_email ,  $ from_name )  ;  ， shows that WordPress sets the email domain based on SERVER_NAME server ， header when WordPress wp_mail (  ) function is called to send an email ( e.g. upon ， user registration , forgotten password etc. ) . ， As we can see the from address is formed as follows :  ，  $ from_email = 'wordpress @ ' . $ sitename ;  ， It is then filtered and passed to a vulnerable setFrom (  ) function of PHPMailer which ， was explained in detail in the previous advisories :  ， Injection ， SERVER_NAME server header can be manipulated on default configurations of Apache ， Web server ( most common WordPress deployment ) via HOST header of a HTTP request. ， To illustrate , here is a request and response of a simple php script vars.php that ， simply prints out relevant parts of server headers (  $ _SERVER PHP array )  :  ， GET /vars.php HTTP/1.1 ， Host : xenialINJECTION ， HTTP/1.1 200 OK ， Server : Apache ， Array ，  [ HTTP_HOST ] => xenialINJECTION ，  [ SERVER_SOFTWARE ] => Apache/2.4.18 ( Ubuntu )  ，  [ SERVER_NAME ] => xenialinjection ， . ， As we can see , INJECTION string appended to the hostname in HOST header gets ， copied to both HTTP_HOST and SERVER_NAME PHP variables. ， Using this HOST header example , if an attacker triggered wp_mail (  ) function ， by using the forgotten password WordPress feature , the HTTP request would be similar to :  ， POST /wordpress/wp-login.php?action=lostpassword HTTP/1.1 ， Host : xenialINJECT",
    "time": "2017-05-03 / 2017-05-04"
}