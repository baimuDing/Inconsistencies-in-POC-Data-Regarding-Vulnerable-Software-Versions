{
    "text": "vul_name : Write-up by Amit Klein : \"Forging HTTP request headers with Flash\" ， vul_cve : CVE-2006-3918 ， vul_poc : Forging HTTP request headers with Flash ， Amit Klein , July 2006 ， Flash - Introduction ， Flash player is a very popular browser add-on from Adobe ，  ( actually , Flash was invented by Macromedia , which was acquired ， by Adobe ) . This write-up covers mostly Flash 7 and Flash 8 ,  ， together covering more than 94% of the Internet-enabled desktops ，  ( according to NPD Online Survey conducted April 2006 , quoted in ， Adobe's website [ 1 ]  ,  [ 2 ]  ) . Flash movies are delivered as SWF ，  ( ShockWave File ) files. Adobe developed a rich Javascript-like ， language called ActionScript to provide scripting capabilities to ， Flash. One of the interesting features of ActionScript is its ， ability to send HTTP requests to 3rd party sites through the ， browser which invoked it. This is where Flash becomes interesting ， security-wise. With Flash it is possible to shape an outgoing ， request to a 3rd party site in ways not available from within ， \"standard\" Javascript. Specifically of interest is Flash's ， ability to send arbitrary HTTP request headers with outgoing HTTP ， requests. ， Sending arbitrary HTTP request headers with Flash ， The following is ActionScript 2.0 syntax for sending out a GET ， request ( in this example , to ， with an arbitrary ， HTTP header ( Foo : Bar ) . This code works with Flash 7 and Flash 8 ，  ( probably with Flash 6 as well )  :  ， var req : LoadVars=new LoadVars (  )  ;  ， req.addRequestHeader ( \"Foo\" , \"Bar\" )  ;  ， req.send ( \" ， \"_blank\" , \"GET\" )  ;  ， A similar syntax will send POST request ( with the same header , to ， the same URL , and with body a=b&c=d )  :  ， var req : LoadVars=new LoadVars (  )  ;  ， req.addRequestHeader ( \"Foo\" , \"Bar\" )  ;  ， req.decode ( \"a=b&c=d\" )  ;  ， req.send ( \" ， \"_blank\" , \"POST\" )  ;  ，  ( note : the LoadVars.decode (  ) method was added in Flash 7 , yet ， it's probably possible to compose an arbitrary POST body without ， it , so Flash 6 may be covered as well by this variant ) . ， The request is sent from the browser invoking the Flash object. ， Any cookies the browser normally sends , will be sent in those ， cases as well. The browser's User-Agent is sent , as well as all ， browser standard headers. HTTPS links are supported. ， This was successfully demonstrated with Microsoft IE 6.0 ,  ， Microsoft IE 6.0 SP2 and FireFox 1.5.0.4 , running Flash 8.0.22.0 ， and Flash 7.0.19.0. ， In IE , it is possible to overwrite some \"normal\" browser headers ， by simply calling addRequestHeader with the new value. This is ， applicable to both Referer and User-Agent. In FireFox 1.5.0.4 ,  ， such headers , when used in addRequestHeader (  ) will be appended to ， the HTTP request header section. ， / One UA in IE 6.0 SP2 , two UAs in FF 1.5.0.4 ， req.addRequestHeader ( \"User-Agent\" , \"Hacker/1.0\" )  ;  ， / One Referer in IE 6.0 SP2 , two Referers in FF 1.5.0.4 ， req.addRequestHeader ( \"Referer\" , \" ， In IE , it is also possible to overwrite some more sensitive ， headers ( e.g. Host and Content-Length ) by appending colon to the ， header name ( this technique was described in [ 3 ] in the context ， of XmlHttpRequest )  :  ， req.addRequestHeader ( \"Host : \" , \"foobar.site\" )  ;  ， This technique doesn't appear to work in FireFox 1.5.0.4. ， Note : when the target URL is in the same domain with the Flash ， movie , LoadVars may be used to read the HTTP response data , thus ， making LoadVars the basis for many Flash-based AJAX-like ， frameworks ( in analogy to Javascript's XmlHttpRequest object ) . ， The security implications ， The ability of an attacker to force a victim's browser to send ， HTTP requests to 3rd party sites with arbitrary HTTP request ， headers has impact on our understanding of web application ， security - both on assessment of security-related phenomena , and ， on the validity of some security mechanisms. ， It is important to understand that the attacks described here are ，  ( in themselves ) not cross-site scripting attacks , neither are ， they ( strictly speaking ) any breach of cross-domain trust in the ， Flash object or between the Flash object and the embedding HTML ， page. They merely make use of the fact that it's possible to send ， requests from a Flash object to any URL , with almost any HTTP ， headers the attacker needs. This in itself is the problem , as it ， enables an attacker to send a link ( to an HTML page embedding a ， Flash object , or directly to a Flash object residing at the ， attacker's website ) that will cause a Flash object to be executed ， in the victim's browser. This Flash object will send the HTTP ， request ( with HTTP headers chosen by the attacker ) to a target ， website , and this in turn will compromise the security of the ， browser ( victim ) . ， In other words , the implicit assumption made by many software ， developers ( and probably also by many security researchers ) that ， most HTTP headers cannot be forced to have arbitrary values by an ， attacker who serves data to the victim browser is shown to be in ， error in this write-up. ， Example 1 - The \"Expect\" header ， In [ 4 ]  , an injection problem was described wherein Apache 1.3.34 ,  ， 2.0.57 and 2.2.1 are vulnerable to injecting HTML data ( including ， malicious Javascript code ) through the Expect header. In [ 5 ]  ,  ， yours truly commented , with respect to this issue , that ， \"Regarding XSS This phenomenon is not XSS per-se. Unless someone ， can show me how it is possible to force a browser to send the ， Expect header to the target site\". But using a Flash object , the ， attack is trivial ( the author is therefore answering his own ， question here. ) . Consider a victim ( browser ) that clicks the ， following link :  ， This URL represents a Flash object that runs the following",
    "time": "2006.08.01"
}