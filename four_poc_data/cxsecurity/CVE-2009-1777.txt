{
    "text": "vul_name : FormMail 1.92 Multiple Vulnerabilities ， vul_cve : CVE-2009-1776 , CVE-2009-1777 ， vul_poc : FormMail 1.92 Multiple Vulnerabilities ， Name Multiple Vulnerabilities in FormMail ， Systems Affected FormMail 1.92 and possibly earlier versions ， Severity Medium ， Impact ( CVSSv2 ) Medium 4.3/10 , vector :  ( AV : N/AC : M/Au : N/C : P/I : N/A : N )  ， Vendor ， Advisory ， Authors Francesco \"ascii\" Ongaro ( ascii AT ush DOT it )  ， Giovanni \"evilaliv3\" Pellerano ( evilaliv3 AT ush DOT it )  ， Antonio \"s4tan\" Parata ( s4tan AT ush DOT it )  ， Date 20090511 ， I. BACKGROUND ， FormMail is a generic HTML form to e-mail gateway that parses the ， results of any form and sends them to the specified users. This script ， has many formatting and operational options , most of which can be ， specified within each form , meaning you don't need programming knowledge ， or multiple scripts for multiple forms. This also makes FormMail the ， perfect system-wide solution for allowing users form-based user feedback ， capabilities without the risks of allowing freedom of CGI access. There ， are several downloading options available below and more information on ， this script can be found in the Readme file. FormMail is quite possibily ， the most used CGI program on the internet , having been downloaded over ， 2 , 000 , 000 times since 1997. ， II. DESCRIPTION ， Multiple Vulnerabilities exist in FormMail software. ， III. ANALYSIS ， Summary :  ， A ) Prelude to the vulnerabities ， B ) Cross Site Scripting ， C ) HTTP Response Header Injection ， D ) HTTP Response Splitting ， A ) Prelude to the vulnerabities ， What follows is the code used to validate the user input :  ， Line 283 :  $ safeConfig array definition. ， -8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<- ， foreach $ field ( keys %Config ) { ，  $ safeConfig{ $ field} = &clean_html (  $ Config{ $ field} )  ;  ， } ， -8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<- ， Line 518 : definition of clean_html function , used to generate the ， \" $ safeConfig\" array from \" $ Config\". ， -8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<- ，  # This function will convert < , > , & and \" to their HTML equivalents. ， sub clean_html { ， local $ value = $ _ [ 0 ]  ;  ，  $ value = ~ s/\\&/\\&amp ; /g ;  ，  $ value = ~ s/</\\</g ;  ，  $ value = ~ s/>/\\>/g ;  ，  $ value = ~ s/\"/\\\"/g ;  ， } ， -8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<- ， These functions are not always applied to the user input and don't ， protect against all the attack vectors ( as URI or DOM XSS that can work ， also if encoded )  , this is why various vulnerabilities exist. ， B ) Cross Site Scripting vulnerability ， Line 293 : the \"redirect\" variable is used to write the location header ， value. Its value is not filtered so it's possible to perform both ， HTTP Header Injection and an HTTP Response Splitting attacks. ， Since Header Injection is one of the most versatile attack vectors we ， could use it ( like \"downgrade it\" ) to perform a Cross Site Scripting ， attack but it would not represent a different vulnerability. ， In this case we are already inside a \"Location\" response header and it's ， possible to perform an XSS without splitting the response and using the ， standard Apache page for the 302 Found HTTP status. ， -8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-8<-",
    "time": "2009.05.13"
}