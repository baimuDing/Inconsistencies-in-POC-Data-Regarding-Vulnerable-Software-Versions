{
    "text": "vul_name : AkoComment SQL injection vulnerability ， vul_cve : CVE-2006-1421 ， vul_poc : AkoComment is a well known and widely used add-on for the Mambo and ， Joomla Content Management Systems. It allows users to post comments to ， articles. ， AkoComment 2.0 suffers from an SQL injection vulnerability ，  ( components/com_akocomment/akocomment.php )  :  ，  # Clear any HTML and SQL injections ，  $ title = strip_tags (  $ title )  ;  ，  $ comment = strip_tags (  $ comment )  ;  ，  $ title = mysql_escape_string (  $ title )  ;  ，  $ comment = mysql_escape_string (  $ comment )  ;  ，  # Perform database query ，  $ date = date ( \"Y-m-d H : i : s\" )  ;  ，  $ ip = getenv ( 'REMOTE_ADDR' )  ;  ，  $ query2 = \"INSERT INTO # _akocomment SET contentid=' $ contentid' ,  ， ip=' $ ip' , name=' $ acname' , title=' $ title' , comment=' $ comment' ,  ， date=' $ date' , published=' $ ac_autopublish' ; \" ;  ，  $ database->setQuery (  $ query2 )  ;  ，  $ database->query (  )  ;  ， While the user provided comment and comment title is properly ， sanitized , the client provided $ acname and $ contentid are not. These ， correspond to hidden , value-prefilled FORM variables in the akocomment ， created html form. ， It is widely known that just because the values are hidden and not ， changeable in a standard web browser doesn't mean they are not client ， provided and thus aren't trivially modified. ， Since the variables are not sanitized in any way the SQL injection ， itself is straight-forward , provided magic_quotes_gpc = off.",
    "time": "2006.03.28"
}