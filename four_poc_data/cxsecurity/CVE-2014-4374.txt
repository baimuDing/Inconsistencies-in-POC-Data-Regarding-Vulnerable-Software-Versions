{
    "text": "vul_name : Apple Foundation NSXMLParser XML eXternal Entity ( XE )  ， vul_cve : CVE-2014-4374 ， vul_poc : VSR Security Advisory ， Advisory Name : Apple Foundation NSXMLParser XML eXternal Entity ( XE ) Flaw ， Release Date : 2014-09-17 ， Application : Apple iOS Foundation Framework ， Apple OS X Foundation Framework ， Versions : iOS 7.0 , 7.1 , OS X 10.9 - 10.9.4 ， Severity : High ， Author : George D. Gal <ggal ( at ) vsecurity.com> ， Vendor Status : Fix Available ， CVE Candidate : CVE-2014-4374 ， Product Description ， - From [ 1 ]  :  ， \"Xcode includes software development kits ( SDKs ) that enable you to create ， applications that run on specific versions of iOS or OS X?including ， versions different from the one you are developing on. This technology ， lets you build a single binary that takes advantage of new features when ， running on a system that supports them , and gracefully degrades when ， running on an older system. Some Apple frameworks automatically modify ， their behavior based on the SDK an application is built against for ， improved compatibility.\" ， Vulnerability Overview ， In May 2014 , VSR identified a vulnerability in versions 7.0 and 7.1 of ， the iOS ， SDK whereby the NSXMLParser class , resolves XML External Entities by default ， despite documentation which indicates otherwise. In addition , settings to ， change the behavior of XML External Entity resolution appears to be ， non-functional. ， This vulnerability , commonly known as XE ( XML eXternal Entities ) attacks ， could allow for an attacker's ability to use the XML parser to carry out ， attacks ranging from network port scanning , information disclosure ,  ， denial of service , and potentially to carry out remote file retrieval. ， Further review also revealed that the Foundation Framework used in OS X ， 10.9.x is also vulnerable. ， The severity of this vulnerability varies. For example , in situations where ， the application does not reflect user influenced XML , retrieval of files ， may be limited , however using external HTTP entities could be used to ， conduct port scans. In other scenarios if core iOS applications transmit XML ， over plaintext protocols , these protocols could potentially be intercepted ， to leak contents of any file on the mobile device. For App Store ， applications ， files which could be accessed may be limited to those under the individual ， chrooted application directories , or in the case of jailbroken devices , any ， file on the filesystem. ， Vulnerability Details ， Apple's NSXMLParser documentation [ 2 ] indicates that external entity ， resolution is disabled in the parser by default. However , inspection of ， multiple applications running on iOS 7.0 and 7.1 now appear to resolve ， external entities by default , and even when attempting to disable entity ， resolution explicitly as shown below :  ，  [ nsXmlParser setShouldResolveExternalEntities : NO ]  ;  ， The following source code demonstrates the flaw :  ， - - ( void ) doParse :  ( NSData *  ) data { ， / create and init NSXMLParser object ， NSXMLParser * nsXmlParser = [ NSXMLParser alloc ] initWithData : data ]  ;  ， / Why does the following not even work ! ? ，  [ nsXmlParser setShouldResolveExternalEntities : NO ]  ;  ， / create and init our delegate ， VSRParser * parser = [ VSRParser alloc ] initXMLParser ]  ;  ， / set delegate ，  [ nsXmlParser setDelegate : parser ]  ;  ， / parsing. ， BOOL success = [ nsXmlParser parse ]  ;  ， / test the result ， NSLog (  @ \"No errors\" )  ;  ， NSMutableArray * stuff = [ parser tests ]  ;  ， } else { ， NSLog (  @ \"Error parsing document ! \" )  ;  ， } ，  [ parser release ]  ;  ，  [ nsXmlParser release ]  ;  ， } ， When using a vulnerable input XML file as shown below , the XML parser ， attempts ， to perform network name resolution and access the resource defined by &http ;  ， <?xml version=\"1.0\" encoding=\"UTF-8\"?>",
    "time": "2014.09.19"
}