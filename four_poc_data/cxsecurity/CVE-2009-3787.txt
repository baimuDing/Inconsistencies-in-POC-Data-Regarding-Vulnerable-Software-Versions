{
    "text": "vul_name : Vivvo CMS 4.1.5.1 - Remote File Disclosure ， vul_cve : CVE-2009-3787 ， vul_poc :  [ waraxe-2009-SA # 075 ] - Remote File Disclosure in Vivvo CMS 4.1.5.1 ， Author : Janek Vind \"waraxe\" ， Date : 21. October 2009 ， Location : Estonia , Tartu ， Web :  ， Description of vulnerable software :  ， Vivvo CMS is an intuitive content management system atop a powerful programming ， framework , empowering numerous industry leading online newspapers , magazines ,  ， journals , TV and radio stations. ， List of found vulnerabilities ， 1. Remote File Disclosure in \"files.php\" ， Reasons :  ， 1. wrongly implemented filtering of user submitted data ， Preconditions : none ， Impact : remote attacker can download arbitrary files from target server ， Remarks :  ， 1. authentication is not needed ， 2. POST parameters or cookies can be used as attack vector ， 3. Vulnerable are all Vivvo CMS versions >= 4.1.0 ， - [ source code start ] - ，  $ filename = str_replace ( '.' , ' ,  $ _REQUEST [ \"file\" ]  )  ;  ，  $ filename = str_replace ( 'logs/' , ' ,  $ filename )  ;  ，  $ file = VIVVO_FS_ROOT . 'files/' . $ filename ;  ，  $ file_split = explode ( '.' ,  $ file )  ;  ，  $ ext = end (  $ file_split )  ;  ， . ， header ( \"Content-type : application/force-download\" )  ;  ， header ( \"Content-disposition : attachment ; filename=\\\".basename (  $ file ) .\"\\\" )  ;  ， } ， readfile (  $ file )  ;  ， - [ source code end ] - ， Source code snippet above takes user submitted parameter \"file\" and will use it ， in file path. There is security measure against obvious directory traversal ， risk - double dots ( \".\" ) are filtered out from user submitted data. ， Let's try this :  ， . and we get 404 error :  ， Page Not Found ， The requested URL was not found on this server. ， If you believe this page should be here , please notify administrator. ， OK , directory traversal is not possible here. But . wait a minute . ， What happens , if we try something like this :  ， Oops , we can download Vivvo CMS configuration file with sensitive data inside. ， How about database backup? ， 18-46_vivvo4151.sql.gz ， . and we have admin's password hash ( simple MD5 ) in our possession. ， Database backup's filename must be guessed before successful download , but it is ， not complex task. We allready know database name ( from conf.php )  , there is ， only 1440 minutes in one day , so attacker can use bruteforce for filename guessing. ， For example , if backup is done within last 30 days , then maximum 43200 requests ， is needed for successful database backup fetching. ， As vulnerable input variable is $ _REQUEST [ \"file\" ]  , then attack vector can be ， not only GET parameter , but also POST parameter or even cookie. As most real ， world webservers do not log POST data and cookies , then such method can make",
    "time": "2009.10.27"
}