{
    "text": "vul_name : WordPress User Registration 3.0.2 Arbitrary File Upload ， vul_cve : CVE-2023-3342 ， vul_poc : Description : User Registration <= 3.0.2 Authenticated ( Subscriber+ ) Arbitrary File Upload ， Affected Plugin : User Registration Custom Registration Form , Login Form And User Profile For WordPress ， Plugin Slug : user-registration ， Affected Versions : <= 3.0.2 ， CVE ID : CVE-2023-3342 ， CVSS Score : 9.9 ( Critical )  ， CVSS Vector : CVSS : 3.1/AV : N/AC : L/PR : L/UI : N/S : C/C : H/I : H/A : H ， Researcher/s : Lana Codes ， Fully Patched Version : 3.0.2.1 ， The User Registration plugin for WordPress is vulnerable to arbitrary file uploads due to a hardcoded encryption key and missing file type validation on the ur_upload_profile_pic function in versions up to , and including , 3.0.2. This makes it possible for authenticated attackers with subscriber-level capabilities or above to upload arbitrary files on the affected sites server which may make remote code execution possible. This was partially patched in version 3.0.2 and fully patched in version 3.0.2.1. ， Technical Analysis ， The User Registration plugin provides a versatile drag and drop registration form builder , with custom fields and unlimited customization options. It also provides a login form. After logging in , it provides users with a profile that allows various types of customization , including uploading a profile picture. ， Examining the code reveals that the plugin uses two separate functions to set the profile picture. The first AJAX function uploads the profile picture to a temp folder , and the second request moves the file and sets the profile picture to the user. ， The profile_pic_upload (  ) function uses a generic image upload solution , which checks the file extension and then uploads the image to the temp folder. The interesting part is that the data from the uploaded file is encrypted within the AJAX response :  ，  [ VIEW THIS CODE SNIPPET ON THE BLOG ]  ， JSON response after the file upload in the profile_pic_upload (  ) function ， The encrypted upload_files data in the response is something like this :  ， upload_files-response ， Encryption is used due to the way the plugin handles uploads because the encrypted data is decrypted and used to determine the filename and filepath where the file is saved for the user. However , for data to be encrypted and decrypted , an encryption key is required. As a general rule , encryption keys should be confidential and unique to each website. ，  [ VIEW THIS CODE SNIPPET ON THE BLOG ]  ， We unfortunately found that the encryption key is hardcoded in vulnerable versions of the plugin in the crypt_the_string (  ) function , which means that threat actors also had access to the key which was not unique per WordPress installation. This makes it possible for attackers to craft an uploaded files data array payload that can be used to modify the filename , path , and extension when saving the profile picture.",
    "time": "2023.07.13"
}