{
    "text": "ecve : CVE-2010-4051 CVE-2010-4052 ， title : GNU libc/regcomp ( 3 ) - Multiple Vulnerabilities - Linux dos Exploit ， verified : Not Verified ， exploit_detail : // source :  ， -BEGIN PGP SIGNED MESSAGE- ， Hash : SHA1 ，  [ GNU libc/regcomp ( 3 ) Multiple Vulnerabilities ]  ， Author : Maksymilian Arciemowicz ， Date :  ， - - Dis. : 01.10.2010 ， - - Pub. : 07.01.2011 ， CERT : VU # 912279 ， CVE :  ， CVE-2010-4051 ， CVE-2010-4052 ， Affected ( tested )  :  ， - - Ubuntu 10.10 ， - - Slackware 13 ， - - Gentoo 18.10.2010 ， - - FreeBSD 8.1 ( grep ( 1 )  )  ， - - NetBSD 5.0.2 ( grep ( 1 )  )  ， Original URL :  ， Exploit for proftpd :  ， - --- 0.Description --- ， The GNU C library is used as the C library in the GNU system and most ， systems with the Linux kernel. ，  # define RE_DUP_MAX ( 0x7fff )  ， regcomp (  ) is used to compile a regular expression into a form that is ， suitable for subsequent regexec (  ) searches. ， - --- 1. RE_DUP_MAX overflow --- ， The main problem exists in regcomp ( 3 ) function of GNU libc implementation. ， Let`s try understand.. ， - --- ， int ， regcomp ( preg , pattern , cflags )  ， regex_t * __restrict preg ;  ， const char * __restrict pattern ;  ， int cflags ;  ， - --- ， - --- ， / * This function parse repetition operators like \" * \" , \"+\" , \"{1 , 3}\" etc. ，  * / ， static bin_tree_t *  ， parse_dup_op ( bin_tree_t * elem , re_string_t * regexp , re_dfa_t * dfa ,  ， re_token_t * token , reg_syntax_t syntax , reg_errcode_t * err )  ， bin_tree_t * tree = NULL ,  * old_tree = NULL ;  ， int i , start , end , start_idx = re_string_cur_idx ( regexp )  ;  ， re_token_t start_token = * token ;  ， end = 0 ;  ， start = fetch_number ( regexp , token , syntax )  ; <= ==== CONVERT VALUE ， - --- ， let`s see fetch_number => ， - --- ， static int ， fetch_number ( re_string_t * input , re_token_t * token , reg_syntax_t syntax )  ， int num = -1 ;  ， unsigned char c ;  ， fetch_token ( token , input , syntax )  ;  ， c = token->opr.c ;  ， num = (  ( token->type ! = CHARACTER |  | c < '0' |  | '9' < c |  | num == -2 )  ， ? -2 :  (  ( num == -1 ) ? c - '0' : num * 10 + c - '0' )  )  ;  ， num = ( num > RE_DUP_MAX ) ? -2 : num ;  ， - --- ， now see regex.h to know , what value have RE_DUP_MAX ， - --- ， / * Maximum number of duplicates an interval can allow. Some systems ，  ( erroneously ) define this in other header files , but we want our ， value , so remove any previous define. * / ，  # if",
    "time": "2011-01-07"
}