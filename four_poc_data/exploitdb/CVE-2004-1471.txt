{
    "text": "ecve : CVE-2004-1471 ， title : CVS 1.11.x - Multiple Vulnerabilities - Linux local Exploit ， verified : Verified ， exploit_detail : // source :  ， CVS is prone to multiple vulnerabilities. The issues include a double free vulnerability , format string vulnerabilities , and integer overflows. There is also a null termination issue in the security patch for BID 10384 , potentially leading to a server crash. Some of these issues may be leveraged to execute arbitrary code , while other issues may only result in a denial of service. ， / * Remote CVS <= 1.11.15 exploit for the error_prog_name double free vuln. ，  * by Gyan Chawdhary , gunnu45 hotmail com ，  * Vulnerability Description :  ，  * The Vulnerability lies in the serve_argumentx function. The Argumentx ， command ，  * parameter is used to append data to a previously supplied Argument ， command. ，  * These data pointers are stored in the argument_vector array. The ，  * serve_argumentx fails to check wether an Argument command is present in ， the ，  * argument_vector and may append data to a pointer that should not get ，  * touched at all , in our case the * error_prog_name string. The function ， calls ，  * realloc to create space for the new string. Because realloc will be called ，  * to store strlen ( error_prog_name ) + strlen ( somedata ) the original chunk ， which ，  * just stores error_prog_name will get freed. This free chunk will once ， again ，  * get freed after we disconnect from the CVS pserver. ，  * Theory :  ，  * Sucessful exploitation depends heavily on a specific heap layout to be ， met. ，  * The argument_vector is initialized for holding 3 ptrs. If more space is ，  * required it will call realloc. The error_prog_name string resides right ，  * after the argument_vector chunk. ，  *  | 11 | arg_vector | 11 | error_prog_name | 109 | some chunk ，  * address of error_prog_name is stored in the argument_vector [ 0 ] . ，  * To achive sucessfull exploitation the following steps are performed. ，  * 1 ) Send Argumentx command with a large argument to reallocate ， error_prog_name ，  * + large command on top of the heap. This will free the original ，  * error_prog_name buffer. ，  * 2 ) Send 50 Argument calls which will require the argument_vector array to ， be ，  * reallocated freeing the current buffer. We keep this a high number to get ，  * mem from the top itself and to make the exploit reliable. As both the ，  * original the arg_vector & err_prg_name buffers are free they are ，  * consolidated. Also we supply our fake chunk and shellcode in this call. ，  * 3 ) Send an argument command with the size & prevsize as its arguments. ， This ，  * will now be stored in arg_vector & err_prg_name consolidated buffer. ，  * 4 ) Once we close the connection free will be called on the error_prog_name ，  * string which will read our fake size & prev_size fields pointing to the ， fake ，  * chunk , executing our shellcode. ，  * Phew !  !  !  !  ，  * NOTES : Iv tried this exp on RH 8 with glibc 2.3. * . This exp did NOT work ， on ，  * my slack 8.0 cause of glibc 2.2 which creates a very different heap ， layout. ，  * Also some tweaking will be required to use this exploit remotely as ， sometimes ，  * the overwritten GOT does not execute due to early drop in the connection ，  * Please someone figure it out n mail me :  ) .. ，  * Now the exploit ，  * FOR EDUCATIONAL PURPOSE ONLY FOR EDUCATIONAL PURPOSE ONLY FOR EDUCATIONAL ，  * PURPOSE ONLY FOR EDUCATIONAL PURPOSE ONLY FOR EDUCATIONAL PURPOSE ONLY FOR ，  * EDUCATIONAL PURPOSE ONLY FOR EDUCATIONAL PURPOSE ONLY FOR EDUCATIONAL ， PURPOSE *  ，  * Greets : jp - for his cool paper on advanced malloc exploits , and the ， heapy.so ，  * jaguar @ felinemenace - We at ... : P ，  * cya ，  * Gyan ，  * /",
    "time": "2004-06-09"
}