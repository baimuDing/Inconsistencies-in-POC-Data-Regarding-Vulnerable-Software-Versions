{
    "text": "ecve : CVE-2018-3639 ， title : AMD / ARM / Intel - Speculative Execution Variant 4 Speculative Store Bypass - Hardware dos Exploit ， verified : Verified ， exploit_detail : / *  ， ======== Intro / Overview ======== ， After Michael Schwarz made some interesting observations , we started ， looking into variants other than the three already-known ones. ， I noticed that Intel's Optimization Manual says in ， section 2.4.4.5 ( \"Memory Disambiguation\" )  :  ， A load instruction micro-op may depend on a preceding store. Many ， microarchitectures block loads until all preceding store address ， are known. ， The memory disambiguator predicts which loads will not depend on ， any previous stores. When the disambiguator predicts that a load ， does not have such a dependency , the load takes its data from the ， L1 data cache. ， Eventually , the prediction is verified. If an actual conflict is ， detected , the load and all succeeding instructions are re-executed. ， According to my experiments , this effect can be used to cause ， speculative execution to continue far enough to execute a ， Spectre-style gadget on a pointer read from a memory slot to which a ， store has been speculatively ignored. I have tested this behavior on ， the following processors from Intel and AMD :  ， - Intel ( R ) Core ( TM ) i7-6600U CPU @ 2.60GHz [ Skylake laptop ]  ， - AMD PRO A8-9600 R7 , 10 COMPUTE CORES 4C+6G [ AMD desktop ]  ， - Intel ( R ) Xeon ( R ) CPU E5-1650 v3 @ 3.50GHz [ Haswell desktop ]  ， I haven't yet tested this on any ARM CPU. ， Interestingly , only on the Skylake laptop , it seems to work when ， interrupts and SMP are disabled while the test is running ; on the ， other machines , it seems to only work when interrupts are enabled ,  ， maybe because the kernel code cause some noise that garbles some ， predictor state or so? Or just because they mess up timing ， somewhere... ， There were mentions of data speculation on the netdev list , in a ， somewhat different context :  ， However , I'm not entirely sure about the terminology. Do ， \"data speculation\" and \"value speculation\" include speculating about ， the * source * of data , or do they refer exclusively to directly ， speculating about the * value * of data? ， ======== Demo code ( no privilege boundaries crossed ) ======== ， This is some code that purely demonstrates the basic effect and shows ， that it is possible to combine it with a Meltdown/Spectre-style ， gadget for leaking data into the cache. It does not cross any ， privilege boundaries. ， ----------------------- START ----------------------- ， // compile with : gcc -o test test.c -Wall -DHIT_THRESHOLD={CYCLES} ， // optionally add : -DNO_INTERRUPTS",
    "time": "2018-05-22"
}