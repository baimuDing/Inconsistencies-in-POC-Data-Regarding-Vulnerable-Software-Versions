{
    "text": "published_time: 2016-10-20 ， id: 33274 ， eid: 40608 ， cve: CVE-2016-0079 ， title: Microsoft Windows - NtLoadKeyEx Read Only Hive Arbitrary File Write Privilege Escalation (MS16-124) - Windows local Exploit ， author: Google Security Research ， published_time: 2016-10-20 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/40608 ， exploit_detail: /*\r ， Source: \r ， Windows: NtLoadKeyEx Read Only Hive Arbitrary File Write EoP\r ， Platform: Windows 10 10586 not tested 8.1 Update 2 or Windows 7\r ， Class: Elevation of Privilege\r ， Summary:\r ， NtLoadKeyEx takes a flag to open a registry hive read only, if one of the hive files cannot be opened for read access it will revert to write mode and also impersonate the calling process. This can leading to EoP if a user controlled hive is opened in a system service.\r ， Description:\r ， One of the flags to NtLoadKeyEx is to open a registry hive with read only access. When this flag is passed the main hive file is opened for Read only, and no log files are opened or created. However theres a bug in the kernel function CmpCmdHiveOpen, initially it calls CmpInitHiveFromFile passing flag 1 in the second parameter which means open read-only. However if this fails with a number of error codes, including STATUS_ACCESS_DENIED it will recall the initialization function while impersonating the calling process, but it forgets to pass the read only flag. This means if the initial access fails, it will instead open the hive in write mode which will create the log files etc.\r ， An example where this is used is in the WinRT COM activation routines of RPCSS. The GetPrivateHiveKeyFromPackageFullName method explicitly calls NtLoadKeyEx with the read only flag (rather than calling RegLoadAppKey which will not). As this is opening a user ActivationStore.dat hive inside the AppData\\Local\\Packages directory in the users profile its possible to play tricks with symbolic links to cause the opening of the hive inside the DCOM service to fail as the normal user then write the log files out as SYSTEM (as it calls RtlImpersonateSelfEx). \r ， This is made all the worse because of the behaviour of the file creation routines. When the log files are being created the kernel copies the DACL from the main hive file to the new log files. This means that although we dont really control the log file contents we can redirect the write to an arbitrary location (and using symlink tricks ensure the name is suitable) then reopen the file as it has an explicit DACL copied from the main hive we control and we can change the files contents to whatever you like."
}