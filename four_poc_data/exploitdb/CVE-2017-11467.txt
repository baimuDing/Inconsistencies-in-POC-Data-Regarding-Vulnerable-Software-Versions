{
    "text": "published_time: 2017-07-13 ， id: 37920 ， eid: 44068 ， cve: CVE-2017-11467 ， title: OrientDB - Code Execution - Windows remote Exploit ， author: SecuriTeam ， published_time: 2017-07-13 ， verified: Not Verified ， platform: Windows ， exploit_type: remote ， exploit_url: /download/44068 ， exploit_detail:  Vulnerability Summary\r ， The following advisory reports a vulnerability in OrientDB which allows users of the product to cause it to execute code.\r ， OrientDB is a Distributed Graph Database engine with the flexibility of a Document Database all in one product. The first and best scalable, high-performance, operational NoSQL database.\r ，  Credit\r ， An independent security researcher, Francis Alexander, has reported this vulnerability to Beyond Securitys SecuriTeam Secure Disclosure program.\r ，  Vendor response\r ， The vendor has released patches to address this vulnerability and issue CVE-2017-11467.\r ， For more information: \r ，  Vulnerability Details\r ， OrientDB uses RBAC model for authentication schemes. By default an OrientDB has 3 roles  admin, writer and reader. These have their usernames same as the role. For each database created on the server, it assigns by default these 3 users.\r ， The privileges of the users are:\r ， admin  access to all functions on the database without any limitation\r ， reader  read-only user. The reader can query any records in the database, but cant modify or delete them. It has no access to internal information, such as the users and roles themselves\r ， writer  same as the reader, but it can also create, update and delete records\r ， ORole structure handles users and their roles and is only accessible by the admin user. OrientDB requires oRole read permissions to allow the user to display the permissions of users and make other queries associated with oRole permissions.\r ， From version 2.2.x and above whenever the oRole is queried with a where, fetchplan and order by statements, this permission requirement is not required and information is returned to unprivileged users.\r ， Example:\r ， select * from <em>oRole</em> order by name;\r ， The user writer which is created with every database you create. Thus even if the db admin changes the admin user password, an attacker would still be able to get Code Execution with the writer user.\r ， Since we enable the functions where, fetchplan and order by, and OrientDB has a function where you could execute groovy functions and this groovy wrapper doesnt have a sandbox and exposes system functionalities, we can run any command we want.\r ， Sample Groovy"
}