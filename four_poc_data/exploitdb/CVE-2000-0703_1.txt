{
    "text": "ecve : CVE-2000-0703 ， title : SUIDPerl 5.00503 - Mail Shell Escape ( 1 ) - Linux local Exploit ， verified : Verified ， exploit_detail : source :  ， The interaction between some security checks performed by suidperl , the setuid version of perl , and the /bin/mail program creates a scenario that allows local malicious users to execute commands with root privileges. ， The suidperl program performs a number of checks to make sure it can't be fooled into executing a perl script with root privileges when its not suid root. When one of these checks fails the program will compose a message to the root user. The mail message looks like this :  ， From : Bastard Operator <root @ nimue.tpi.pl> ， To : root @ nimue.tpi.pl ， User 500 tried to run dev 769 ino 343180 in place of dev 769 ino 343183 !  ，  ( Filename of set-id script was /some/thing , uid 500 gid 500. )  ， Sincerely ,  ， perl ， The name of the script to execute ( inserted into the message ) is taken from the program's argument list ( argv [ 1 ]  ) . suidperl executes /bin/mail to inject the message into the mail system. It does so without cleaning the environment or dropping its root privileges. The /bin/mail program has an undocumented feature. By setting the environment variable \"interactive\" to any value , /bin/mail will interpret the sequence \" ~  ! \" as an escape sequence to start a shell and execute commands even when the program is not attached to a terminal. The environment variable \"interactive\" can be also set from ~ /.mailrc with a \"set interactive\" line. ， A malicous user can create a file with an escape sequence and commands embedded in the file name , then execute suidperl in such a way that the security check fails. suidperl will send a message to root via /bin/mail with the escape sequence embedded in the message. This will cause /bin/mail to start a root shell and execute the commands. ，  #  ! /usr/bin/perl ，  # In spring 2000 i got a pointer from Dave Dittrich that my own perl-script ，  # that i used for my EoE IDS used /bin/mail in an insecure way. However ,  ，  # Dave told me that it is propably not exploitable. Some month later ，  # i noticed that suidperl uses the same way to log intrusion-attempts. ，  # I patched perl.c so that i could test the vuln without the race. After some ，  # hard nights i found , that it was possible. The thing that made the exploit possible ，  # was mail's hidden feature 'interactive'. I contacted some friends and ，  # we all agreed that the exploit wouldn't be the easiest. However , after contacting ，  # Michal too , he showed that we have been wrong. :  )  ，  # Michal wrote the first exploit ( shell-script ) but it failed on my BSD box. ，  # So i ported it to perl. Below the initial comment from his",
    "time": "2000-08-07"
}