{
    "text": "ecve : CVE-2016-9587 ， title : Ansible 2.1.4/2.2.1 - Command Execution - Linux remote Exploit ， verified : Not Verified ， exploit_detail : Computest security advisory CT-2017-0109 ， Summary : Command execution on Ansible controller from host ， Affected software : Ansible ， CVE : CVE-2016-9587 ， CT-2017-0109_Ansible.txt ， Affected versions : < 2.1.4 , < 2.2.1 ， Credit : Undisclosed at Computest ( research @ computest.nl )  ， Date of publication : January 9 , 2017 ， During a summary code review of Ansible , Computest found and exploited several ， issues that allow a compromised host to execute commands on the Ansible ， controller and thus gain access to the other hosts controlled by that ， controller. ， This was not a full audit and further issues may or may not be present. ， About Ansible ， \"Ansible is an open-source automation engine that automates cloud provisioning ,  ， configuration management , and application deployment. Once installed on a ， control node , Ansible , which is an agentless architecture , connects to a managed ， node through the default OpenSSH connection type.\" ， - wikipedia.org ， Technical Background ， A big threat to a configuration management system like Ansible , Puppet , Salt ， Stack and others , is compromise of the central node. In Ansible terms this is ， called the Controller. If the Controller is compromised , an attacker has ， unfettered access to all hosts that are controlled by the Controller. As such ,  ， in any deployment , the central node receives extra attention in terms of ， security measures and isolation , and threats to this node are taken even more ， seriously. ， Fortunately for team blue , in the case of Ansible the attack surface of the ， Controller is pretty small. Since Ansible is agent-less and based on push , the ， Controller does not expose any services to hosts. ， A very interesting bit of attack surface though is in the Facts. When Ansible ， runs on a host , a JSON object with Facts is returned to the Controller. The ， Controller uses these facts for various housekeeping purposes. Some facts have ， special meaning , like the fact \"ansible_python_interpreter\" and ， \"ansible_connection\". The former defines the command to be run when Ansible is ， looking for the python interpreter , and the second determines the host Ansible ， is running against. If an attacker is able to control the first fact he can ， execute an arbitrary command , and if he is able to control the second fact he is ， able to execute on an arbitrary ( Ansible-controlled ) host. This can be set to ， \"local\" to execute on the Controller itself. ， Because of this scenario , Ansible filters out certain facts when reading the ， facts that a host returns. However , we have found 6 ways to bypass this filter. ， In the scenarios below , we will use the following variables :  ， PAYLOAD = \"touch /tmp/foobarbaz\"",
    "time": "2017-01-09"
}