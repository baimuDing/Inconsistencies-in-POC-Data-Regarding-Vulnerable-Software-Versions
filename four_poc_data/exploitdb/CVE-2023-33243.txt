{
    "text": "ecve : CVE-2023-33243 ， title : STARFACE 7.3.0.10 - Authentication with Password Hash Possible - JSP webapps Exploit ， verified : Not Verified ， exploit_detail : Exploit Title : STARFACE 7.3.0.10 - Authentication with Password Hash Possible ， Affected Versions : 7.3.0.10 and earlier versions ， Fixed Versions : - ， Vulnerability Type : Broken Authentication ， Security Risk : low ， Vendor URL :  ， Vendor Status : notified ， Advisory URL :  ， Advisory Status : published ， CVE : CVE-2023-33243 ， CVE URL :  ， Introduction ， \"When functionality and comfort come together , the result is a ， state-of-the-art experience that we've dubbed 'comfortphoning'. It's a ， secure , scalable digital communication solution that meets every need ， and wish. STARFACE is easy to integrate into existing IT systems and ， flexibly grows with your requirements.\" ，  ( from the vendor's homepage )  ， More Details ， The image of STARFACE PBX [ 0 ] in version 7.3.0.10 can be downloaded from ， the vendor's homepage [ 1 ] . The included files can be further examined by ， either extracting the contents or running the image in a virtual ， machine. The web interface of the PBX uses the JavaScript file at the ， following path to submit the login form :  ， js/prettifier.js ， The following two lines of the JavaScript file \"prettifier.js\" add the ， two parameters \"secret\" and \"ack\" to the form before being submitted :  ，  $ form ( document.forms [ 0 ]  ) .add ( 'secret' , createHash ( defaultVals.isAd , liv , lpv , defaultVals.k + defaultVals.bk )  )  ;  ，  $ form ( document.forms [ 0 ]  ) .add ( 'ack' , defaultVals.k )  ;  ， The JavaScript object \"defaultVals\" is included in the web application's ， source text. While the value of \"defaultVals.k\" was found to be the ， static hash of the PBX version , the value of \"defaultVals.bk\" contains a ， nonce only valid for the currently used session. Therefore , the form ， parameter \"ack\" is always the same value. For the form value \"secret\" ， the function \"createHash (  ) \" is called with different arguments. The ， value of \"defaultVals.isAd\" is set to \"false\" when login via Active ， Directory is disabled. The parameters \"liv\" and \"lpv\" contain the ， username and password entered into the form respectively. ， const createHash = function ( isAD , user , pass , nonces ) { ， } ;  ， The expression right after the second return statement is the ， implementation used when Active Directory login is disabled which is the ， default setting. The return value is composed of the username separated ， via a colon from a value built using the \"forSF (  ) \" function. The ， \"forSF (  ) \" function was found to calculate the SHA512 hash value. When ， considering the arguments passed to the function , the hash is calculated ， as follows :  ， SHA512 ( username + defaultVals.k + defaultVals.bk + SHA512 ( password )  )  ， As can be seen , instead of the cleartext password the SHA512 hash of the ， password is used in the calculation. In conclusion , for the form value ， \"secret\" the following value is transmitted :  ， username + \" : \" + SHA512 (  ， username + defaultVals.k + defaultVals.bk + SHA512 ( password )  ， If the SHA512 hash of a user's password is known , it can be directly ， used in the calculation of the \"secret\" during the login process. ， Knowledge of the cleartext password is not required. ， This finding was also verified by analysing the decompiled Java code of ， the server component. It was also found that the authentication process ， of the REST API is vulnerable in a very similar manner.",
    "time": "2023-06-04"
}