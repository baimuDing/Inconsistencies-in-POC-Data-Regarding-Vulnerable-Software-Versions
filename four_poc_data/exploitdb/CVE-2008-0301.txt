{
    "text": "ecve : CVE-2008-0301 ， title : Mapbender 2.4.4 - 'gaz' SQL Injection - PHP webapps Exploit ， verified : Verified ， exploit_detail : Advisory : SQL-Injections in Mapbender ， During a penetration test RedTeam Pentesting discovered multiple ， SQL-Injections in Mapbender. A remote attacker is able to execute ， arbitrary SQL commands and therefore can get e.g. valid usernames and ， password hashes of the Mapbender users. ， Details ， Product : Mapbender ， Affected Versions : 2.4.4 ( verified )  , probably older versions , too ， Fixed Versions : 2.4.5 rc1 ， Vulnerability Type : SQL-Injection ， Security-Risk : high ， Vendor-URL :  ， Vendor-Status : informed , fixed version released ， Advisory-URL :  ， Advisory-Status : public ， CVE : CVE-2008-0301 ， CVE-URL :  ， Introduction ， \"Mapbender is the software and portal site for geodata management of OGC ， OWS architectures. The software provides web technology for managing ， spatial data services implemented in PHP , JavaScript and XML. It ， provides a data model and interfaces for displaying , navigating and ， querying OGC compliant map services. The Mapbender framework ， furthermore provides authentication and authorization services , OWS ， proxy functionality , management interfaces for user , group and service ， administration in WebGIS projects.\" ，  ( from the vendor's homepage )  ， More Details ， Due to the lack of input validation , an attacker is able to inject ， SQL-commands in many PHP scripts of Mapbender. This vulnerability can be ， exploited regardless of PHP magic quotes. For demonstration purposes , the ， injection into the \"gaz\" variable of the file ， http/php/mod_gazetteer_edit.php is shown. ， The two relevant lines are :  ，  $ sql = \"SELECT * FROM gazetteer WHERE gazetteer_id = \". $ _REQUEST [ \"gaz\" ]  ;  ，  $ res = db_query (  $ sql )  ;  ， The user input $ _REQUEST [ \"gaz\" ] goes unfiltered , unquoted and unescaped ， into an SQL statement. As no prepared statements are used here , an ， attacker can execute arbitrary SQL commands. ， There is no need to use quotes in the SQL statement for an attacker , so ， PHP magic quotes do not help.",
    "time": "2008-03-11"
}