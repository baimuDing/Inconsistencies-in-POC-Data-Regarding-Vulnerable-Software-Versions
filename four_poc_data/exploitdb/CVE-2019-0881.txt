{
    "text": "ecve : CVE-2019-0881 ， title : Microsoft Windows 10 1809 - 'CmKeyBodyRemapToVirtualForEnum' Arbitrary Key Enumeration Privilege Escalation - Windows local Exploit ， verified : Verified ， exploit_detail : Windows : CmKeyBodyRemapToVirtualForEnum Arbitrary Key Enumeration EoP ， Platform : Windows 10 1809 ( not tested earlier )  ， Class : Elevation of Privilege ， Security Boundary ( per Windows Security Service Criteria )  : User boundary ， Summary :  ， The kernels Registry Virtualization doesnt safely open the real key for a virtualization location leading to enumerating arbitrary keys resulting in EoP. ， Description :  ， When the virtualization flag is set on the primary token certain parts of the HKLM\\Software hive are virtualized to a per-user location under Software\\Classes. If the key exists in HKLM ( and can be virtualized ) then a handle to the HKLM key is opened read-only and the virtualized key is only created if any modification is made to the key , such as writing a value. ， However , if a virtualized key already exists then that key is opened and the real key is only opened on demand. One reason to open the backing key is if the virtual key is enumerated , to provide compatibility the kernel will merge the key/value information from the real key into the virtual key. The real key is opened every time a call is made to NtEnumerateKey , NtQueryValue etc. ， The open of the real key is performed in CmKeyBodyRemapToVirtualForEnum. It first constructs the real path to the key using CmpReparseToVirtualPath then opens the key object using Ob ， 1 ) The access mode passed to Ob ， 2 ) The open operation will follow symbolic links in the registry. ， When combined together these two issues allow a normal user to redirect a real key to an arbitrary registry location , as security checking is disabled then it will open any key including the SAM or BCD hives. The only requirement is finding a virtualizable key inside HKLM which is writable by the normal user. Theres a number of examples of this , but the easiest and ironic one to exploit is the HKLM\\SOFTWARE\\Microsoft\\DRM key. In order to get the virtualization to work you do need to create a new subkey , without any virtualization flags ( the DRM key can be virtualized anyway ) with a security descriptor which limits the user to read-only but grants the administrator group full access. This will meet the virtualization criteria , and as the key is in HKLM which is a trusted hive then any symbolic link can reparse to any other hive. This can be exploited as follows :  ， 1 ) Create a new subkey of DRM which can only be written to by an administrator ( just pass an appropriate security descriptor ) . This should be done with virtualization disabled. ， 2 ) Open the new subkey requesting read and write access with virtualization enabled. Write a value to the key to cause it to be virtualized then close it. ， 3 ) Reopen the subkey requesting read and write access with virtualization enabled. ， 4 ) Replace the new subkey in DRM with a symlink to \\Registry\\Machine\\SAM\\SAM. ， 5 ) Enumerate keys or values of the virtual key , it should result in the SAM hive being opened and enumerated. Repeat the process to dump all data from the hive as needed. ， Fixing wise , Im not really sure why the real key is opened without any access checking as the code should have already checked that the user could open the real key for read-only in order to create the virtual key and if the call fails it doesnt seem to impact the enumeration process , just it doesnt return the data. You might try and block symbolic link reparsing , but passing OBJ_OPEN_LINK isnt sufficient as you could replace a key higher up the key path which is the actual symbolic link. ， These operations cant be done from any sandbox that I know of so its only a user to system privilege escalation.",
    "time": "2019-05-23"
}