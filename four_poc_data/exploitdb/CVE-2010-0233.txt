{
    "text": "ecve : CVE-2010-0233 ， title : Microsoft Windows XP/Vista/2000/2003 - Double-Free Memory Corruption Privilege Escalation - Windows local Exploit ， verified : Verified ， exploit_detail : // source :  ， // Microsoft Windows is prone to a local privilege-escalation vulnerability that occurs in the kernel. ， // An attacker can exploit this issue to execute arbitrary code with kernel-level privileges. Successful exploits will result in the complete compromise of affected computers. Failed exploit attempts will cause a denial of service. ， // -------------------------------------------------------- ， // Windows NtFilterToken (  ) Double Free Vulnerability ， // ----------------------------- taviso @ sdf.lonestar.org ------------ ， // INTRODUCTION ， // NtFilterToken (  ) will jump to a cleanup routine if it failed to capture ， // the arguments specified due to pathological TOKEN_GROUP parameter. This ， // cleanup routine assumes a pointer passed to SeCaptureSidAndAttributesArray (  )  ， // will be NULL if it fails , and attempts to release it otherwise. ， // Unfortunately there is a codepath where SeCaptureSidAndAttributesArray (  )  ， // allocates a buffer , releases it on error , but then does not set it to ， // NULL. This causes NtFilterToken (  ) to incorrectly free it again. ， // IMPACT ， // This is probably exploitable ( at least on MP kernels ) to get ring0 code ， // execution , but you would have to get the released buffer re-allocated ， // during a very small window and you only get one attempt ( the kernel ， // will bugcheck if you dont win the race ) . ， // Although technically this is a local privilege escalation , I don't think ， // it's possible to create a reliable exploit. Therefore , It's probably ， // safe to treat this as if it were a denial of service. ， // Interestingly , Microsoft are big proponents of static analysis and this ， // seems like a model example of a statically discoverable bug. I would ， // guess they're dissapointed they missed this one , it would be fun to ， // know what went wrong. ， // This vulnerability was reported to Microsoft in October , 2009. ， // CREDIT ， // This bug was discovered by Tavis Ormandy <taviso @ sdf.lonestar.org>.",
    "time": "2010-02-09"
}