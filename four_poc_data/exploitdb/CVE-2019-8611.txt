{
    "text": "ecve : CVE-2019-8611 ， title : Apple macOS < 10.14.5 / iOS < 12.3 JavaScriptCore - AIR Optimization Incorrectly Removes Assignment to Register - Multiple dos Exploit ， verified : Verified ， exploit_detail : While fuzzing JavaScriptCore , I encountered the following JavaScript program which crashes jsc from current HEAD ( git commit 3c46422e45fef2de6ff13b66cd45705d63859555 ) in debug and release builds ( ./Tools/Scripts/build-jsc -jsc-only [ -debug or -release ]  )  :  ， // Run with -useConcurrentJIT=false -thresholdForJITAfterWarmUp=10 -thresholdForFTLOptimizeAfterWarmUp=1000 ， const v16 = v14 - -0x80000000 ;  ， const v19 = [ 13.37 , 13.37 , 13.37 ]  ;  ， const v27 = v7 ( v7 )  ;  ， v0 ( i )  ;  ， It appears that what is happening here is roughly the following :  ， Initially , the call to v12 is inlined and the IR contains ( besides others ) the following instructions for the inlined v12 :  ， 1 <- GetScope (  )  ， 2 <- CreateActivation ( 1 )  ， 3 <- GetLocal ( v14 )  ， 4 <- JSConstant ( -0x80000000 )  ， 5 <- ValueSub ( 3 , 4 )  ， 6 <- NewArrayBuffer ( ... )  ， Here , The CreateActivation instruction allocates a LexicalEnvironment object on the heap to store local variables into. The NewArrayBuffer allocates backing memory for the array. ， Next , the subtraction is ( incorrectly? ) speculated to not overflow and is thus replaced by an ArithSub , an instruction performing an integer subtraction and bailing out if an overflow occurs :  ， 1 <- GetScope (  )  ， 2 <- CreateActivation ( 1 )  ， 3 <- GetLocal ( v14 )  ， 4 <- JSConstant ( -0x80000000 )  ， 5 <- ArithSub ( 3 , 4 )  ， 6 <- NewArrayBuffer ( ... )  ， Next , the object allocation sinking phase runs , which determines that the created activation object doesn't leave the current scope and thus doesn't have to be allocated at all. It then replaces it with a PhancomCreateActivation , a node indicating that at this point a heap allocation used to happen which would have to be restored ( \"materialized\" ) during a bailout because the interpreter/baseline JIT expects it to be there. As the scope object is required to materialize the Activation , a PutHint is created which indicates that during a bailout , the result of GetScope must be available somehow. ， 1 <- GetScope (  )  ， 2 <- PhantomCreateActivation (  )  ， 7 <- PutHint ( 2 , 1 )  ， 3 <- GetLocal ( v14 )  ， 4 <- JSConstant ( -0x80000000 )  ， 5 <- ArithSub ( 3 , 4 )  ， 6 <- NewArrayBuffer ( ... )  ， The DFG IR code is then lowered to B3 , yielding the following :  ， Int64 @ 66 = Const64 ( 16 , DFG :  @ 1 )  ， Int64 @ 67 = Add (  @ 35 ,  $ 16 (  @ 66 )  , DFG :  @ 1 )  ， Int64 @ 68 = Load (  @ 67 , ControlDependent | Reads : 28 , DFG :  @ 1 )  ， Int32 @ 69 = Const32 ( -2147483648 , DFG :  @ 5 )  ， Int32 @ 70 = CheckSub (  @ 48 : WarmAny ,  $ -2147483648 (  @ 69 )  : WarmAny ,  @ 35 : ColdAny ,  @ 48 : ColdAny ,  @ 68 : ColdAny ,  @ 41 : ColdAny , ... )  ， Int64 @ 74 = Patchpoint ( ... , DFG :  @ 6 )  ， Here , the first three operations fetch the current scope , the next two instruction perform the checked integer subtraction , and the last instruction performs the array storage allocation. Note that the scope object (  @ 68 ) is an operand for the subtraction as it is required for the materialization of the activation during a bailout. The B3 code is then ( after more optimizations ) lowered to AIR :  ， Move %tmp2 ,  ( stack0 )  ,  @ 65 ， Move 16 ( %tmp2 )  , %tmp28 ,  @ 68 ， Move $ -2147483648 , %tmp29 ,  $ -2147483648 (  @ 69 )  ， Move %tmp4 , %tmp27 ,  @ 70 ， Patch &BranchSub32 ( 3 , SameAsRep ) 4 , Overflow ,  $ -2147483648 , %tmp27 , %tmp2 , %tmp4 , %tmp28 , %tmp5 ,  @ 70 ， Patch &Patchpoint2 , %tmp24 , %tmp25 , %tmp26 ,  @ 74 ， Then , after optimizations on the AIR code and register allocation :  ， Move %rax ,  ( stack0 )  ,  @ 65 ， Move 16 ( %rax )  , %rdx ,  @ 68 ， Patch &BranchSub32 ( 3 , SameAsRep ) 4 , Overflow ,  $ -2147483648 , %rcx , %rax , %rcx , %rdx , %rsi ,  @ 70 ， Patch &Patchpoint2 , %rax , %rcx , %rdx ,  @ 74 ， Finally , in the reportUsedRegisters phase ( AirReportUsedRegisters.cpp )  , the following happens ，  * The register rdx is marked as \"lateUse\" for the BranchSub32 and as \"earlyDef\" for the Patchpoint ( this might ultimately be the cause of the issue ) . ， \"early\" and \"late\" refer to the time the operand is used/defined , either before the instruction executes or after. ，  * As such , at the boundary ( which is where register liveness is computed ) between the last two instructions , rdx is both defined and used. ，  * Then , when liveness is computed ( in AirRegLiveness.cpp ) for the boundary between the Move and the BranchSub32 , rdx is determined to be dead as it is not used at the boundary and defined at the following boundary :  ， // RegLiveness :  : LocalCalc :  : execute ， void execute ( unsigned instIndex )  ， m_workset.exclude ( m_actions [ instIndex + 1 ] .def )  ;  ， m_workset.merge ( m_actions [ instIndex ] .use )  ;  ， As a result , the assignment to rdx ( storing the pointer to the scope object )  , is determined to be a store to a dead register and is thus discarded , leaving the following",
    "time": "2019-05-21"
}