{
    "text": "published_time: 2016-10-17 ， id: 33099 ， eid: 40562 ， cve: CVE-2016-7188 ， title: Microsoft Windows Diagnostics Hub - DLL Load Privilege Escalation (MS16-125) - Windows local Exploit ， author: Google Security Research ， published_time: 2016-10-17 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/40562 ， exploit_detail: /*\r ， Source: \r ， Windows: Diagnostics Hub DLL Load EoP\r ， Platform: Windows 10 10586, not tested 8.1 Update 2 or Windows 7\r ， Class: Elevation of Privilege\r ， Summary:\r ， The fix for CVE-2016-3231 is insufficient to prevent a normal user specifying an insecure agent path leading to arbitrary DLL loading at system privileges.\r ， Description:\r ， CVE-2016-3231 was an issue caused by passing a relative agent path name which allowed the DLL path loaded for the agent DLL to be redirected to another file. This seems to have been fixed and as far as I can tell this issue is no longer exploitable from a sandbox. However the problem is theres an assumption that its not possible to write a file to the system32 directory, which technically is true but practically for this exploit false. \r ， As Ive blogged about before, and also submitted bugs (for example MSRC-21233) a normal user can created named streams on directories as long as they have FILE_ADD_FILE access right to the directory. When you do this you create what looks from a path perspective to be in the parent. For example the system32\\tasks folder is writable by a normal user, so you can copy a DLL to system32\\tasks:abc.dll and when GetFullPathName is called the filename returned is tasks:abc.dll. When the GetValidAgentPath is called it checks if this file is in system32 by using GetFileAttributes, which succeeds and the service will proceed to load the file.\r ， On the fixing side of things, I cant see an obvious reason why just checking for invalid path characters in the agent path wouldnt be sufficient (and in fact would arguably have fixed the original bug as well). Of course I think its slightly dodgy that youll load any DLL from system32, even ones which arent agent DLLs. Youd have to find something which was somehow exploitable in a very short time window during DllMain but it might work.\r ， Also I wonder whether theyre any legitimate uses for named streams on NTFS directories? While its certainly out of scope perhaps they could only be created by admins? Or perhaps the access check shouldnt be on the target directories but its parent directory where the effective file appears to be located."
}