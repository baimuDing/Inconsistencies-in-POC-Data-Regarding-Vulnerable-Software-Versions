{
    "text": "ecve : CVE-2008-2297 ， title : RantX 1.0 - Insecure Admin Authentication - PHP webapps Exploit ， verified : Verified ， exploit_detail : --==+================================================================================+==-- ， --==+ RantX 1.0 Insecure Admin Authentication Vulnerability +==-- ， --==+================================================================================+==-- ， Discovered By : t0pP8uZz ， Discovered On : 14 MAY 2008 ， Script Download :  ， DORK : N/A ， Vendor Has Not Been Notified !  ， DESCRIPTION :  ， RantX suffers from a insecure admin authentication peice of code , the code is below. ( in middle of admin.php )  ， CODE :  ， LoginPage (  )  ;  ， exit ( -1 )  ;  ，  $ storedformat = $ _COOKIE [ \"logininfo\" ]  ;  ，  $ filehandle = fopen (  $ passwordfile , \"r\" )  ;  ，  $ contents = fread (  $ filehandle , filesize (  $ passwordfile )  )  ;  ， fclose (  $ filehandle )  ;  ，  $ array2 = explode ( \"\\n\" ,  $ contents )  ;  ， foreach (  $ array2 as $ values ) { ，  $ passwordvalid = true ;  ， __EOF__ ， ok as we can see , the first thing is that the script checks to see if the cookie \"logininfo\" exists ,  ， we can simply craft a cookie with javascript to bypass this part , or form a legit login request. ， next the password file is opened , then the lines are split into an array , then they are looped thru , if the ， line matches the cookie then authentication to admin is GIVEN ( TRUE ) . ， so what if we give the cookie a value of \"<?php\" or \"?>\" then when the cookie is checked against the password ， file , one line will return TRUE which will give us admin , as strcmp (  ) compares a string , and since ， the password.php file contains \"?>\" and our cookie will contain \"?>\" we will get access. ， the below javascript code will exploit this bug.",
    "time": "2008-05-15"
}