{
    "text": "ecve : CVE-2000-0329 ， title : Microsoft Internet Explorer 4.x/5 / Outlook 2000 0/98 0/Express 4.x - ActiveX '.CAB' File Execution - Windows remote Exploit ， verified : Verified ， exploit_detail : Microsoft Internet Explorer 4.0 for Windows 95/Windows NT 4 , Internet Explorer 4.1 for Windows 95/Windows 98/Windows NT 4 , Internet Explorer 5.0 for Windows 2000/Windows 95/Windows 98/Windows NT 4 , Internet Explorer 4.0.1 for Windows 98/Windows NT 4.0 , Outlook 2000 0/98 0 , Outlook Express 4.27.3110/4.72.2106/4.72.3120/4.72.3612 ActiveX CAB File Execution Vulnerability ， source :  ， Introduction ， Microsoft's Active Setup Control ( asctrls.ocx ) shipped with Internet Explorer 4 and above has a vulnerability in it as discovered by Juan Carlos Garcia Cuartango <cuartango @ teleline.es> , which was posted on BUGTRAQ ( ID 775 ) in the month of November , 1999. Microsoft has released patches for its control which may be procured from its website. This document aims to provide the actual details of the vulnerability as well as an example exploit. ， NOTE : This is NOT a document on the Microsoft signed software backdoor vulnerability as posted on BUGTRAQ ( ID 999 ) in February 2000. ， Disclaimer ， The material in this document is released AS IS for EDUCATIONAL PURPOSES ONLY. This document may be used by security analysers to monitor how probable crackers may intrude into their systems. The author of this document does not wish to give his opinion on supporting or critisizing vulnerability analysis. You are advised against using any of the material in this document for criminal purposes. ， All responsiblity of action , pros , cons , the cause and effect of your action , is on you. You are responsible for EVERYTHING. The author is in no way responsible for any sort of action which is caused by the material in this document. YOU ARE ON YOUR OWN. ， Vulnerability Details ， On November 8th 1999 , a public announcement was made that a severe vulnerability existed in Microsoft's Active Setup control which was shipped with Internet Explorer 4 and above. The vulnerability was so severe that almost any kind of break-in was possible into client machines. Email bombs , viruses , criminal acts such as gathering of secret documents , etc. are all very possible with such a security hole. ， Microsoft was quick to release a security bulletin and make patches available on its website. Nobody apart from Microsoft and Juan Carlos Garcia Cuartango knew how to exploit the vulnerability and the whole world was a safer place. Not many knew how to use the Active Setup control as not much information was released to the public about the control. Now that its been quite a while since patches have been made available , I have decided to release an example exploit to implicitly explain what kind of security measures have to be deployed. ， The Active Setup control has a vulnerability which allows the installation of software from unsigned local CAB files. By local files , I mean CAB files on the client machine ( as opposed to on the Internet ) . No checking is done and the contents of the cabinet file are trusted. This is the vulnerability. ， For details on the Active Setup process and using the component , please refer to the links provided at the end of this document. In short words , the Active Setup control is a software component ( which may be used in other programs/scripts ) to install software. The Active Setup control is used through function calls in the program/script code. An input CAB file contains a list of installation files ( including executable files ) and a cabinet information file ( CIF ) which describes what is to be done with the CAB file. ， Exploit Details ， PLEASE READ THE DOCUMENTATION ON THE ACTIVE SETUP CONTROL ( given in links below ) . ， We now examine how this bug may be exploited. Supposing we are able to store an unsigned CAB on the client machine , it becomes local to the client. Hence , we may process the unsigned CAB file using the Active Setup control successfully. We may use an HTML file with VBScript in it to run the control. VBScript has support for ActiveX controls ( Active Setup is an ActiveX control ) . The VBScript is invoked when the HTML file loads. The VBScript then initializes the control with details of where the CAB file is present on the client machine , and asks the control to process the CAB file. The Active Setup control then processes the CAB file , and executes EXE programs archived in the CAB file with NO SECURITY LIMITATIONS. The EXE program may then do anything it wishes to do. ， Now , obviously , there are questions in your head. How do I transfer a CAB file onto the client's machine? The answer is simple. The client user is not mad to download an unsigned CAB file. So you may disguise it as a file of another format ( in short words , rename the file's extension ) . Now , what types of files are implicitly downloaded? HTML , GIF , JPG , etc. which make up a page are downloaded when the user visits a site using Internet Explorer. But these files are stored in temporary directories. Although a CAB file disguised as a JPG file will download onto the local client , where will it be stored? The location is not fixed. When the location can be determined , we may be able to write an exploit for Internet Explorer. But until then , there are other options. ， Hey , what about Outlook Express? Too many people have told me. \"DON'T USE OUTLOOK EXPRESS ! It's too intelligent.\" They are right I guess. Outlook Express uses components of Internet Explorer to handle HTML files. So You can display HTML messages in Outlook express. More important , YOU CAN RUN VBSCRIPTS in Outlook Express. ， How is it going to help? SIMPLE. I attach a file called \"x.jpg\" to a email and send it to the client , and the client downloads it using Outlook Express. When he/she VIEWS THE EMAIL ( when he/she clicks on the subject in the message window )  , Outlook Express tries to display the attached \"x.jpg\" file as a JPEG attachment. For this , it saves the JPEG file in the directory pointed by the environment variable TEMP. This is mapped to",
    "time": "1999-11-08"
}