{
    "text": "ecve : CVE-2010-2321 ， title : Exploiting with linux-gate.so.1 - Multiple papers Exploit ， verified : Verified ， exploit_detail :  ( originally published on NewOrder Newsletter ,  # 13 )  ， --- [ Exploiting with linux-gate.so.1 . by Izik <izik @ tty64.org> ]  ， Introduction ， Recruiting linux-gate.so.1 to support a buffer overflow exploit might not ， make a lot of sense at first. But by understanding the way linux-gate.so.1 ， is currently being implemented , both in it's origin and the code it may ， contain , will hopefully shine a new light on it. This article explains ， what ， linux-gate.so.1 is and how it can be useful for exploits out there to ， overcome some protections , and make life a little easier in the insane ， world of return addresses and targets. ， Synchronizing ， The examples below have been tested on a Linux box with kernel 2.6.14 and ， compiled using gcc 3.4.5 ， What is linux-gate.so.1? ， linux-gate.so.1 doesn't sound so evil , just another dynamically loaded ， library , right? Not quite. This is not a dynamically loaded library but a ， dynamically shared object ( DSO ) . It's life purpose is to speed up and ， support system calls and signal/sigreturn for the kernel within the user ， application. In particular it helps out handling a situation where a ， system ， call accepts six parameters. This is when the EBP register has to be ， overwritten and serve as the 6th parameter to the system call. Notice that ， this ties the usage and need of linux-gate.so.1 to only linux kernels that ， are running under ia32 and ia32-64 architectures. ， There are two interesting facts about linux-gate.so.1 , which make this DSO ， a little more special , which are where this DSO comes from , and how it ， gets ， loaded to do its job. ， Trying to look for the linux-gate.so.1 file would be to no avail. That is ， because it is not a real file. Although it appears within the ldd output ， with the rest of the real librariesm , there is no file that is called ， linux-gate.so.1 on the filesystem. And in fact there should never be one. ， Because the origin of this DSO is not a file but rather a piece of the ， kernel. This DSO comes straight from the kernel. ， From the kernel's perspective , having this DSO with code that has such a ， significant meaning , requires that it is loaded and mapped within every ， process. That lead into having a patchy way to get it into the process ， space. The result is that it's done mapping it , but it is doing so outside ， of the normal loop and as a result , the linux-gate.so.1 is getting mapped ， at a fixed address range within every process. ， Let's put this theory to a test and activate the VA patch , which amongst ， other things also randomize mmap (  )  :  ， --- snip snip --- ， root @ magicbox :  ~  # ",
    "time": "2006-04-17"
}