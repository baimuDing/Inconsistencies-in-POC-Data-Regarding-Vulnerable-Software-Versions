{
    "text": "ecve : CVE-2008-1488 ， title : PECL 3.0.x - Alternative PHP Cache Extension 'apc_search_paths (  ) ' Remote Buffer Overflow - Linux remote Exploit ， verified : Verified ， exploit_detail : source :  ， PECL Alternative PHP Cache ( APC ) extension is prone to a buffer-overflow vulnerability because it fails to perform adequate boundary checks on user-supplied input. ， Attackers may leverage this issue to execute arbitrary code in the context of the application. Failed attacks will cause denial-of-service conditions. ， Versions prior to APC 3.0.17 are affected. ， <?php ， / *  ，  * apcsmash.php : PHP-APC-Stacksmash ，  *  ( c ) 2008 dannyp <daniel @ papasian.org> ，  * Feel free to redistribute in any form as long as you leave this ， notice intact. ，  * WHAT IS THIS? Code that can run server-side and exploit a flaw in ， PHP-APC 3.0.11-3.0.16 ，  * to set up a reverse shell running as the same user that apache runs ， under. ，  * WHAT SYSTEMS ARE VULNERABLE? Any system running PHP with APC 3.0.11 ， through CVS as of ，  * March 22nd , 2008 ( this includes 3.0.16 ) is vulnerable. This exploit ， was written ，  * specifically to target the case of PHP being ran by the webserver via ， mod_php , and ，  * there is included shellcode for x86 Linux and x86 FreeBSD. ，  * HOW DO I GET IT TO WORK? This is not a script that will work for ， scriptkiddies , or ，  * anyone lacking understanding of buffer overflow exploits. Under ， Linux , it appears that ，  * the APC module gets loaded at a different location each time apache ， is started , so you ，  * need to figure out what the return address is ( RETADDR below ) and ， fill it in. Make sure ，  * you keep byteorder straight ( i.e. on an x86 platform , if you want to ， jump to 0xbfa784f8 ，  * you need to have a RETADDR of \\xa7\\xbf\\xf8\\x84. ，  * WELL HOW THE HECK DO I DO THAT? The easiest way to figure out the ，  * is to attach gdb to one of the apache children , break it on the ， exploited function ，  * in apc.c , and find the address of fileinfo->fullpath and then add a ， bit to it so you ，  * land in the NOOP padding. ，  * WILL YOU HELP ME? I won't help you break into any systems that ， aren't yours , so ，  * no , please don't contact me for technical support for this script. I ， do consulting ，  * work , however , and my rates are very reasonable. ，  * WHAT IF I CANT DO THAT? Well , if you can't do that you're probably ， not working on ，  * a machine that you have permission to be doing this sort of thing ， against , so you should ，  * really consider buggering off ，  * BUT DOESNT THAT MAKE THIS VULNERABILITY HARMLESS? No , it certainly ， doesn't , because ，  * apache has a ( good ) habit of respawning itself , so if you needed to ， exploit the ，  * vulnerability without the privilege of being able to attach a ， debugger to apache ,  ，  * you can just brute force it. The easiest way to do that would be to ， have the return ，  * address be passed to this script via a $ _GET variable , and then set ， some script up ，  * to loop through the values you need to try. As you increase the ， amount of pre-shellcode ，  * nooop padding , this actually becomes an easier and easier task , as ， you can jump quite ，  * a bit on each try. ，  * SO IS THIS EXPLOIT USELESS IF I CANT RUN PHP ON THE TARGET MACHINE? ， Yes. ，  * SO IS THIS VULNERABILITY USELESS IF I CANT RUN PHP ON THE TARGET? ， No ! This vulnerability ，  * opens people up to real attack in any case where include (  ) and ， friends are called with ，  * user input. This is a SUPER-set of a well known",
    "time": "2008-03-26"
}