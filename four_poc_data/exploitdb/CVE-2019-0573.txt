{
    "text": "ecve : CVE-2019-0573 ， title : Microsoft Windows 10 - DSSVC DSOpenSharedFile Arbitrary File Delete Privilege Escalation - Windows local Exploit ， verified : Verified ， exploit_detail : Windows : DSSVC DSOpenSharedFile Arbitrary File Delete EoP ， Platform : Windows 10 1803 and 1809. ， Class : Elevation of Privilege ， Security Boundary ( per Windows Security Service Criteria )  : User boundary ， NOTE : This is one of multiple issues Im reporting in the same service. While Ive tried to ensure all the bugs are effectively orthogonal from each other its possible that fixes for one thing might affect others. Ive also not reported every possible problem with the service as at some point I had to stop. Ive not determined if any of these issues could be abusable from a sandbox , most of the issues almost certainly cant be due to the requirements for arbitrary file symlinks but its not impossible. ， Summary :  ， The Data Sharing Service DSOpenSharedFile method takes a flag to delete a shared file on close which can be abused to delete an arbitrary file. ， Description :  ， The DSOpenSharedFile method takes a flag parameter where the file handle can be opened overlapped or for delete on close. The delete on close flag will set the flag FILE_FLAG_DELETE_ON_CLOSE when opening the file with CreateFile. This code runs as SYSTEM so will open any file that that user has access to. However theres a couple of issues with this :  ， 1 ) The code doesnt check that the file was shared writable , which means its possible to trivially specify a file to DSCreateSharedFileToken you want to delete and specify read only permissions. Then call DSOpenSharedFile with the delete on close flag , as the flag automatically adds the DELETE permission to the file open this will succeed even with the read-only mode set. ， 2 ) The DSOpenSharedFile relies on calling DSUtils :  : VerifyPathFromHandle prevent returning a handle which was redirected due to something like a symlink or directory junction. However by the time the code reaches the verification its already too late and the file will delete on close regardless of what the service now does. ， While this bug relies on the same behavior as I reported for the arbitrary hardlink open issue ( namely not impersonating the user when calling CreateFile ) I think it should be treated separately , unless of course you decide to do the impersonation as a fix. At a minimum you should be checking that the file was shared writable in case 1 , and perhaps you should open the file for DELETE in case 2 , verify the path and only then delete the file by handle ( using the native APIs ) .",
    "time": "2019-01-14"
}