{
    "text": "ecve : CVE-2016-7185 ， title : Microsoft Windows - DFS Client Driver Arbitrary Drive Mapping Privilege Escalation ( MS16-123 ) - Windows local Exploit ， verified : Verified ， exploit_detail : / *  ， Source :  ， Windows : DFS Client Driver Arbitrary Drive Mapping EoP ， Platform : Windows 10 10586 , Edge 25.10586.0.0 not tested 8.1 Update 2 or Windows 7 ， Class : Elevation of Privilege ， Summary :  ， The DFS Client driver and running by default insecurely creates and deletes drive letter symbolic links in the current user context leading to EoP. ， Description :  ， The DFS Client driver is used to map DFS shares. The device path is accessible by a normal user and the two IOCTL DfscFsctrlCreateDriveLetter and DfscFsctrlRemoveDriveLetter are marked as FILE_ANY_ACCESS so even through we only have read permission on the device theyre allowed. ， When mapping a DFS share the driver calls DfscCreateSymbolicLink to create a drive letter symbolic link. The drive letter is entirely under the users control and other than checking its a letter no other verification takes place. This function calls ZwCreateSymbolicLinkObject without specifying OBJ_FORCE_ACCESS_CHECK meaning it disables access checking. As its creating the name \\??\\X : rather than an explicit directory we can use per-process device maps to trick the driver into creating the symbolic link in any directory the user has read access to ( the only limit on setting a per-process device map ) . ， In contrast when unmapping DfscDeleteSymbolicLink is called which calls ZwOpenSymbolicLinkObject without specifying OBJ_FORCE_ACCESS_CHECK. This means we can delete any drive letter symbolic link by first mounting a DFS share with a drive letter we want to delete , then either removing the letter from our current user dos devices directory , or switching our per-process drive map to point to \\GLOBAL?? then unmapping. ， By combining the two we can do something like deleting the C : drive , then mounting a DFS share in its place and get some system level code to run something from the C : drive to get elevated privileges. We dont even need to control the DFS share as once weve created the new C : drive symbolic link we have delete privileges on the object. We can use a behaviour of CSRSSs DosDevice creation code which disables security if it can open the symbolic link for DELETE access while impersonating the user and the path to the link starts with \\GLOBAL??. So we could redirect the C : drive link to any local location we like. ， Worth nothing this is almost the exact same bug I found in Truecrypt ( At least they tried to not mount over existing drive letters requiring more effort : - )  ， Ive not been able to work out if its possible to do this without requiring a DFS share ( although for an internet connected system you might be able to point it at almost anywhere ) . I also dont know if it needs to be domain joined , the driver is running though on a normal system. It seems to fail verifying the credentials , at least pointed to localhost SMB service. But perhaps itll work somehow.",
    "time": "2016-10-18"
}