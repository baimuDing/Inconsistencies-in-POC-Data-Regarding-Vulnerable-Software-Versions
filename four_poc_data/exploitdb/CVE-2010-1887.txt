{
    "text": "ecve : CVE-2010-1887 ， title : Microsoft Windows - Win32k ! GreStretchBltInternal (  ) Does Not Handle src == dest - Windows dos Exploit ， verified : Verified ， exploit_detail : Microsoft Windows win32k ! GreStretchBltInternal (  ) does not handle src == dest ， A bitblt ( bit block transfer ) is used to copy one rectangular region of screen ， to another , often performing a raster operation ( rop ) of some sort ( e.g. and ,  ， or , xor ) . On Windows , bitblts are performed using the BitBlt (  ) GDI32 api , which ， is passed a source and destination DC , along with the dimensions of the regions ， to transfer. BitBlt (  ) is backed by the native system service , NtGdiBitBlt (  ) . ， On Windows 7 , the following code from win32k ! GreStretchBltInternal is guarded by ， a check for a rop including CAPTUREBLT ( Include Layered Windows )  :  ， .text : BF981F07 mov ecx ,  [ ebp+dcoSrc ]  ; ecx is a pointer to src DCOBJ ， .text : BF981F0D test dword ptr [ ecx+18h ]  , 4000h ; probably checking if redirection bitmap selected? ， .text : BF981F14 jz short loc_BF981F24 ， .text : BF981F16 push ebx ， .text : BF981F17 push ebx ， .text : BF981F18 call DC :  : pSurface ( void )  ， .text : BF981F1D mov ecx , eax ， .text : BF981F1F call SURFACE :  : bUnMap ( void *  , DC *  )  ， .text : BF981F24 loc_BF981F24 :  ， .text : BF981F24 mov ecx ,  [ ebp+dcoTrg ]  ; ecx is a pointer to dst DCOBJ ， .text : BF981F2A test dword ptr [ ecx+18h ]  , 4000h ， .text : BF981F31 jz short loc_BF981F41 ， .text : BF981F33 push ecx ， .text : BF981F34 push ebx ， .text : BF981F35 call DC :  : pSurface ( void )  ， .text : BF981F3A mov ecx , eax ， .text : BF981F3C call SURFACE :  : bUnMap ( void *  , DC *  )  ， You can see this code tests a flag , gets a pointer to a SURFACE object , then ， unmaps it. This code does not handle dcoSrc == dcoTrg , which causes bUnMap (  ) to ， be called twice for the same SURFACE. ， This will cause a synchronization error , and result in a bugcheck due to the ， unhandled exception. It's possible that on MP machines a race condition could ， exist that would allow an attacker to continue past the initial error , possibly ， resulting in an exploitable condition ( untested ) . ， Affected Software ， At least Microsoft Windows 7 is affected. ， Consequences ， An unprivileged user may be able to cause a bugcheck , or possibly execute ， arbitrary kernel code. ， Example code to trigger this vulnerability is available below. ，  # ifn",
    "time": "2010-08-17"
}