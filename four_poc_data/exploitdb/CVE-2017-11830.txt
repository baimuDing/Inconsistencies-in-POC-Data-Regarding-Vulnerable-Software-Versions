{
    "text": "ecve : CVE-2018-8449 ， title : Microsoft Windows - 'CiSetFileCache' WDAC Security Feature Bypass TOCTOU - Windows dos Exploit ， verified : Verified ， exploit_detail : Windows : CiSetFileCache TOCTOU CVE-2017-11830 Variant WDAC Security Feature Bypass ， Platform : Windows 10 1803 , 1709 ( should include S-Mode but not tested )  ， Class : Security Feature Bypass ， Summary :  ， While the TOCTOU attack against cache signing has been mitigated through NtSetCachedSigningLevel its possible to reach the same code via NtCreateSection leading to circumventing WDAC policies and CIG/PPL. ， Description :  ， I'm reporting this as you've fixed the previous issues ( cases 43036 and 40101 ) so I'm making an assumption you'd also fix this one. The previous issues allowed a unprivileged caller to exploit a race condition in the CiSetFileCache kernel function by calling NtSetCachedSigningLevel. These issues should now be fixed. During my research into PPL/PP bypasses I noticed that the cache will also be written during the initial creation of an image section , when the process is running with an increased section signing level. This is presumably to allow the kernel to cache the signature automatically. This is an issue because its possible to create an image section with a writable ( and executable ) handle to the file and no part of CI then checks whether the caller has write access. Its possible to have an elevated section signing level by enabling the ProcessSignaturePolicy process mitigation policy , its not required to be in a PPL. In fact , while Ive not tested it , its possible that just running inside a process on Windows 10 S-Mode would be sufficient as the section signing level should be elevated for WDAC. ， So to exploit this we can do the following :  ， 1. Elevated the section signing level of the current process using SetProcessMitigationPolicy or just running in a WDAC/CIG process. ， 2. Copy a valid signed file to a known name then open a writable and executable handle to that file. ， 3. Set an oplock on a known catalog file which will be checked ， 4. Call NtCreateSection with the handle requesting SEC_IMAGE. ， 5. Wait for oplock to fire , rewrite the file with an untrusted binary , then release oplock. ， 6. Close section and file handles. The cache should have been applied to the untrusted file. ， Perhaps CI should check whether the file handle has been opened for write access and not write out the cache in those cases as realistically creating an image section from a writable handle should be an unusual operation. The normal loader process opens the handle only for read/execute.",
    "time": "2018-09-19"
}