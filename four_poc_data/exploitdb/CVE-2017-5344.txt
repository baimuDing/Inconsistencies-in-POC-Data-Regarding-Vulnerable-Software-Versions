{
    "text": "ecve : CVE-2017-5344 ， title : dotCMS 3.6.1 - Blind Boolean SQL Injection - PHP webapps Exploit ， verified : Verified ， exploit_detail :  : ' ，  # Blind Boolean SQL Injection in dotCMS <= 3.6.1 ( CVE-2017-5344 )  ， Product Description ， dotCMS is a scalable , java based , open source content management system ，  ( CMS ) that has been designed to manage and deliver personalized , permission ， based content experiences across multiple channels. dotCMS can serve as the ， plaform for sites , mobile apps , mini-sites , portals , intranets or as a ， headless CMS ( content is consumed via RESTful APIs ) . dotCMS is used ， everywhere , from running small sites to powering multi-node installations ， dotCMS environment can scale to support hundreds of editors managing ， thousands of sites with millions of content objects. ， Vulnerability Type ， Blind Boolean SQL injection ， Vulnerability Description ， dotCMS versions up to 3.6.1 ( and possibly others ) are vulnerable to blind ， boolean SQL injection in the q and inode parameters at the ， /categoriesServlet path. This servlet is a remotely accessible ,  ， unauthenticated function of default dotCMS installations and can be ， exploited to exfiltrate sensitive information from databases accessible to ， the DMBS user configured with the product. ， Exploitation of the vulnerability is limited to the MySQL DMBS in 3.5 - ， 3.6.1 as SQL escaping controls were added to address a similar ， vulnerability discovered in previous versions of the product. The means of ， bypassing these features which realise this vulnerability have only been ， successfully tested with MySQL 5.5 , 5.6 and 5.7 and it is believed other ， DMBSes are not affected. Versions prior to 3.6 do not have these controls ， and can be exploited directly on a greater number of paired DMBSes. ， PostgreSQL is vulnerable in all described versions of dotCMS when ， PostgreSQL standard_confirming_strings setting is disabled ( enabled by ， default ) . ， The vulnerability is the result of string interpolation and directly SQL ， statement execution without sanitising user input. The intermediate ， resolution for a previous SQLi vulnerability was to whitelist and partially ， filter user input before interpolation. This vulnerability overcomes this ， filtering to perform blind boolean SQL injection. The resolution to this ， vulnerability was to implement the use of prepared statements in the ， affected locations. ， This vulnerability has been present in dotCMS since at least since version ， 3.0. ， Exploit ， A proof of concept is available here :  ， Versions ， dotCMS <= 3.3.2 and MYSQL , MSSQL , H2 , PostgreSQL ， dotCMS 3.5 - 3.6.1 and ( MYSQL or PostgreSQL w/ standard_confirming_strings ， disabled )  ， Attack Type ， Unauthenticated , Remote ， Impact ， The SQL injection vulnerability can be used to exfiltrate sensitive ， information from the DBMS used with dotCMS. Depending of the DBMS ， configuration and type , the issue could be as severe as establishing a ， remote shell ( such as by using xp_exec on MSSQL servers ) or in the most ， limited cases , restricted only to exfiltration of data in dotCMS database ， tables. ， Credit ， This vulnerability was discovered by Ben Nott <pajexali @ gmail.com>. ， Credit goes to Erlar Lang for discovering similar SQL injection ， vulnerabilities in nearby code and for inspiring this discovery.",
    "time": "2017-02-16"
}