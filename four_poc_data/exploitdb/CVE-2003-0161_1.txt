{
    "text": "ecve : CVE-2003-0161 ， title : Sendmail 8.11.6 - Address Prescan Memory Corruption - Unix local Exploit ， verified : Verified ， exploit_detail : / *  ， source :  ， A vulnerability in Sendmail may be exploited remotely to execute arbitrary code. The flaw is present in the 'prescan (  ) ' procedure , which is used for processing email addresses in SMTP headers. This condition has been confirmed to be exploitable by remote attackers to execute instructions on target systems. This vulnerability stems from a logic error in the conversion of a char to an integer value. The issue has been fixed Sendmail 8.12.9. ，  * / ， / *  ，  * local exploit for sendmail 8.11.6 ，  * by sorbo ( sorbox @ yahoo.com )  ，  * This exploit takes advantage of the vulnerable prescan (  ) function that ，  * allows the user to input 0xff in order to skip the length check of the buffer. ，  * The vulnerability was found by Michal Zalewski ，  * The goal is to overwrite the 2 lsb of the saved frame pointer and make it ，  * point to an area we control. ，  * We can overflow pvpbuf [  ] in parseaddr (  )  ( which calls prescan (  )  ) and overwrite ，  * parseaddr's saved frame pointer. ，  * When parseaddr (  ) returns , the control is back to sendtolist (  ) but the frame pointer ，  * will be modified ( we make it point to somewhere in pvpbuf ) . ，  * We can't just fill pvpbuf with the ret value we want , since sendtolist (  ) doesn't ，  * exit right away , but instead makes use of some variables. ，  * We need therefore to construct pvpbuf in an intelligent way , so references to variables ，  * will be valid. ，  * The first variable to set is delimptr ( located at ebp - something ) . ，  * We simply make this point to a 0 , so the for loop exits. ，  * The next variable to set is al ( located at ebp - something ) . We need to make a->q_next ，  * point to 0 so the while loop exits. a->q_next is a+11 * 4. ，  * The next variable is e ( ebp + something ) . We make it point to a 0 ，  * The next variable is bufp ( ebp - something ) . This needs to be equal to buf to skip the free. ，  * This cannot be done since the address contains a 0xff and this cannot be input in pvpbuf. ，  * We just make it point to a valid chunk ( in our case... our fake chunk ) . We can't make it point ，  * to stack since arena_for_ptr (  ) will fail. Luckily our arguments get copied on the heap , so we ，  * just point it to that. ，  * Next we just set the ret ( ebp + 4 ) to our shellcode and when sendtolist (  ) exits our ，  * shellcode will be executed. Note shellcode is even copied on heap , so non executable stacks will not ，  * stop the exploit ( the ret addr must match the shellcode location on the heap though )  ，  * Note that if we overflow ebp by only one byte ( putting a 0 ) i.e. the",
    "time": "2003-03-29"
}