{
    "text": "ecve : CVE-2005-4076 ， title : Appfluent Database IDS < 2.1.0.103 - Environment Variable Local Overflow - Solaris local Exploit ， verified : Verified ， exploit_detail : / *  ，  $ An open security advisory # 14 - Appfluent Database IDS Environment Variable Overflow ， 1 : Bug Researcher : c0ntex - c0ntexb [ at ] gmail.com -+- www.open-security.org ， 2 : Bug Released : December 07th 2005 ， 3 : Bug Impact Rate : Hi ， 4 : Bug Scope Rate : Local root ，  $ This advisory and/or proof of concept code must not be used for commercial gain. ， Appfluent Database IDS v2.0 ， \"Appfluent Technology is the leading provider of data usage and query performance software designed to ， help IT organizations improve performance of Business Intelligence ( BI ) and enterprise applications ,  ， reduce the number of databases they maintain and quickly deploy new applications. Appfluent provides a ， suite of products that clean up and consolidate databases , optimize query performance based on usage ,  ， and rapidly analyze applications for both test and production environments.\" ， Appfluent provide a Database IDS system that monitors all SQL traffic in real time , logging every user ， defined transaction to a database , providing an audit trail of all transactions that take place. There ， are several processes that ecumulate together to provide the IDS solution , including watcher , analyser ,  ， alerter and reporter. ， There is a stack based buffer overflow in all binaries that allow for some malicious attacker to gain ， unauthorised code execution on the system where the application is installed. Due to incorrect use of ， strcpy (  )  , and a lack of correct bounds checking , a user can manipulate the $ APPFLUENT_HOME environment ， variable to overflow the stack buffer. ， The problem is specific to the watcher process , as it needs to be run as root due to the fact that it ， sniffs all traffic going to an interface. A script installed in $ APPFLUENT_HOME/server_oracle/bin is ， supplied so that administrators can run the process via sudo. ， When run with sudo , we are provided a vector for root compromise as a default sudo install on Solaris ，  ( this example ) and other operating systems honour the setting of environment variables. As such , when ， an attacker crafts $ APPFLUENT_HOME in a malicious manner and runs the watcher process , root access to ， the system is gained. ， There are a few requirements that need to be met for the attack to be successful , and they include :  ， 1 ) User is in the sudoers file and is defined as able to run the watcher process ， 2 ) Sudo honours environment variables , meaning env_reset or the likes is not set ， Please note that users must set , or have $ APPFLUENT_HOME set for the product to work , and if the above ， two requirements are met , an attacker is guaranteed to gain unauthorised root access to the system. ， Appfluent have released a fix and is provided in the latest version of the product => Ver : 2.1.0.103 ， Proof run with a default sudo install from sunfreeware. ，  [ c0ntex @  ~ /vuln ]  $ export SHELLCODE=`",
    "time": "2005-12-07"
}