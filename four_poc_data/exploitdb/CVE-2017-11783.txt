{
    "text": "published_time: 2018-02-20 ， id: 38258 ， eid: 44152 ， cve: CVE-2018-0826 ， title: Microsoft Windows - StorSvc SvcMoveFileInheritSecurity Arbitrary File Creation Privilege Escalation - Windows local Exploit ， author: Google Security Research ， published_time: 2018-02-20 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/44152 ， exploit_detail: Windows: StorSvc SvcMoveFileInheritSecurity Arbitrary File Creation EoP\r ， Platform: Windows 10 1709 (not tested earlier versions)\r ， Class: Elevation of Privilege\r ， Summary: The SvcMoveFileInheritSecurity RPC method in StorSvc can be used to move an arbitrary file to an arbitrary location resulting in elevation of privilege.\r ， Description:\r ， I was reading Clment Rouault & Thomas Imbert excellent PacSecs slides on ALPC+RPC issues and they highlighted the SvcMoveFileInheritSecurity method used to exploit the ALPC bug CVE-2017-11783. The function impersonates the user and calls MoveFileEx to move the file to a new destination, then reverts the impersonation and tries to reset the security descriptor of the new file so that it matches the inheritable permissions. The ALPC bug in CVE-2017-11783 has apparently been fixed but the behavior of the SvcMoveFileInheritSecurity has not been modified as far as I can tell.\r ， The main problem occurs if the call to SetNamedSecurityInfo fails, in that case the code tries to move the file back to its original location, however it does reassert the impersonation. This probably makes sense because its possible to have a file/directory which you can open for DELETE but without the rights to create a new file in the same directory. In the case the original move would succeed but the revert would fail. However theres a TOCTOU issue in that the original path might have been replaced with a mount point which redirects the revert to a totally arbitrary location while running at SYSTEM. The exploit controls both the name and the contents of the file so this would be a trivial privilege escalation.\r ， Its possible to cause SetNamedSecurityInfo to fail just by adding a Deny ACE to the file for SYSTEM. This will cause the function to get ERROR_ACCESS_DENIED and the revert will take place. By placing an oplock on the original file open we can switch in a mount point and always win the race condition.\r ， Ideally all operations should take place under user impersonation, but if that was the case thered be no point in doing it in a SYSTEM service to begin with. Note that theres a second issue specifically with SetNamedSecurityInfo which Ive sent as a separate issue, just in case it gets missed."
}