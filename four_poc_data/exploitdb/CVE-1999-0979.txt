{
    "text": "ecve : CVE-1999-0979 ， title : SCO Unixware 7.0/7.0.1/7.1/7.1.1 - Privileged Program Debugging - SCO local Exploit ， verified : Verified ， exploit_detail : // source :  ， Unixware's security model includes the concept of privileges. These can be assigned to processes and allow them to perform tasks that otherwise could only be performed by the root user. They allow programs to run with the minimum required privilege ( as opposed to running as root ) . A vulnerability in Unixware's implementation of privileges allows regular users to attach a debugger to a running privileged program and take over its privileges. ， Most Unix systems , including Uniware , place a number of restriction on how can regular users interact with setuid and setgid processes. For example they are not allowed to attach a debugger to them and the dynamic linker may ignore variables requesting the preloading of some shared libraries. Unixware's implementation of privileges provides no such protections for privileged programs allowing a user to attach a debugger to a running privileged program which has his same user uid and modifying it. ， When a program that is listed in the /etc/security/tcb/privs is executed it is granted the privileges listed there. All a malicious has to do to exploit the problem is find a program listed in that file with the privileges it wishes to gain and executable by him. Example of programs executable by anyone with privileges include : /usr/ucb/w ( DACREAD )  , /usr/bin/getdev ( DACWRITE )  , and /usr/ucb/lpr ( SETUID ) . ， / = ， \"Its a hole you could drive a truck through.\" = ， -Aleph One ， truck.c UnixWare 7.1 security model exploit ， Demonstrates how we own privileged processes = ， Usage : cc -o truck truck.c ， ./truck <filetype> where filetype is 1 , 2 or 3 = ，  ( for dacread , dacwrite and setuid , respectively )  ， This will put $ XNEC in the environment and run a shell. ， From there you must use gdb/debug to load a file of the ， type you chose ( by checking /etc/security/tcb/privs )  ， and setting a breakpoint at _init via \"break _init\". ， When you \"run\" and break at _init , change your EIP ， to something between 0x8046000 and 0x8048000 with = ， \"set $ eip = 0x8046b75\" and \"continue\" twice. ， Brock Tellier btellier @ usa.net ， / =",
    "time": "1999-12-10"
}