{
    "text": "ecve : CVE-2018-0821 ， title : Microsoft Windows - Constrained Impersonation Capability Privilege Escalation - Windows local Exploit ， verified : Verified ， exploit_detail : Windows : Constrained Impersonation Capability EoP ， Platform : Windows 10 1703/1709 ( not tested earlier versions )  ， Class : Elevation of Privilege ， Summary : Its possible to use the constrained impersonation capability added in Windows 10 to impersonate a lowbox SYSTEM token leading to EoP. ， Description :  ， Windows 10 added a new security check during impersonation of a token which relies on an AppContainer capability Constrained Impersonation which allows a LowBox process to impersonate another LowBox token , even if its for a different user , as long as it meets certain requirements. Specifically :  ， - The impersonation tokens session ID is the same as the current process session ID ， - The impersonation token has the same AC package SID as the process ， - The impersonation tokens capability sids are a subset of the processes ， Id assume that the thoughts around the security of this constrained impersonation capability is preventing an exist lowbox process gaining that capability. However this can be abused from a normal user privilege level by creating a new AC process with the capability. As a normal user its possible to create a new lowbox token from an existing one which has any capabilities you like and the package SID can be arbitrary. ， The only limiting factor is getting hold of a suitable token which has the same session ID. This is easy for example in UAC scenarios ( including OTS elevation ) but of course thats a UAC bypass. Theres various tricks to get a SYSTEM token but most of the services run in Session 0. However there are a few processes running as SYSTEM but in the same session on a default install of Windows including CSRSS and Winlogon. Theres also the consent process which is part of UAC which is spawned in the user session. Therefore one way to get the token is to try and elevate a process running on a WebDAV share ( hosted on localhost ) and negotiate the NTLM/Negotiate auth in a similar way to previous issues Ive reported ( e.g. cases 21243 and 21878 ) . ， With a SYSTEM token handle its now possible to impersonate it as a lowbox from a normal user account. Of course this isnt a direct privilege escalation as you cant access administrator resources , however you can find system services which do the wrong thing. One example is code which just checks the Authentication ID of the token and assumes if its the SYSTEM ID then its trusted. A second example are AC processes which either run as SYSTEM or have tried to lock down themselves , a good example is the UMFD process , resources created by this process have access to SYSTEM as well as the package SID so you could inject code through hijacking a thread or one of the processes named resources. The final example are services which increase the IL of the caller , such as the",
    "time": "2018-02-20"
}