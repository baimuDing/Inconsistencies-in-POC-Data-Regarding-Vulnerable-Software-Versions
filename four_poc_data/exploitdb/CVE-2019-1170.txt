{
    "text": "published_time: 2019-08-26 ， id: 41741 ， eid: 47306 ， cve: CVE-2019-1170 ， title: Microsoft Windows 10 - SET_REPARSE_POINT_EX Mount Point Security Feature Bypass - Windows local Exploit ， author: Google Security Research ， published_time: 2019-08-26 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/47306 ， exploit_detail: Windows: SET_REPARSE_POINT_EX Mount Point Security Feature Bypass\r ， Platform: Windows 10 1903, 1809 (not tested earlier)\r ， Class: Security Feature Bypass\r ， Summary: \r ， The NTFS driver supports a new FS control code to set a mount point which the existing sandbox mitigation doesnt support allowing a sandboxed application to set an arbitrary mount point symbolic link.\r ， Description:\r ， After multiple previous attempts the kernel mitigation against adding arbitrary NTFS mount points seems pretty robust. However due to the way it was implemented inside the IO manager in the kernel it is fragile to changes inside the filesystem drivers as the mitigation is only implemented when the FSCTL_SET_REPASE_POINT control code is used.\r ， In this case at some point (based on headers probably RS1) a new FSCTL was added to NTFS, FSCTL_SET_REPARSE_POINT_EX to allow overwriting an existing reparse point without having to first delete it. This FSCTL has a different control code to the old one, therefore issuing it does not trigger the mitigation and an arbitrary mount point can be set from any sandboxed applications. This mount point could then facilitate further attacks, for example  is probably now vulnerable again to drop an arbitrary file as the current user.\r ， Fixing wise obviously youd want to also detect this FSCTL and handle it in the mitigation. Youll probably want to verify the NTFS implementation to check that its not possible to just change the data without specifying a valid tag when an existing tag is already set as the single optional flag you can specify isnt exactly clear on this. You might also want to find a way of getting visibility on new changes which can affect symbolic link operations, as this is 3rd time this has happened recently (previously NPFS symlinks and global symlinks) that I know of."
}