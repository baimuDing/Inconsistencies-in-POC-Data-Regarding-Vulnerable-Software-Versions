{
    "text": "published_time: 2016-09-26 ， id: 34510 ， eid: 40430 ， cve: CVE-2016-3373 ， title: Microsoft Windows - RegLoadAppKey Hive Enumeration Privilege Escalation (MS16-111) - Windows local Exploit ， author: Google Security Research ， published_time: 2016-09-26 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/40430 ， exploit_detail: /*\r ， Source: \r ， Windows: RegLoadAppKey Hive Enumeration EoP\r ， Platform: Windows 10 10586 not tested 8.1 Update 2 or Windows 7\r ， Class: Elevation of Privilege\r ， Summary:\r ， RegLoadAppKey is documented to load keys in a location which cant be enumerated and also non-guessable. However its possible to enumerate loaded hives and find ones which can be written to which might lead to EoP.\r ， Description:\r ， The RegLoadAppKey API loads a user specified hive without requiring administrator privileges. This is used to provide per-application registry hives and is used extensively by Immersive Applications but also some system services. The MSDN documentation states that the keys cannot be enumerated, the only way to get access to the same hive is by opening the file again using RegLoadAppKey which requires having suitable permissions on the target hive file. It also ensures that you cant guess the loaded key name by generating a random GUID which is going to be pretty difficult to brute-force. \r ， This in part seems to be true if you try and open directly the attachment point of \\Registry\\A. That fails with access denied (Ive not looked into the kernel to work out what actually does this check). However theres no protection from recursive enumeration, so we can open \\Registry for read access, then open A relative to that key. With this we can now enumerate all the loaded per-app hives.\r ， What we can do with this is less clear cut as it depends on what is using application hives at the current point in time. Immersive applications use per-app hives for their activation data and settings. While the activation hive seems to be correctly locked to only the user, the settings are not. As the default DACL for the settings hive is granting Everyone and ALL_APPLICATION_PACKAGES full access this means an Immersive Application could read/write settings data from any other running application. This even works between users on the same machine, so for example on a Terminal Server one user could read the settings of another users running Immersive Applications. At the least this is an information disclosure issue, but it might Edge content processes to access the settings of the main Edge process (which runs under a different package SID).\r ， A few system services also use per-app hives, including the Background Tasks Infrastructure Service and Program Compatibility Assistant. The tasks hive is locked for write access to normal users although it can be read, while the PCA hive is fully writable by any user on the system (the hives file isnt even readable by a normal user, let alone writable). Ive not investigated if its possible to abuse this access to elevate privileges, but it certainly seems a possibility. There might be other vulnerable services which could be exploited, however Ive not investigated much further on this.\r ， In the end its clear that theres an assumption being made that as these hives shouldnt be enumerable then thats enough security to prevent abuse. This is especially true with the settings hives for immersive applications, the file DACL is locked to the package SID however the hive itself is allowed for all access to any package and relies on the fact that an application couldnt open a new handle to it as the security boundary."
}