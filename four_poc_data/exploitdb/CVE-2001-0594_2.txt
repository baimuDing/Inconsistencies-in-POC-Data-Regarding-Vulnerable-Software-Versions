{
    "text": "ecve : CVE-2001-0594 ， title : Solaris 7/8 - 'kcms_configure' Command-Line Buffer Overflow ( 2 ) - Solaris local Exploit ， verified : Verified ， exploit_detail : // source :  ， The Kodak Color Management System , or KCMS , is a package that ships with workstation installations of Solaris 7 and 8. kcms_configure , a part of KCMS , is vulnerable to a buffer overflow if it is passed an overly long string on the command-line by a local user. kcms_configure is installed setuid root , so a buffer overflow can lead to arbitrary code execution as root. ， An exploit for x86 Solaris is available to attackers. ， / * kcms_configure -o -S command line buffer overflow , SPARC/solaris 8 ，  * Coded June 22 , 2002 by Adam Slattery. Phear. The vulnerability ，  * was discovered a long time ago ( 04/2001 )  , but there haven't been ，  * any published sparc exploits as far as I know ( only x86 ) . ，  * Adam Slattery <aslattery @ sunriselinux.com> ，  * DESCRIPTION :  ，  * The i386/solaris 8 exploit by eEye ( Riley Hassell ) was trivial. A ，  * sparc version is somewhat more complicated , but not daunting. Because ，  * of the location of the overflow in the program , quite a bit of code ，  * gets executed before the second return ( which is the jump to ，  * shellcode in a sparc overflow ) . Some of this code relies on the ，  * registers being set , and we're overwriting the saved registers ，  * when we overflow the stack buffer. To remedy this situation we ，  * need to overflow the stack very carefully because in the process ，  * of overwriting the saved i7 register ( return address )  , we overwrite ，  * the l0-07 and i0-i6 [ fp ] registers. The code that gets executed before ，  * the second return makes use of a few of these overwritten registers. ，  * So... we overwrite these saved registers with a \"good\" address that ，  * points to a pointer , so pretty much any code using values in the ，  * registers won't try to access illegal memory and cause a seg fault. ，  * It may sound sketchy , but it works. ，  * USAGE :  ，  * gcc kcms_sparc.c -o kcms_sparc ，  * ./kcms_sparc [ offset ]  [ ptr addr ]  ，  *  $ ./kcms_sparc ，  * ret address : 0xffbee4f8 [ 3036 ] ptr address : 0xffbeecf8 buflen : 1085 ，  *  # id ，  * uid=0 ( root ) gid=100 ( users )  ，  * The default offset ( 3036 ) should work. 4800 also works. Read the note ，  * by the address calculations to see why ( there are 2 buffers ) . Even ，  * though it's a 1024 byte buffer , there aren't too many nops left in ，  * the second buffer when everything is set so if you have to search ，  * for the offet by hand , use increments of 64. ，  * The [ ptr addr ] is an address in memory that points to a pointer. ，  * This is loaded into some of the registers that get used before the ，  * program jumps into shell code. If the default ( 0xffbeecf8 ) doesn't ，  * work you , you probably won't be able to make a guess , so you'll ，  * have to whip out gdb. If you don't have r00t ( most likely )  , you'll ，  * have to use a copy ( non-suid ) of kcms_configure and LD_PRELOAD a lib ，  * to return 0 for geteuid/getegid ( so it wonn't detect it's not uid 0 ) . ，  * Thanks : optyx , t12 , worms , miah , Sun Microsystems , Kodak... ，  * Langrets - thanks for making me cookies after I had surgery , which ，  * was the week before I actually released this. They tasted 31337++. ，  * random greetz : xexen , rogers , kanu , cyun , cua0 , dap , f3tus , xaiou ,  ，  * langrets , janebond , applejacks , wisdmckr3 , cbo2000 ，  * stupid people :  # legions ( esp. digiebola , pr00f , gridmark )  ,  ，  * MIT , Stanford , Olin ( those bastards all turned me down )  ，  * /",
    "time": "2001-04-09"
}