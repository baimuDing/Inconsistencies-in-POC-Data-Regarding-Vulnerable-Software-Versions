{
    "text": "published_time: 2017-10-17 ， id: 37873 ， eid: 44053 ， cve: CVE-2017-15649 ， title: Linux Kernel - 'AF_PACKET' Use-After-Free (2) - Linux dos Exploit ， author: SecuriTeam ， published_time: 2017-10-17 ， verified: Not Verified ， platform: Linux ， exploit_type: dos ， exploit_url: /download/44053 ， exploit_detail:  Vulnerabilities summary\r ， The following advisory describes a use-after-free vulnerability found in Linux Kernels implementation of AF_PACKET that can lead to privilege escalation.\r ， AF_PACKET sockets allow users to send or receive packets on the device driver level. This for example lets them to implement their own protocol on top of the physical layer or to sniff packets including Ethernet and higher levels protocol headers\r ，  Credit\r ， The vulnerability was discovered by an independent security researcher which reported this vulnerabilities to Beyond Securitys SecuriTeam Secure Disclosure program.\r ，  Vendor response\r ， Update 1\r ， CVE: CVE-2017-15649\r ， It is quite likely that this is already fixed by:\r ， packet: hold bind lock when rebinding to fanout hook  \r ， Also relevant, but not yet merged is\r ， packet: in packet_do_bind, test fanout with bind_lock held  \r ， We verified that this does not trigger on v4.14-rc2, but does trigger when reverting that first mentioned commit (008ba2a13f2d).\r ，  Vulnerabilities details\r ， This use-after-free is due to a race condition between fanout_add (from setsockopt) and bind on a AF_PACKET socket.\r ， The race will cause __unregister_prot_hook() from packet_do_bind() to set po->running to 0 even though a packet_fanout has been created from fanout_add().\r ， This allows us to bypass the check in unregister_prot_hook() from packet_release() effectively causing the packet_fanout to be released and still being referenced from the packet_type linked list.\r ，  Crash"
}