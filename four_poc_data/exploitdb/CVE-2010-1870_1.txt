{
    "text": "ecve : CVE-2010-1870 ， title : Struts2/XWork < 2.2.0 - Remote Command Execution - Multiple remote Exploit ， verified : Not Verified ， exploit_detail : Friday , July 9 , 2010 ， CVE-2010-1870 : Struts2/XWork remote command execution ， Update Tue Jul 13 2010 : Added proof of concept ， Apache Struts team has announced uploaded but has not released , due to an unreasonably prolonged voting process , the 2.2.0 release of the Struts2 web framework which fixes vulnerability that I've reported to them on May 31st 2010. Apache Struts team is ridiculously slow in releasing the fixed version and all of my attempts to expedite the process have failed. ， Introduction ， Struts2 is Struts + WebWork. WebWork in turn uses XWork to invoke actions and call appropriate setters/getters based on HTTP parameter names , which is achieved by treating each HTTP parameter name as an OGNL statement. OGNL ( Object Graph Navigation Language ) is what turns :  ， user.address.city=Bishkek&user [ 'favoriteDrink' ] =kumys ， into ， action.getUser (  ) .getAddress (  ) .setCity ( \"Bishkek\" )  ， action.getUser (  ) .setFavoriteDrink ( \"kumys\" )  ， This is performed by the ParametersInterceptor , which calls ValueStack.setValue (  ) with user-supplied HTTP parameters as arguments. ， NOTE : If you are using XWork's ParametersInterceptor or operate with OGNL ValueStack in a similar way then you are vulnerable ( ParametersInterceptor is on by default in struts-default.xml ) . ， In addition to property getting/setting , OGNL supports many more features :  ，  * Method calling : foo (  )  ，  * Static method calling :  @ java.lang.System @ exit ( 1 )  ，  * Constructor calling : new MyClass (  )  ，  * Ability to work with context variables :  # foo = new MyClass (  )  ，  * And more... ， Since HTTP parameter names are OGNL statements , to prevent an attacker from calling arbitrary methods via HTTP parameters XWork has the following two variables guarding methods execution :  ，  * OgnlContext's property 'xwork.MethodAccessor.denyMethodExecution' ( set to true by default )  ，  * SecurityMemberAccess private field called 'allowStaticMethodAccess' ( set to false by default )  ， OGNL Context variables ， To make it easier for developer to access various frequently needed objects XWork provides several predefined context variables :  ，  *  # application ，  *  # session ，  *  # request ，  *  # parameters ，  *  # attr ， These variables represent various server-side objects , such as session map. To prevent attackers from tampering with server-side objects XWork's ParametersInterceptor disallowed # in parameter names. About a year ago I found a way to bypass that protection ( XW-641 ) using Java's unicode String representation : \\u0023. At the time I felt like the fix that was implemented ( OGNL value stack clearing ) was insufficient , but had not time to investigate this further. ， CVE-2010-1870 ， Earlier this year I finally got a chance to look at this again and found that in addition to the above mentioned context variables there were more :  ，  *  # context - OgnlContext , the one guarding method execution based on 'xwork.MethodAccessor.denyMethodExecution' property value. ，  *  # _memberAccess - SecurityMemberAccess , whose 'allowStaticAccess' field prevented static method execution. ，  *  # root ，  *  # this ，  *  # _typeResolver ，  *  # _",
    "time": "2010-07-14"
}