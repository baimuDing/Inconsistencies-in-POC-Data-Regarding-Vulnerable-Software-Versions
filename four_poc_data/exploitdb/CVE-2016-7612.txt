{
    "text": "ecve : CVE-2016-7612 ， title : Apple macOS < 10.12.2 / iOS < 10.2 Kernel - ipc_port_t ， verified : Verified ， exploit_detail : Source :  ， mach ports are really struct ipc_port_t's in the kernel ; this is a reference-counted object ,  ， ip_reference and ip_release atomically increment and decrement the 32 bit io_references field. ， Unlike OSObjects , ip_reference will allow the reference count to overflow , however it is still 32-bits ， so without either a lot of physical memory ( which you don't have on mobile or most desktops ) or a real reference leak ， this isn't that interesting. ， MIG and mach message rights ownership ， ipc_kobject_server in ipc_kobject.c is the main dispatch routine for the kernel MIG endpoints. When userspace sends a ， message the kernel will copy in the message body and also copy in all the message rights ; see for example ， ipc_right_copyin in ipc_right.c. This means that by the time we reach the actual callout to the MIG handler any port rights ， contained in a request have had their reference count increased by one. ， After the callout we reach the following code ( still in ipc_kobject_server )  :  ， // The server function is responsible for the contents ， // of the message. The reply port right is moved ， // to the reply message , and we have deallocated ， // the destination port right , so we just need ， // to free the kmsg. ， ipc_kmsg_free ( request )  ;  ， } else { ， // The message contents of the request are intact. ， // Destroy everthing except the reply port right ,  ， // which is needed in the reply message. ， request->ikm_header->msgh_local_port = MACH_PORT_NULL ;  ， ipc_kmsg_destroy ( request )  ;  ， If the MIG callout returns success , then it means that the method took ownership of * all * of the rights contained in the message. ， If the MIG callout returns a failure code then the means the method took ownership of * none * of the rights contained in the message. ， ipc_kmsg_free will only destroy the message header , so if the message had any other port rights then their reference counts won't be ， decremented. ipc_kmsg_destroy on the other hand will decrement the reference counts for all the port rights in the message , even those ， in port descriptors. ， If we can find a MIG method which returns KERN_SUCCESS but doesn't in fact take ownership of any mach ports its passed ( by for example ， storing them and dropping the ref later , or using them then immediately dropping the ref or passing them to another method which takes ， ownership ) then this can lead to us being able to leak references. ， indirect MIG methods ， Here's the MIG request structure generated for io_service_add_notification_ool_64 :  ， type",
    "time": "2016-12-22"
}