{
    "text": "published_time: 2016-10-18 ， id: 33142 ， eid: 40574 ， cve: CVE-2016-0073 ， title: Microsoft Windows - DeviceApi CMApi User Hive Impersonation Privilege Escalation (MS16-124) - Windows local Exploit ， author: Google Security Research ， published_time: 2016-10-18 ， verified: Verified ， platform: Windows ， exploit_type: local ， exploit_url: /download/40574 ， exploit_detail: /*\r ， Source: \r ， Windows: DeviceApi CMApi User Hive Impersonation EoP\r ， Platform: Windows 10 10586 not tested 8.1 Update 2 or Windows 7\r ， Class: Elevation of Privilege\r ， Summary:\r ， The DeviceApi CMApi PnpCtxRegOpenCurrentUserKey function doesnt check the impersonation level of the current effective token allowing a normal user to create arbitrary registry keys in another users loaded hive leading to elevation of privilege.\r ， Description:\r ， For some of the CMApi IOCTLs you can specify a flag, 0x100 which indicates you want the keys to opened in the users hive rather than the system hive. It finds the root key by calling PnpCtxRegOpenCurrentUserKey which calls ZwQueryInformationToken for the TOKEN_USER structure, converts the SID to a string, appends it to \\Registry\\User and opens the key in kernel mode. No part of this process verifies that the effective token isnt an impersonation token at identification level, this means that capturing another users token, or using something like S4U we can impersonate another logged on user and write registry keys into their hive. Combined with the fact that registry keys are created with kernel privileges (even when dealing with user hives, when it clearly shouldnt) when the keys are actually created the access check is bypassed.\r ， The obvious way of exploiting this is to use the PiCMOpenDeviceKey IOCTL Ive already reported in issue 34167. We can do a similar trick but instead symlink to keys inside the users hive to get elevation. One issue is that when the keys are created in kernel mode theyll typically not be accessible by the user due to the default inherited permissions on a users hive. However theres a winnable race between when the user hive is accessed and when the keys are created, by clearing the thread token from another thread at the right moment the user hive will be the target user but the keys are created as the current user. While this doesnt directly give us access to the keys through the DACL it does mark us as the owner of the key and so we can open it for WRITE_DAC access and change the DACL to give us access, then do a similar symlink trick to 34167 to elevate privileges."
}