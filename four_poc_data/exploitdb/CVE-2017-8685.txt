{
    "text": "published_time: 2017-09-18 ， id: 35726 ， eid: 42748 ， cve: CVE-2017-8685 ， title: Microsoft Windows Kernel - 'win32k!NtGdiEngCreatePalette' Stack Memory Disclosure - Windows dos Exploit ， author: Google Security Research ， published_time: 2017-09-18 ， verified: Verified ， platform: Windows ， exploit_type: dos ， exploit_url: /download/42748 ， exploit_detail: /*\r ， Source: \r ， We have discovered that the nt!NtGdiEngCreatePalette system call discloses large portions of uninitialized kernel stack memory to user-mode clients.\r ， This is caused by the fact that for palettes created in the PAL_INDEXED mode with up to 256 colors, a temporary stack-based buffer is used by the syscall for optimization (instead of locking the entire ring-3 memory area with win32k!bSecureBits). The stack memory region is not pre-initialized with zeros, but its contents may still be treated as valid palette colors by win32k!EngCreatePalette, in the special corner case when:\r ，  a) 1 <= cColors <= 256\r ，  b) pulColors == NULL\r ， The above setting causes the the win32k!bSafeReadBits to automatically succeed without actually reading any data from user-space, which further leads to the creation of a palette with colors set to uninitialized memory from the kernel stack (up to 1024 bytes!). These bytes can be subsequently read back using the GetPaletteEntries() API.\r ， The vulnerability is fixed in Windows 8 and 10, which have the following memset() calls at the beginning of the"
}