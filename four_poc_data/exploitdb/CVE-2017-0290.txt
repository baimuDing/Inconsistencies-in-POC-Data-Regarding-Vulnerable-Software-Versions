{
    "text": "ecve : CVE-2017-0290 ， title : Microsoft Security Essentials / SCEP ( Microsoft Windows 8/8.1/10 / Windows Server ) - 'MsMpEng' Remote Type Confusion - Windows remote Exploit ， verified : Verified ， exploit_detail : Source :  ， MsMpEng is the Malware Protection service that is enabled by default on Windows 8 , 8.1 , 10 , Windows Server 2012 , and so on. Additionally , Microsoft Security Essentials , System Centre Endpoint Protection and various other Microsoft security products share the same core engine. MsMpEng runs as NT AUTHORITY\\SYSTEM without sandboxing , and is remotely accessible without authentication via various Windows services , including Exchange , IIS , and so on. ， On workstations , attackers can access mpengine by sending emails to users ( reading the email or opening attachments is not necessary )  , visiting links in a web browser , instant messaging and so on. This level of accessibility is possible because MsMpEng uses a filesystem minifilter to intercept and inspect all system filesystem activity , so writing controlled contents to anywhere on disk ( e.g. caches , temporary internet files , downloads ( even unconfirmed downloads )  , attachments , etc ) is enough to access functionality in mpengine. MIME types and file extensions are not relevant to this vulnerability , as MsMpEng uses it's own content identification system. ， Vulnerabilities in MsMpEng are among the most severe possible in Windows , due to the privilege , accessibility , and ubiquity of the service. ， The core component of MsMpEng responsible for scanning and analysis is called mpengine. Mpengine is a vast and complex attack surface , comprising of handlers for dozens of esoteric archive formats , executable packers and cryptors , full system emulators and interpreters for various architectures and languages , and so on. All of this code is accessible to remote attackers. ， NScript is the component of mpengine that evaluates any filesystem or network activity that looks like JavaScript. To be clear , this is an unsandboxed and highly privileged JavaScript interpreter that is used to evaluate untrusted code , by default on all modern Windows systems. This is as surprising as it sounds. ， We have written a tool to access NScript via a command shell for testing , allowing us to explore and evaluate it :  ，  $ mpscript ， main (  )  : Please wait , initializing engine... ， main (  )  : Ready , type javascript ( history available , use arrow keys )  ， > 6 * 9 ， JavaScriptLog (  )  : 54 ， > document.location.hostname ， JavaScriptLog (  )  : www.myserver.com ， > \"abcd\" + String.fromCharCode ( 0x3f )  ， JavaScriptLog (  )  : abcd? ， > / [ y ] e+ ( s | S ) /.exec ( \"yes\" )  [ 0 ] // C++ regex engine running unsandboxed as SYSTEM on attacker controlled REGEX? ， JavaScriptLog (  )  : yes ， > for ( i in document ) log ( i )  ， JavaScriptLog (  )  : appendChild ， JavaScriptLog (  )  : attributes ， JavaScriptLog (  )  : childNodes ， JavaScriptLog (  )  : createElement ， JavaScriptLog (  )  : createTextNode ， JavaScriptLog (  )  : getElementById ， JavaScriptLog (  )  : getElementsByTagName ， JavaScriptLog (  )  : write ， JavaScriptLog (  )  : writeln ， JavaScriptLog (  )  : referrer ， JavaScriptLog (  )  : cookie ， JavaScriptLog (  )  : location ， JavaScriptLog (  )  : undefined ， > window.ScriptEngineBuildVersion ， JavaScriptLog (  )  :  [ object Function ]  ， > window.ScriptEngineBuildVersion (  )  ， JavaScriptLog (  )  : 8831 ， We have discovered that the function JsDelegateObject_Error :  : toString (  ) reads the \"message\" property from the this object , but fails to validate the type of the property before passing it to JsRuntimeState :  : triggerShortStrEvent (  ) . ， In pseudocode , the code does something like this :  ， prophash = JsObject :  : genPropHash ( \"message\" , 0 )  ;  ， RuntimeState :  : getThisPtr ( &thisptr )  ， JsRuntimeState :  : triggerShortStrEvent ( \"error_tostring\" , message )  ;  ， The method assumes that message is a string , but it can be of any type , so this type confusion allows an attacker to pass arbitrary other objects. JsRuntimeState :  : triggerShortStrEvent (  ) calls JsString :  : numBytes (  ) on the passed object , which will invoke a method from the object's vtable. ， int __fastcall JsString :  : numBytes ( JsString this )  ， Nscript supports \"short\" strings , with length and values contained in the handle and \"long\" strings with out-of-line memory. If the string is \"long\" ( or appears to be due to type confusion )  , a vtable call is made to retrieve the length. ， Integer handles are represented as four-byte values with the final bit set to one by the engine. The integer itself is left shifted by one bit , and the final bit set to create the handle. Handles to most objects , including strings are represented as the value of the pointer to the object with no modification. Therefore , this type confusion allows an integer to be specified and treated as pointer ( though the bits need to shifted to get the correct value in the handle , and only odd pointer values are possible ) . ， To",
    "time": "2017-05-09"
}