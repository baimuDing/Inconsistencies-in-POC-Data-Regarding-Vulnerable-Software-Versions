{
    "text": "ecve : CVE-2019-9213 ， title : Linux < 4.20.14 - Virtual Address 0 is Mappable via Privileged write (  ) to /proc/ * /mem - Linux dos Exploit ， verified : Verified ， exploit_detail : By following the codepath that Andrea Arcangeli pointed out in his mails ， regarding the last bug I reported , I noticed that it is possible for userspace ， on a normal distro to map virtual address 0 , which on an X86 system without SMAP ， enables the exploitation of kernel NULL pointer dereferences. ， The problem is in the following code path :  ， mem_write -> mem_rw -> access_remote_vm -> __access_remote_vm ， -> get_user_pages_remote -> __get_user_pages_locked -> __get_user_pages ， -> find_extend_vma ， Then , if the VMA in question has the VM_GROWSDOWN flag set :  ， expand_stack -> expand_downwards -> security_mmap_addr -> cap_mmap_addr ， This , if the address is below dac_mmap_min_addr , does a capability check :  ， ret = cap_capable ( current_cred (  )  , &init_user_ns , CAP_SYS_RAWIO ,  ， SECURITY_CAP_AUDIT )  ;  ， But this check is performed against current_cred (  )  , which are the creds of the ， task doing the write (  )  , not the creds of the task whose VMA is being changed. ， To",
    "time": "2019-03-06"
}