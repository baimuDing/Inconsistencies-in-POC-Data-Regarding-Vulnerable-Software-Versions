{
    "text": "ecve : CVE-2016-3116 ， title : DropBearSSHD 2015.71 - Command Injection - Linux remote Exploit ， verified : Not Verified ， exploit_detail : VuNote ， Author : <github.com/tintinweb> ， Ref :  ， Version : 0.2 ， Date : Mar 3rd , 2016 ， Tag : dropbearsshd xauth command injection may lead to forced-command bypass ， Overview ， Name : dropbear ， Vendor : Matt Johnston ， Version : 2015.71 ， Latest Version : 2015.71 ， Other Versions : <= 2015.71 ( basically all versions with x11fwd support ; v0.44 ~ 11 years )  ， Platform ( s )  : linux ， Technology : c ， Vuln Classes : CWE-93 - Improper Neutralization of CRLF Sequences ( 'CRLF Injection' )  ， Origin : remote ， Min. Privs. : post auth ， CVE : CVE-2016-3116 ， Description ， quote website [ 1 ]  ， >Dropbear is a relatively small SSH server and client. It runs on a variety of POSIX-based platforms. Dropbear is open source software , distributed under a MIT-style license. Dropbear is particularly useful for \"embedded\"-type Linux ( or other Unix ) systems , such as wireless routers. ， Summary ， An authenticated user may inject arbitrary xauth commands by sending an ， x11 channel request that includes a newline character in the x11 cookie. ， The newline acts as a command separator to the xauth binary. This attack requires ， the server to have 'X11Forwarding yes' enabled. Disabling it , mitigates this vector. ， By injecting xauth commands one gains limited * read/write arbitrary files ,  ， information leakage or xauth-connect capabilities. These capabilities can be ， leveraged by an authenticated restricted user - e.g. one with configured forced-commands - to bypass ， account restriction. This is generally not expected. ， The injected xauth commands are performed with the effective permissions of the ， logged in user as the sshd already dropped its privileges. ， Quick-Info :  ，  * requires : X11Forwarding yes ，  * does * NOT * bypass /bin/false due to special treatment ( like nologin )  ，  * bypasses forced-commands ( allows arbitr. read/write )  ， Capabilities ( xauth )  :  ，  * Xauth ，  * write file : limited chars , xauthdb format ，  * read file : limit lines cut at first \\s ，  * infoleak : environment ，  * connect to other devices ( may allow port probing )  ， see attached PoC ， Details ， // see annotated code below ，  * x11req ( svr-x11fwd.c : 46 )  ，  * execchild ( svr-chansession.c : 893 )  ，  * - x11setauth ( svr-x11fwd.c : 129 )  ， Upon receiving an `x11-req` type channel request dropbearsshd parses the channel request ， parameters `x11authprot` and `x11authcookie` from the client ssh packet where ， `x11authprot` contains the x11 authentication method used ( e.g. `MIT-MAGIC-COOKIE-1` )  ， and `x11authcookie` contains the actual x11 auth cookie. This information is stored ， in a session specific datastore. When calling `execute` on that session , dropbear will ， call `execchild` and - in case it was compiled with x11 support - setup x11 forwarding ， by executing `xauth` with the effective permissions of the user and pass commands via `stdin`. ， Note that `x11authcookie` nor `x11authprot` was sanitized or validated , it just contains ， user-tainted data. Since `xauth` commands are passed via `stdin` and `\\n` is a ， command-separator to the `xauth` binary , this allows a client to inject arbitrary ， `xauth` commands. ， This is an excerpt of the `man xauth` [ 2 ] to outline the capabilities of this xauth ， command injection :  ， SYNOPSIS ， xauth [ -f authfile ]  [ -vqibn ]  [ command arg ... ]  ， add displayname protocolname hexkey ， generate displayname protocolname [ trusted | untrusted ]  [ timeout seconds ]  [ group group-id ]  [ data hexdata ]  ，  [ n ] extract filename displayname... ，  [ n ] list [ displayname... ]  ，  [ n ] merge [ filename... ]  ， remove displayname... ， source filename ， info ， exit ， quit ， version ， help ， Interesting commands are :  ， info - leaks environment information / path ，  ~  # xauth info ， xauth : file /root/.Xauthority does not exist ， Authority file : /root/.Xauthority ， File new : yes ， File locked : no ， Number of entries : 0 ， Changes honored : yes ， Changes made : no ， Current input :  ( argv )  : 1 ， source - arbitrary file read ( cut on first `\\s` )  ，  # xauth source /etc/shadow ， xauth : file /root/.Xauthority does not exist ， xauth : /etc/shadow : 1 : unknown command \"smithj : Ep6mckrOLChF. : 10063 : 0 : 99999 : 7 :  :  : \" ， extract - arbitrary file write ，  * limited characters ，  * in xauth.db format ，  * since it is not compressed it can be combined with `xauth add` to ， first store data in the database and then export it to an arbitrary ， location e.g. to plant a shell or do other things. ， generate - connect to <ip> : <port> ( port probing , connect back and pot. exploit ， vulnerabilities in X.org ， Source ， Inline annotations are prefixed with `// #  ! ` ，  * handle x11 request , stores cookie in `chansess` ， ```c ， / * called as a request for a session channel , sets up listening X11 * / ， / * returns DROPBEAR_SUCCESS or DROPBEAR_FAILURE * / ， int x11req ( struct ChanSess * chansess ) { ， int fd ;  ， / * we already have an x11 connection * / ， chansess->x11singleconn = buf_getbyte ( ses.payload )  ;  ， chansess->x11authprot = buf_getstring ( ses.payload , NULL )  ; // #  ! store user tainted data ， chansess->x11authcookie = buf_getstring ( ses.payload , NULL )  ; // #  ! store user tainted data ， chansess->x11screennum = buf_getint ( ses.payload )  ;  ，  * set auth cookie/authprot ， ```c ， / * This is called after switching to the user , and sets up the xauth ，  * and environment variables. * / ， void x11setauth ( struct ChanSess * chansess ) { ， char display [ 20 ]  ; / * space for \"localhost : 12345.123\" * / ， FILE * authprog = NULL ;  ， int val ;  ， / * popen is a nice function - code is strongly based on OpenSSH's * / ， authprog = popen ( XAUTH_COMMAND , \"w\" )  ; // #  ! run xauth binary",
    "time": "2016-03-03"
}