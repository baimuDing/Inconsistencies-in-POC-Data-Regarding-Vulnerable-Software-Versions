{
    "text": "ecve : CVE-2017-0245 ， title : Microsoft Windows 7 Kernel - 'win32k ! xxxClientLpkDrawTextEx' Stack Memory Disclosure - Windows dos Exploit ， verified : Verified ， exploit_detail : / *  ， Source :  ， We have discovered that it is possible to disclose portions of uninitialized kernel stack memory to user-mode applications in Windows 7 ( other platforms untested ) indirectly through the win32k ! NtUserCreateWindowEx system call. The analysis shown below was performed on Windows 7 32-bit. ， The full stack trace of where uninitialized kernel stack data is leaked to user-mode is as follows :  ， --- cut --- ， 8a993e28 82ab667d nt ! memcpy+0x35 ， 8a993e84 92c50063 nt ! KeUserModeCallback+0xc6 ， 8a994188 92c5f436 win32k ! xxxClientLpkDrawTextEx+0x16b ， 8a9941f4 92c5f72e win32k ! DT_GetExtentMinusPrefixes+0x91 ， 8a994230 92c5f814 win32k ! NeedsEndEllipsis+0x3d ， 8a99437c 92c5fa0f win32k ! AddEllipsisAndDrawLine+0x56 ， 8a994404 92c5fa9b win32k ! DrawTextExWorker+0x140 ， 8a994428 92bb8c65 win32k ! DrawTextExW+0x1e ， 8a9946f0 92b23702 win32k ! xxxDrawCaptionTemp+0x54d ， 8a994778 92b78ce8 win32k ! xxxDrawCaptionBar+0x682 ， 8a99479c 92b8067f win32k ! xxxDWP_DoNCActivate+0xd6 ， 8a994818 92b59c8d win32k ! xxxRealDefWindowProc+0x7fe ， 8a99483c 92b86c1c win32k ! xxxDefWindowProc+0x10f ， 8a994874 92b8c156 win32k ! xxxSendMessageToClient+0x11b ， 8a9948c0 92b8c205 win32k ! xxxSendMessageTimeout+0x1cf ， 8a9948e8 92b719b5 win32k ! xxxSendMessage+0x28 ， 8a994960 92b4284b win32k ! xxxActivateThisWindow+0x473 ， 8a9949c8 92b42431 win32k ! xxxSetForegroundWindow2+0x3dd ， 8a994a08 92b714c7 win32k ! xxxSetForegroundWindow+0x1e4 ， 8a994a34 92b712d7 win32k ! xxxActivateWindow+0x1b3 ， 8a994a48 92b70cd6 win32k ! xxxSwpActivate+0x44 ， 8a994aa8 92b70f83 win32k ! xxxEndDeferWindowPosEx+0x2b5 ， 8a994ac8 92b7504f win32k ! xxxSetWindowPos+0xf6 ， 8a994b04 92b6f6dc win32k ! xxxShowWindow+0x25a ， 8a994c30 92b72da9 win32k ! xxxCreateWindowEx+0x137b ， 8a994cf0 82876db6 win32k ! NtUserCreateWindowEx+0x2a8 ， 8a994cf0 77486c74 nt ! KiSystemServicePostCall ， 0022f9f8 770deb5c ntdll ! KiFastSystemCallRet ， 0022f9fc 770deaf0 USER32 ! NtUserCreateWindowEx+0xc ， 0022fca0 770dec1c USER32 ! VerNtUserCreateWindowEx+0x1a3 ， 0022fd4c 770dec77 USER32 ! _CreateWindowEx+0x201 ， 0022fd88 004146a5 USER32 ! CreateWindowExW+0x33 ， --- cut --- ， The win32k ! xxxClientLpkDrawTextEx function invokes a user-mode callback # 69 ( corresponding to user32 ! __ClientLpkDrawTextEx )  , and passes in an input structure of 0x98 bytes. We have found that 4 bytes at offset 0x64 of that structure are uninitialized. These bytes come from offset 0x2C of a smaller structure of size 0x3C , which is passed to win32k ! xxxClientLpkDrawTextEx through the 8th parameter. We have tracked that this smaller structure originates from the stack frame of the win32k ! DrawTextExWorker function , and is passed down to win32k ! DT_InitDrawTextInfo in the 4th argument. ， The uninitialized data can be obtained by a user-mode application by hooking the appropriate entry in the user32.dll callback dispatch table , and reading data from a pointer provided through the handler's parameter. This technique is illustrated by the attached proof-of-concept code ( again , specific to Windows 7 32-bit ) . During a few quick attempts , we have been unable to control the leaked bytes with stack spraying techniques , or to get them to contain any meaningful values for the purpose of vulnerability demonstration. However , if we attach a WinDbg debugger to the tested system , we can set a breakpoint at the beginning of win32k ! DrawTextExWorker , manually overwrite the 4 bytes in question to a controlled DWORD right after the stack frame allocation instructions , and then observe these bytes in the output of the",
    "time": "2017-05-15"
}