{
    "text": "title : Palo Alto Networks Firewalls Remote Root Code Execution  ， detail : Three separate bugs can be used together to remotely execute commands as root through the web management interface without authentication on PAN-OS versions 6.1.18 and earlier , PAN-OS versions 7.0.18 and earlier , PAN-OS versions 7.1.13 and earlier , and PAN-OS versions 8.0.5 and earlier. Full details provided.  ， cve : advisories | CVE-2017-15944  ，  ， desc : Hello ,   ， This is a public advisory for CVE-2017-15944 which is a remote root code  ， execution bug in Palo Alto Networks firewalls.  ， Three separate bugs can be used together to remotely execute commands as  ， root through the web management interface without authentication on : PAN-OS  ， 6.1.18 and earlier , PAN-OS 7.0.18 and earlier , PAN-OS 7.1.13 and earlier ,   ， PAN-OS 8.0.5 and earlier.  ， Palo Alto Networks recommends not exposing the web management interface to  ， the internet. By looking at Project Sonar or Shodan it is evident that it's  ， actually quite common to deploy the firewalls with the web management  ， interface listening on the WAN port.  ， PAN-OS 6.1.19 , PAN-OS 7.0.19 , PAN-OS 7.1.14 and PAN-OS 8.0.6 are patched  ， and can be downloaded from https : /support.paloaltonetworks.com/  ， = * = * = * = * = * = * = * = * = TIMELINE  ， 2017-07-09 : Report submitted.  ， 2017-07-11 : Palo Alto Networks PSIRT confirm that they received the report  ， and assign PDV-348 for tracking the issues.  ， 2017-12-05 : The bugs are made public by Palo Alto Networks at  ， https : /securityadvisories.paloaltonetworks.com  ， 2017-12-11 : I send out this public advisory.  ， = * = * = * = * = * = * = * = * = DESCRIPTION  ， - Bug # 1 : Partial authentication bypass  ， The file `/etc/appweb3/conf/common.conf` contains the web configuration for  ， the web server that handles the web management interface.  ， It configures an authentication filter on most subdirectories using the  ， following format :   ， <Location /php>  ， panAuthCheck on  ， </Location>  ， This means that all requests to /php/ * will be checked for an authenticated  ， session cookie. The functionality itself is implemented in the  ， `libpanApiWgetFilter.so` library file.  ， The function `openAuthFilter (  ) ` will look for the PHPSESSID cookie and then  ， call the `readSessionVarsFromFile (  ) ` function on the session file to  ， extract the `dloc` and `user` values.  ， The problem is that `readSessionVarsFromFile (  ) ` is not using the official  ， PHP functions to read the serialized session data , but its own parser using  ， `strtok (  ) ` which is not implemented correctly.  ， The PHP session format which `readSessionVarsFromFile (  ) ` tries to parse  ， looks like this for string values :   ， locale | s : 2 : \"en\" ;   ， Explained :   ， var_name | s : str_length : \"string value\" ; var_name | s : str_length : \"another  ， string\" ; .  ， If we can inject a value into the session file that contains the `\" ; `  ， character sequence , we can break the parser and inject our own value for  ， the `user` variable.  ， We can do this by calling the `/esp/cms_changeDeviceContext.esp` script ,   ， which does not need any kind of authentication to be called.  ， It will call the `panUserSetDeviceLocation (  ) ` function located in  ， `panmodule.so` , which splits the `dloc` GET parameter by \" : \" and sets the  ， `dloc` and `loc` session variables to the second value.  ， We can corrupt the session file by calling the following url :   ， `/esp/cms_changeDeviceContext.esp?device=aaaaa : a%27\" ; user | s.\"1337\" ; `  ， Which produces the following contents in `/tmp/sess_<sessionid>` :   ， `dloc | s : 20 : \"8 : a'\" ; user | s.\"1337\" ; \" ; loc | s : 27 : \"16 : a'\" ; user | s.\"1337\" ;  : vsys1\" ; `  ， When this is parsed by the `readSessionVarsFromFile (  ) ` function , it will  ， extract `16 : a'` as the value for the `user` variable.  ， It will then use this in XML requests to the backend to check if the user  ， is authenticated , but this produces an XML injection that results in an  ， invalid XML document :   ， `  ， Entity : line 1 : parser error : attributes construct error  ， <request cmd='op' cookie='16 : a' refresh='no'><operations  ， xml='yes'><show><cli>  ， `  ， The extra single quote character is injected into the cookie value , which  ， makes the request fail because of a parser error. Interestingly enough , the  ， `panCheckSessionExpired (  ) ` function in `libpanApiWgetFilter.so` does not  ， recognize this unexpected state and believes that authentication has  ， succeeded.  ， We can now access any PHP file protected by the panAuthCheck directive  ， using our manipulated session cookie.",
    "time": "Dec 13, 2017"
}