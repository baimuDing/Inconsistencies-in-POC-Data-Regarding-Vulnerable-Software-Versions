{
    "text": "title : Microsoft Internet Explorer MSHTML DOMImplementation Type Confusion  ， detail : A specially crafted web-page can cause a type confusion vulnerability in Microsoft Internet Explorer 8 through to 11. An attacker can cause code to be executed with a stack layout it does not expect , or have code attempt to execute a method of an object using a vftable , when that object does not have a vftable. Successful exploitation can lead to arbitrary code execution.  ， cve : advisories | CVE-2016-0063  ，  ， desc : Throughout November , I plan to release details on vulnerabilities I  ， found in web-browsers which I've not released before. This is the  ， twentieth entry in that series. Unfortunately I won't be able to  ， publish everything within one month at the current rate , so I may  ，  ， The below information is available in more detail on my blog at  ， http : /blog.skylined.nl/20161128001.html. There you can find a repro  ， that triggered this issue in addition to the information below.  ， Follow me on http : /twitter.com/berendjanwever for daily browser bugs.  ， MSIE 8-11 MSHTML DOMImplementation type confusion  ，  ，  ( MS16-009 , CVE-2016-0063 )   ， Synopsis  ，  ， A specially crafted web-page can cause a type confusion vulnerability in  ， Microsoft Internet Explorer 8 through to 11. An attacker can cause code  ， to be executed with a stack layout it does not expect , or have code  ， attempt to execute a method of an object using a vftable , when that  ， object does not have a vftable. Successful exploitation can lead to  ， arbitrary code execution.  ， Known affected software and attack vectors  ，  ， + Microsoft Internet Explorer 8 , 9 , 10 and 11  ， An attacker would need to get a target user to open a specially  ， crafted web-page. Disabling Javascript should prevent an attacker  ， from triggering the vulnerable code path.  ， Description  ，  ， I identified two attack vectors to this vulnerability. One of them is  ， that Javascript can make a copy of the `hasFeature` method of a  ， `DOMImplementation` object in one window and use it as a method of  ， another object in another window. Doing so can cause at least two issues  ， in the `MSHTML ! Method_VARIANTBOOLp_BSTR_o0oVARIANT` function of MSIE :   ，  * A FailFast exception when the code detects that calling a method of  ， an object has not cleaned up the stack as expected ; this is because  ， the called function appears to expect a different number of arguments  ， or a different calling convention. This issue can be triggered by  ， changing the line `o.x (  )  ; ` in the repro to `o.x ( new Array ) `.  ，  * An out-of-bounds write when `MSHTML ! CBase : PrivateGetDispID` is  ， called ; this is probably caused by a type confusion bug : the code  ， expects a `VARIANT` object of one type , but is working on an object  ， of a different type.  ， Exploitation of this attack vector was not attempted. I reversed  ， `Method_VARIANTBOOLp_BSTR_o0oVARIANT` only sufficiently to get an idea  ， of the root cause , but not enough to determine exactly what is going on  ， or how to control the issue for command execution.  ， Another attack vector is calling the `isPrototypeOf` method of the",
    "time": "Nov 28, 2016"
}