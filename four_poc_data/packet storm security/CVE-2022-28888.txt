{
    "text": "title : Spryker Commerce OS Remote Command Execution  ， detail : Spryker Commerce OS with spryker/http module versions prior to 1.7.0 suffer from a remote command execution vulnerability due to a predictable value in use.  ， cve : advisories | CVE-2022-28888  ，  ， desc : Title  ，  ， SCHUTZWERK-SA-2022-003 : Remote Command Execution in Spryker Commerce OS  ， Status  ，  ， PUBLISHED  ， Version  ，  ， 1.0  ， CVE reference  ，  ， CVE-2022-28888  ， Link  ，  ， https : /www.schutzwerk.com/en/43/advisories/schutzwerk-sa-2022-003/  ， Text-only version :   ， https : /www.schutzwerk.com/advisories/SCHUTZWERK-SA-2022-003.txt  ， Affected products/vendor  ，  ， Spryker Commerce OS by Spryker Systems GmbH , with spryker/http module <  ， 1.7.0  ， Summary  ，  ， A predictable value is used to sign and verify special _fragment URLs in  ， Spryker Commerce OS with spryker/http module < 1.7.0. Attackers that can  ， guess  ， this value are able to generate valid _fragment URLs which allow calling PHP  ， methods , with certain restrictions. It could be demonstrated that this  ， allows  ， attackers to write arbitrary content to files on the file system , which , in  ， turn , allows for execution of arbitrary PHP commands in many setups and  ， therefore remote command execution.  ， Risk  ，  ， The vulnerability allows attackers to execute arbitrary commands on an  ， operating system-level on systems where the Spryker Commerce OS is  ， installed.  ， In many cases , authentication is not necessary for successful  ， exploitation. If  ， attackers have already determined that Spryker Commerce OS is utilized  ， through  ， fingerprinting , checking for the presence of the vulnerability is  ， trivial. With  ， the ability to execute arbitrary commands , attacks can , for example , access  ， customer data of the affected shop.  ， Description  ，  ， A webshop that was recently assessed for security vulnerabilities by  ， SCHUTZWERK  ， was found to contain a remote command execution vulnerability. The  ， application  ， in scope is based on a framework by Spryker - Spryker Commerce OS.  ， Spryker's  ， framework , in turn , is based on Symfony [ 0 ] and/or Silex [ 1 ] .  ， Symfony and Silex both support a special _fragment endpoint. This  ， feature was  ， analyzed by Ambionics Security [ 2 ] in 2020. In their write up , the feature is  ， described as follows :   ， One of Symfony's built-in features , made to handle ESI ( Edge-Side  ， Includes )  [ 3 ]  , is the FragmentListener class [ 4 ] . Essentially , when someone  ， issues a request to /_fragment , this listener sets request attributes  ， from  ， given GET parameters. Since this allows to run arbitrary PHP code [ . ]  ,   ， the request has to be signed using a HMAC value. [ . ]   ，  [ . ] Given its importance ,  [ the secret used for signing ] must  ， obviously be  ， very random.  ， At least parts of the source code of the Spryker framework are open  ， source and  ， publicly accessible via GitHub. During the assessment , while certain  ， security-sensitive parts of the source code were reviewed , it was discovered  ， that the secret used to sign and verify _fragment URLs is static and  ， predictable. The secret is set to md5 ( _DIR_ ) in the PHP file  ， HttpFragmentServiceProvider.php [ 5 ] and in two different HttpConfig.php [ 6 ]  [ 7 ]   ， files.  ， _DIR_ is a built-in \"magic constant\" in PHP [ 8 ] and it corresponds to \"the  ， directory of the file\". It is not entirely clear , which of these PHP  ， files is  ， actually included and loaded by the Spryker framework. However , it is  ， assumed  ， that the file http/src/Spryker/Shared/Http/HttpConfig.php is the culprit.  ， Guessing the secret  ，  ， In order to gain a better understanding of the vulnerability , SCHUTZWERK  ， set up  ， a local Spryker development instance with a demo shop [ 9 ] in order to  ， allow for  ， more in-depth debugging.  ， By inspecting the source code and adding appropriate debug statements , the  ， secret was identified as e3ae11e53f7c3d72da08784b9af763f9. This  ， corresponds to  ， the MD5 sum of the path  ， /data/shop/development/current/vendor/spryker/http/src/Spryker/Shared/Http :   ，  $ echo -n '/data/shop/development/current/vendor/spryker/http/src/Spryker/'\\  ， 'Shared/Http' | md5sum  ， e3ae11e53f7c3d72da08784b9af763f9 -  ， The proof-of-concept script find_secret.py [ 10 ] was developed in order to  ， automate the process of identifying the secret based on a list of known  ， Spryker  ， paths. The script was executed as follows against the local development  ， instance and correctly identified the static secret :   ，  $ python3 find_secret.py -path-list known_spryker_paths.txt \\  ， http : /www.de.b2b-demo-shop.local/_fragment  ，  [ - ] http : /www.de.b2b-demo-shop.local/_fragment  ， 2c03fc8fac1ff5204b56d4dbf879a3fc  ，  [ - ] http : /www.de.b2b-demo-shop.local/_fragment  ， f71e9665ffe0a0e3b54bbe7c2642d466  ，  [ - ] http : /www.de.b2b-demo-shop.local/_fragment  ， faf0d063ad6adf3776d59bc55a17aa5f  ，  [ + ] http : /www.de.b2b-demo-shop.local/_fragment  ， e3ae11e53f7c3d72da08784b9af763f9  ，   ，  ( /data/shop/development/current/vendor/spryker/http/src/Spryker/Shared/Http )   ， This verification step does not require authentication in the default  ， configuration. The script generates _fragment URLs based on a provided  ， list of  ， paths and detects whether the server views these URLs as valid ( correctly  ， signed ) or not. This distinction is made based on different observations  ，  ( e.g.  ， status code , response content , etc. ) .  ， The same script was then executed against the customer's instance :   ，  $ python3 find_secret.py -path-list known_spryker_paths.txt \\  ，  [ CUSTOMER_DOMAIN ] /_fragment  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment e3ae11e53f7c3d72da08784b9af763f9  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment faf0d063ad6adf3776d59bc55a17aa5f  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment 8399015c0dbbf2162983fb7ad0ea6a9a  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment 8baff412797b1ddd80cd968e7446aa06  ，  [ . ]   ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment 2c03fc8fac1ff5204b56d4dbf879a3fc  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment d6de8df0b4ad55b15f198e06142dd0e6  ，  [ - ]  [ CUSTOMER_DOMAIN ] /_fragment d6de8df0b4ad55b15f198e06142dd0e6  ，  [ + ]  [ CUSTOMER_DOMAIN ] /_fragment 9c15f40d8e5610e89caf6f9b7a97be3b  ，  ( /data/srv/yves/www/vendor/spryker/http/src/Spryker/Shared/Http )   ， In this case , the identified secret 9c15f40d8e5610e89caf6f9b7a97be3b  ， corresponds to the path  ， /data/srv/yves/www/vendor/spryker/http/src/Spryker/Shared/Http.  ， The installation path of the application can of course vary greatly between  ， installations. However , if customers use the official Docker guide  ， provided by  ， Spryker , it is likely that they will use the paths utilized in the  ， examples and  ， thus share a common installation path.  ， Even if this is not the case , customers might share installation paths  ， between  ， multiple environments ( development , production ) . A compromise of one  ， installation would therefore make a compromise of the other installations  ， likely.  ， Signing URLs  ，  ， In addition to the secret , a URL must be passed to the HMAC function to form  ， the signature. However , in both instances of the vulnerability that were  ， discovered during the assessment , the URL was the same as the external URL.  ， This might be true for all Commerce OS installations.  ， With a valid secret and a URL , it is now possible to sign URLs. As shown  ， in the  ， write up of Ambionics Security , it is generally possible to execute  ， arbitrary  ， commands using different methods ( direct reference of a PHP class/method or  ， deserialization of PHP objects ) . However , both approaches did not work ,   ， likely  ， due to code changes made by Spryker to Symfony/Silex.  ， Generally , the correct syntax for _fragment URLs is the following :   ， <protocol> : /<domain>/_fragment?_path=_controller=<controller  ， specification>&  ， _hash=<valid URL signature>  ， Through further analysis , an alternative approach was discovered.  ， Replacing the  ， value of the URL parameter _path in the listing above allows to specify PHP  ， classes with certain limitations ( decoded and reformatted for increased  ， readability )  :   ， _controller [  ] =Path\\To\\Class&  ， _controller [  ] =nameOfMethod&  ， arg1=value  ， At least the following limitations apply :   ，  * Class must have no initialize function or , alternatively , an initialize  ， function without arguments  ，  * Class must have an constructor without arguments  ， While examining the source code for possible candidates , the Symfony class",
    "time": "Jul 19, 2022"
}