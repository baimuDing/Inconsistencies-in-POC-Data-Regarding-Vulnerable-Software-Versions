{
    "text": "title : Gogs Label Search Blind SQL Injection  ， detail : Gogs suffers from a remote blind SQL injection vulnerability via label search. Versions 0.3.1-9-g49dc57e through 0.5.6.1024-gf1d8746 are affected.  ， cve : advisories | CVE-2014-8681  ，  ， desc : -BEGIN PGP SIGNED MESSAGE-  ， Hash : RIPEMD160  ， Blind SQL Injection in Gogs label search  ，  ， Researcher : Timo Schmid <tschmid @ ernw.de>  ， Description  ，  ， Gogs ( Go Git Service ) is a painless self-hosted Git Service written in  ， Go. ( taken  ， from [ 1 ]  )   ， It is very similiar to the github hosting plattform. Multiple users can  ， create  ， multiple repositories and share code with others with the git version  ， control  ， system. Repositories can be marked as public or private to prevent  ， access from  ， unauthorized users.  ， Gogs provides a view to filter issues by labels. This view is accessible at  ， /<username>/<repository>/issues?labels=&type=&state=  ， The labels Parameter of this view is vulnerable to a blind SQL injection.  ， Exploitation Technique :   ，  ， Remote  ， Severity Level :   ，  ， Critical  ， CVSS Base Score  ，  ， 6.6 ( AV : N / AC : H / Au : N / C : C / I : P / A : P )   ， CVE-ID  ，  ， CVE-2014-8681  ， Impact  ，  ， The vulnerability results at least in a complete compromise of the database.  ， Depending on the particular database configuration a compromise of the  ， system  ， is also possible.  ， Status  ，  ， Fixed by Vendor  ， Vulnerable Code Section  ，  ， models/issue.go :   ，  [ . ]   ， / GetIssues returns a list of issues by given conditions.  ， func GetIssues ( uid , rid , pid , mid int64 , page int , isClosed bool , labelIds ,   ， sortType string )  (  [  ] Issue , error ) {  ， sess : = x.Limit ( 20 ,  ( page-1 )  * 20 )   ，  ， sess.Where ( \"repo_id=?\" , rid ) .And ( \"is_closed=?\" , isClosed )   ， } else {  ， sess.Where ( \"is_closed=?\" , isClosed )   ， }  ，  ， sess.And ( \"assignee_id=?\" , uid )   ， } else if pid > 0 {  ， sess.And ( \"poster_id=?\" , pid )   ， }  ，  ， sess.And ( \"milestone_id=?\" , mid )   ， }  ，   ， sess.And ( \"label_ids like '% $ \" + label + \" | %'\" )   ， }  ， }  ，  [ . ]   ， The vulnerability exists because of a string concatination in the SQL  ， query with  ， user supplied data. A attacker is restricted to not use commas in the  ， injection  ， string as the program splits input at commas.  ， Proof of Concept  ，  ， Test of version string contains at least 10 characters :   ， http : /www.example.com/user/repos/issues?label=' or  ， char_length (  @ version ) > 10  ， and ' | %'='&type=all&state=  ， Returns all issues if true , non if false.  ， This could be used to extract data with a binary search.  ， Solution  ，  ， This vulnerability could easily be fixed by using prepared statements :   ， sess.And ( \"label_ids like ?\" , \"% $ \" + label + \" | %\" )   ， Update to Version 0.5.6.1025.  ， Affected Versions  ，  ， >= v0.3.1-9-g49dc57e  ， <= v0.5.6.1024-gf1d8746",
    "time": "Nov 14, 2014"
}