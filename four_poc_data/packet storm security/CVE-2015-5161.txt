{
    "text": "title : Zend Framework 2.4.2 / 1.12.13 XE Injection  ， detail : Zend Framework versions 2.4.2 and below and 1.12.13 and below suffer from an XML external entity injection vulnerability.  ， cve : advisories | CVE-2015-5161  ，  ， desc : =  ， - Release date : 12.08.2015  ， - Discovered by : Dawid Golunski  ， - Severity : High  ， - CVE-ID : CVE-2015-5161  ，  ， I. VULNERABILITY  ，  ， Zend Framework <= 2.4.2 XML eXternal Entity Injection ( XE ) on PHP FPM  ， Zend Framework <= 1.12.13  ， II. BACKGROUND  ，  ， - Zend Framework  ， >From http : /framework.zend.com/about/ website :   ， \"Zend Framework 2 is an open source framework for developing web applications  ， and services using PHP 5.3+. Zend Framework 2 uses 100% object-oriented code and  ， utilises most of the new features of PHP 5.3 , namely namespaces , late static  ， binding , lambda functions and closures.  ， Zend Framework 2 evolved from Zend Framework 1 , a successful PHP framework with  ， over 15 million downloads.\"  ， - PHP FPM  ， http : /php.net/manual/en/install.fpm.php  ， \"FPM ( FastCGI Process Manager ) is an alternative PHP FastCGI implementation with  ， some additional features ( mostly ) useful for heavy-loaded sites.\"  ， Starting from release 5.3.3 in early 2010 , PHP merged the php-fpm fastCGI  ， process manager into its codebase. However PHP-FPM was available earlier as a  ， separate project ( http : /php-fpm.org/ ) .  ， III. INTRODUCTION  ，  ， The XML standard defines a concept of external entites.  ， XE ( XML eXternal Entity ) attack is an attack on an application that parses XML  ， input from untrusted sources using incorrectly configured XML parser.  ， The application may be forced to open arbitrary files and/or network resources.  ， Exploiting XE issues on PHP applications may also lead to denial of service or  ， in some cases ( for example , when an 'expect' PHP module is installed ) lead to  ， command execution.  ， An independent security reserach of Zend Framework revealed that it is  ， possible to bypass XE security controls within the framework in case  ， the PHP application using Zend XML related classes ( e.g Zend_XmlRpc_Server ,   ， Zend_Feed , Zend_Config_Xml etc. ) from Zend Framework is served via PHP FPM.  ， Bypassing the controls may allow XE attacks and lead to the aforementioned  ， exploitation possibilities on systems where the XML parser is set to resolve  ， entities.  ， IV. DESCRIPTION  ，  ， The security controls within the Zend Framework mitigate the XE attack vectors  ， by first calling libxml_disable_entity_loader (  )  , and then looping  ， through the DOMDocument nodes testing if any is of type : XML_DOCUMENT_TYPE_NODE  ， If so , an exception is raised and PHP script execution is halted.  ， These controls have been included in the scan (  ) function of a Zend_Xml_Security  ， class located in the following paths depending on the code branch of Zend  ， Framework :   ， ZendFramework-1.12.13/library/Zend/Xml/Security.php  ， ZendFramework-2.4.2/library/ZendXml/Security.php  ， In case of the latest version of ZendFramework-1.12.13 ,   ， the relevant code blocks from the scan (  ) function look as follows :   ， - [ library/Zend/Xml/Security.php ] -  ， public static function scan (  $ xml , DOMDocument $ dom = null )   ， {  ，  ， self : heuristicScan (  $ xml )  ;   ， }  ，  ，  $ loadEntities = libxml_disable_entity_loader ( true )  ;   ，  $ useInternalXmlErrors = libxml_use_internal_errors ( true )  ;   ， }  ， / Load XML with network access disabled ( LIBXML_NONET )   ，  $ result = $ dom->loadXml (  $ xml , LIBXML_NONET )  ;   ， restore_error_handler (  )  ;   ，  ， libxml_disable_entity_loader (  $ loadEntities )  ;   ， libxml_use_internal_errors (  $ useInternalXmlErrors )  ;   ， }  ，   ， }  ， / Scan for potential XEE attacks using ENTITY , if not PHP-FPM  ，  ， foreach (  $ dom->childNodes as $ child ) {  ，   ， require_once 'Exception.php' ;   ， throw new Zend_Xml_Exception ( self : ENTITY_DETECT )  ;   ， }  ， }  ， }  ， }  ，  ，  $ result = simplexml_import_dom (  $ dom )  ;   ，   ， }  ，  ， }  ，   ， As we can see from the code , the application disables the entity loader  ，  ( via libxml_disable_entity_loader )  , it also disables network access  ，  ( LIBXML_NONET )  , and it additionally scans provided XML for the presence of XML  ， entities to prevent potential entity expansion attacks.  ， The code succesfully prevents most XE attacks.  ， However , as the PHP libxml_disable_entity_loader (  ) function was reported not  ， thread safe ( the entity loader setting could potentially get overwritten  ， between hits in FPM processes )  , Zend Framework does not use it when the  ， application is hosted in a PHP-FPM environment. Instead , another approach is  ， taken to prevent the XE attacks.  ， In the code above we see the check ! self : isPhpFpm (  ) which determines the type  ， of interface between web server and PHP ( through the php_sapi_name (  ) function ) .  ， If the SAPI is FPM-CGI ( i.e. PHP-FPM ) the following heuristicScan function gets  ， executed :   ， - [ library/Zend/Xml/Security.php ] -  ， protected static function heuristicScan (  $ xml )   ， {  ，  ， require_once 'Exception.php' ;   ， throw new Zend_Xml_Exception ( self : ENTITY_DETECT )  ;   ， }  ， }  ，  ， It validates provided XML by searching for any entity declaration. It throws an  ， exception if it finds one.  ， Although this check cannot be bypassed by simply adding spaces or changing  ， the characters to lower case ( an XML parser would reject such declaration  ， as invalid )  , this security check is nevertheless insufficient.  ， XML format allows for different types of encoding to be used , hence it is  ， possible to bypass the check by supplying specifically encoded XML content.  ， For example , a UTF-16 encoding which uses 2-byte characters would be enough to  ， bypass the ENTITY string check.  ， Apart from the ENTITY check , the code also adds the aformentioned LIBXML_NONET  ， parameter to catch entities refering to network resources.  ， This limitation can also be bypassed as shown in the proof of concept exploit.  ， This makes the Zend Framework vulnerable to XE injection attacks.  ， V. PROOF OF CONCEPT  ，  ， Below is a simple PHP application using Zend Framework to implement an XML-RPC  ， server for demonstation :   ， - [ zend_xmlrpc_server.php ] -",
    "time": "Aug 13, 2015"
}