{
    "text": "date_time:Aug 14, 2017 ， title:Xamarin Studio For Mac 6.2.1 (Build 3) / 6.3 (Build 863) Privilege Escalation  ， detail:Xamarin Studio for Mac versions 6.2.1 (build 3) and 6.3 (build 863) suffer from a local privilege escalation vulnerability.  ， cve:cve:No cve found  ， date_time:Aug 14, 2017  ， desc:-  ， Xamarin Studio for Mac API documentation update affected by local  ， privilege escalation  ，  ， Yorick Koster, April 2017  ，  ， Abstract  ，  ， Xamarin Studio is an Integrated Development Environment (IDE) used to  ， create iOS, Mac and Android applications. Xamarin Studio supports  ， developments in C# and F# (by default). The API documentation update  ， mechanism of Xamarin Studio for Mac is installed as setuid root. This  ， update mechanism contains several flaws that could be leveraged by a  ， local attacker to gain elevated (root) privileges.  ，  ， See also  ，  ， - CVE-2017-8665  ，  ， https:/portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8665  ，  ， Tested versions  ，  ， This issue was successfully verified on Xamarin Studio for Mac version  ， 6.2.1 (build 3) and version 6.3 (build 863).  ，  ， Fix  ，  ， Microsoft released a new version of Xamarin.iOS that addresses this  ， issue:  ， https:/support.microsoft.com/en-us/help/4037359  ，  ， Details  ，  ， https:/www.securify.nl/advisory/SFY20170403/xamarin-studio-for-mac-api-documentation-update-affected-by-local-privilege-escalation.html  ， Looking at the script, the first thing that probably stands out is the fact the script uses an insecure work directory. This directory is created under /tmp, the only 'random' part is the process identifier of the script. Since these identifiers are sequential it is not very hard for an attacker to predict what the folder name will be. It is even possible to pre-create all possible folder names (as symbolic links). The script performs very little error checking, if a certain step fails (eg, the target directory exists) the script usually continues executing the next command.  ， TMPDIR=/tmp/ios-docs-download.$  ， This folder is used for storing a number of .NET Assemblies (DLLs) that are later used by the mdoc application. If the folder ~/Library/Developer/Shared/Documentation/DocSets does not exist, the script will download a DMG file from internet, mount it and extract files from a PKG files that is located in the DMG file. Since the attacker can control the work directory it is (partially) possible to control where the files are extracted.  ， Before the DMG is mounted and the files are extracted, the script first checks the MD5 digest of the DMG file against a hard coded value. This check can be circumvented using a named pipe. In this case the attacker can return the original DMG file when the MD5 check is done, and return a different one when it is mounted with hdiutil. Using symbolic links the attacker can control the mount root where the DMG file will be mounted, for example the DMG file can be mounted under /etc. The files located in the DMG file will appear in a folder under this mount root.  ， # See if we have apple doc and if not get it  ，  ， source=$APPLE_DOCSET_PATH  ，  ， full_url=$BASE_URL/$FILE  ， target_path=$TMPDIR/$FILE  ，   ，  ， echo TMPDIR is invalid.  ， exit 1  ， fi  ，   ， mkdir $TMPDIR  ， curl -o $target_path $full_url  ， #cp /tmp/ios-docs-download.4184/091-9917-A.dmg $target_path  ， sum=`md5 -q $target_path`  ， mount_path=$TMPDIR/mount  ， tmp_unpack=$TMPDIR/unpack  ，  ， mkdir $mount_path"
}