{
    "text": "title : SuiteCRM 7.11.10 SQL Injection  ， detail : SuiteCRM versions 7.11.10 and below suffer from multiple remote SQL injection vulnerabilities.  ， cve : advisories | CVE-2020-8804  ，  ， desc : -  ， SuiteCRM <= 7.11.10 Multiple SQL Injection Vulnerabilities  ，  ，  [ - ] Software Link :   ， https : /suitecrm.com/  ，  [ - ] Affected Versions :   ， Version 7.11.10 and prior versions.  ，  [ - ] Vulnerabilities Description :   ， 1 ) The vulnerability is located within the SOAP API , specifically into  ， the set_entries (  ) SOAP  ， function. User input passed through the \"name_value_lists\" parameter  ，  ( specifically the \"first_name\"  ， and \"last_name\" elements ) isnt properly sanitized before being used to  ， construct a SQL query from  ， within the check_for_duplicate_contacts (  ) function. This can be  ， exploited by malicious users to e.g.  ， read sensitive data from the database through in-bound SQL injection  ， attacks.  ， 2 ) The vulnerability is located within the EmailUIAjax interface. User  ， input passed through the  ， \"bean_module\" and \"bean_id\" parameters when handling the \"addContact\"  ， action isnt properly sanitized  ， before being used to construct a SQL query. This can be exploited by  ， malicious users to read sensitive  ， data from the database through boolean-based SQL injection attacks.  ， 3 ) The vulnerability is located within the EmailUIAjax interface. User  ， input passed through the  ， \"contactData\" parameter when handling the \"addContactsMultiple\" action  ， isnt properly sanitized  ， before being used to construct a SQL query. This can be exploited by  ， malicious users to read  ， sensitive data from the database through boolean-based SQL injection  ， attacks.  ， 4 ) The vulnerability is located within the EmailUIAjax interface. User  ， input passed through the \"ids\"  ， parameter when handling the \"removeContact\" action isnt properly  ， sanitized before being used to  ， construct a SQL query. This can be exploited by malicious users to read  ， sensitive data from the database  ， through time-based SQL injection attacks.  ， 5 ) The vulnerability is located within the MailMerge module. User input  ， passed through the \"rel_module\"  ， parameter when handling the \"search\" action isnt properly sanitized  ， before being used to construct a  ， SQL query. This can be exploited by malicious users to read sensitive  ， data from the database through  ， time-based SQL injection attacks.  ，  [ - ] Solution :   ， Upgrade to version 7.11.11 or later.",
    "time": "Feb 13, 2020"
}