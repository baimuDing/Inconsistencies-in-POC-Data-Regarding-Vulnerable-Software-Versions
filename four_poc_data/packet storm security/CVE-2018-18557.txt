{
    "text": "title : Libtiff Decodes Arbitrarilly-Sozed JBIG Into A Target Buffer  ， detail : libtiff up to and including 4.0.9 decodes arbitrarily-sized JBIG into a buffer , ignoring the buffer size.  ， cve : advisories | CVE-2018-18557  ，  ， desc : libtiff decodes arbitrarily-sized JBIG into a target buffer  ， CVE-2018-18557  ， libtiff up to and including 4.0.9 decodes arbitrarily-sized JBIG into a buffer , ignoring the buffer size.  ， The issue occurs because JBIGDecode entirely ignores the size of the buffer that is passed to it :   ， static int JBIGDecode ( TIFF * tif , uint8 * buffer , tmsize_t size , uint16 s )   ， {  ， struct jbg_dec_state decoder ;   ， int decodeStatus = 0 ;   ， unsigned char * pImage = NULL ;   ，  ( void ) size ,  ( void ) s ;   ，  ， {  ， TIFFReverseBits ( tif->tif_rawdata , tif->tif_rawdatasize )  ;   ， }  ， jbg_dec_init ( &decoder )  ;   ，  ( . )   ， decodeStatus = jbg_dec_in ( &decoder ,  ( unsigned char *  ) tif->tif_rawdata ,   ，  ( size_t ) tif->tif_rawdatasize , NULL )  ;   ，  ， {  ，  ( . )   ， }  ， pImage = jbg_dec_getimage ( &decoder , 0 )  ;   ， _TIFFmemcpy ( buffer , pImage , jbg_dec_getsize ( &decoder )  ;   ， jbg_dec_free ( &decoder )  ;   ，  ， }  ， The 4th line above is apparently to silence compiler warnings ; the code proceeds to decode the JBIG contents , and then blindly copies as many bytes as decoded into the target buffer by means of _TIFFmemcpy.  ， The attack primitive here ends up as follows :   ， 1 ) The attacker gets to perform an allocation of a size of his choosing.  ， 2 ) The attacker gets to write a pretty arbitrary amount of data of his choosing into this buffer.",
    "time": "Oct 26, 2018"
}