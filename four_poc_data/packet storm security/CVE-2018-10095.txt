{
    "text": "title : Dolibarr 7.0.0 Cross Site Scripting  ， detail : Dolibarr version 7.0.0 suffers from a cross site scripting vulnerability.  ， cve : advisories | CVE-2018-10095  ，  ， desc :  #  [ CVE-2018-10095 ] Dolibarr XSS Injection vulnerability  ，  # Description  ， Dolibarr is an \"Open Source ERP & CRM for Business\" used by many  ， companies worldwide.  ， It is available through [ GitHub ]  ( https : /github.com/Dolibarr/dolibarr )   ， or as distribution packages ( e.g .deb package ) .  ，  * Threat *   ， The application does not handle user input properly , allowing  ， client-side JavaScript code injection ( XSS ) .  ，  * Expectation *   ， User input should be filtered to avoid arbitrary HTML injection.  ，  # Vulnerability type  ，  * CVE ID *  : CVE-2018-10095  ，  * Access Vector *  : remote  ，  * Security Risk *  : high  ，  * Vulnerability *  : CWE-79  ，  * CVSS Base Score *  : 7.4  ，  * CVSS Vector String *  : CVSS : 3.0/AV : N/AC : L/PR : N/UI : R/S : C/C : H/I : N/A : N  ，  # Details  ， Checks are enforced on user input via the `test_sql_and_script_inject (  ) `  ， function , which forbids some SQL keywords ( e.g `union` , `create` ,   ， `insert` ) and some XSS-related strings ( `onfocus` , for instance ) .  ， `php  ， main.inc.php  ，  ，  * Security : SQL Injection and XSS Injection ( scripts ) protection  ，  ( Filters on GET , POST , PHP_SELF ) .  ，  ，  *  @ param string $ val Value  ，  *  @ param string $ type 1=GET , 0=POST , 2=PHP_SELF  ，  *  @ return int >0 if there is an injection  ，   ， {  ，  $ inj = 0 ;   ， / For SQL Injection ( only GET are used to be included into bad  ， escaped SQL requests )   ，  ， {  ，  $ inj += preg_match ( '/updatexml\\ ( /i' ,  $ val )  ;   ，  $ inj += preg_match ( '/delete\\s+from/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/create\\s+table/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/insert\\s+into/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/select\\s+from/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/into\\s+ ( outfile | dumpfile ) /i' ,  $ val )  ;   ， }  ，  ， {  ，  $ inj += preg_match ( '/update.+set.+=/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/union.+select/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/ ( \\.\\.%2f ) +/i' ,  $ val )  ;   ， }  ， / For XSS Injection done by adding javascript with script  ， / This is all cases a browser consider text is javascript : ",
    "time": "May 27, 2018"
}