{
    "text": "title : Froala WYSIWYG HTML Editor 3.1.1 Cross Site Scripting  ， detail : Froala WYSIWYG HTML Editor versions 3.0.6 through 3.1.1 suffer from a cross site scripting vulnerability.  ， cve : advisories | CVE-2019-19935  ，  ， desc :  #   ，  ，  # COMPASS SECURITY ADVISORY  ，  # https : /www.compass-security.com/research/advisories/  ，   ，  ，  # Product : Froala WYSIWYG HTML Editor  ，  # Vendor : Froala  ，  # CSNC ID : CSNC-2020-004  ，  # CVE ID : CVE-2019-19935  ，  # Subject : DOM XSS in Froala WYSIWYG HTML Editor  ，  # Severity : Medium  ，  # Effect : Remotely exploitable  ，  # Author : Emanuel Duss <emanuel.duss @ compass-security.com>  ，  # Date : 2020-07-01  ，   ， Introduction  ，  ， Froala WYSIWYG HTML Editor is a lightweight WYSIWYG HTML Editor written in  ， JavaScript that enables rich text editing capabilities for web applications  ，  [ 1 ] . Froala sanitizes the user input in order to prevent cross-site scripting  ， attacks [ 2 ] .  ， During a web application penetration test , Compass found a DOM-based cross-site  ， scripting ( XSS )  [ 3 ] in the Froala WYSIWYG HTML Editor. HTML code in the editor  ， is not correctly sanitized when inserted into the DOM. This allows an attacker  ， that can control the editor content to execute arbitrary JavaScript in the  ， context of the victim's session.  ， Affected  ，  ，  * All versions of the Froala WYSIWYG HTML Editor  ， The issue was found in December 2019 in version 3.0.6 and was still not fixed  ， in July 2020 in version 3.1.1.  ， Technical Summary  ，  ， It's possible to perform DOM based XSS in the Froala editor by inserting the  ， `<iframe>` tag and the `srcdoc` attribute into the editor :   ， <iframe srcdoc=\"<img src=x onerror=alert ( document.domain ) >\"></iframe>  ， This can be verified by inserting the payload into the \"Code View\" of the  ， editor.  ， In this case , this is would be a self-XSS because the users would only attack  ， themselves. However , it could be possible that untrusted data from a  ， non-controlled source is loaded into the editor in order to exploit it. An  ， example could be a web application where multiple users can edit the same  ， content using this editor.  ， An attacker can use this to execute own JavaScript code in the session of the  ， victim. This can be abused to read the content of the victim's account , use the  ， session to make further requests to the web application or read the cookies or  ， web storage.  ， Technical Details  ，  ，  # Correct Behavior",
    "time": "Jul 3, 2020"
}