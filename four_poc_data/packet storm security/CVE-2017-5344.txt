{
    "text": "title : dotCMS 3.6.1 Blind Boolean SQL Injection  ， detail : dotCMS versions 3.6.1 and below suffer from a remote blind boolean SQL injection vulnerability.  ， cve : advisories | CVE-2017-5344  ，  ， desc :  # Blind Boolean SQL Injection in dotCMS <= 3.6.1 ( CVE-2017-5344 )   ，  # Product Description  ， dotCMS is a scalable , java based , open source content management system  ，  ( CMS ) that has been designed to manage and deliver personalized , permission  ， based content experiences across multiple channels. dotCMS can serve as the  ， plaform for sites , mobile apps , mini-sites , portals , intranets or as a  ， headless CMS ( content is consumed via RESTful APIs ) . dotCMS is used  ， everywhere , from running small sites to powering multi-node installations  ，  ， dotCMS environment can scale to support hundreds of editors managing  ， thousands of sites with millions of content objects.  ，  # Vulnerability Type  ， Blind Boolean SQL injection  ，  # Vulnerability Description  ， dotCMS versions up to 3.6.1 ( and possibly others ) are vulnerable to blind  ， boolean SQL injection in the q and inode parameters at the  ， /categoriesServlet path. This servlet is a remotely accessible ,   ， unauthenticated function of default dotCMS installations and can be  ， exploited to exfiltrate sensitive information from databases accessible to  ， the DMBS user configured with the product.  ， Exploitation of the vulnerability is limited to the MySQL DMBS in 3.5 -  ， 3.6.1 as SQL escaping controls were added to address a similar  ， vulnerability discovered in previous versions of the product. The means of  ， bypassing these features which realise this vulnerability have only been  ， successfully tested with MySQL 5.5 , 5.6 and 5.7 and it is believed other  ， DMBS's are not affected. Versions prior to 3.6 do not have these controls  ， and can be exploited directly on a greater number of paired DMBS's.  ， PostgreSQL is vulnerable in all described versions of dotCMS when  ， PostgreSQL standard_confirming_strings setting is disabled ( enabled by  ， default ) .  ， The vulnerability is the result of string interpolation and directly SQL  ， statement execution without sanitising user input. The intermediate  ， resolution for a previous SQLi vulnerability was to whitelist and partially  ， filter user input before interpolation. This vulnerability overcomes this  ， filtering to perform blind boolean SQL injection. The resolution to this  ， vulnerability was to implement the use of prepared statements in the  ， affected locations.  ， This vulnerability has been present in dotCMS since at least since version  ， 3.0.  ，  # Exploit  ， A proof of concept is available here :   ， https : /github.com/xdrr/webapp-exploits/tree/master/vendors/dotcms/2017.01.blind-sqli  ， dotcms-dump.sh : ",
    "time": "Feb 15, 2017"
}