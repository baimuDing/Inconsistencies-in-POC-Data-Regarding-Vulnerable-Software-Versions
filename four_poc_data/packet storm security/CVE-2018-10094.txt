{
    "text": "title : Dolibarr 7.0.0 SQL Injection  ， detail : Dolibarr version 7.00 suffers from a remote SQL injection vulnerability.  ， cve : advisories | CVE-2018-10094  ，  ， desc :  #  [ CVE-2018-10094 ] Dolibarr SQL Injection vulnerability  ，  # Description  ， Dolibarr is an \"Open Source ERP & CRM for Business\" used by many  ， companies worldwide.  ， It is available through [ GitHub ]  ( https : /github.com/Dolibarr/dolibarr )   ， or as distribution packages ( e.g .deb package ) .  ，  * Threat *   ， The application does not handle user input properly and allows execution  ， of arbitrary SQL commands on the database.  ，  * Expectation *   ， Prepared queries should be used in order to avoid SQL injection in user  ， input.  ，  # Vulnerability type  ，  * CVE ID *  : CVE-2018-10094  ，  * Access Vector *  : remote  ，  * Security Risk *  : high  ，  * Vulnerability *  : CWE-89  ，  * CVSS Base Score *  : 7.5  ，  * CVSS Vector String *  : CVSS : 3.0/AV : N/AC : L/PR : N/UI : N/S : U/C : H/I : N/A : N  ，  # Details  ， The database connector escapes quotes with the `real_escape_string (  ) `  ， wrapper. However it is still possible to perform injection on integer  ， parameters without quotes.  ， `php  ， mysqli.class.php  ，  ，  * Escape a string to insert data  ，  ，  *  @ param string $ stringtoencode String to escape  ，  *  @ return string String escaped  ，   ， {  ，  ， }  ， `  ， Additional checks are defined later , which forbit some SQL keywords ( e.g  ， `union` , `create` , `insert` ) . However , by url encoding the payload ,   ， these checks are bypassed.  ， `php  ， main.inc.php  ，  ，  * Security : SQL Injection and XSS Injection ( scripts ) protection  ，  ( Filters on GET , POST , PHP_SELF ) .  ，  ，  *  @ param string $ val Value  ，  *  @ param string $ type 1=GET , 0=POST , 2=PHP_SELF  ，  *  @ return int >0 if there is an injection  ，   ， {  ，  $ inj = 0 ;   ， / For SQL Injection ( only GET are used to be included into bad  ， escaped SQL requests )   ，  ， {  ，  $ inj += preg_match ( '/updatexml\\ ( /i' ,  $ val )  ;   ，  $ inj += preg_match ( '/delete\\s+from/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/create\\s+table/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/insert\\s+into/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/select\\s+from/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/into\\s+ ( outfile | dumpfile ) /i' ,  $ val )  ;   ， }  ，  ， {  ，  $ inj += preg_match ( '/update.+set.+=/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/union.+select/i' ,  $ val )  ;   ，  $ inj += preg_match ( '/ ( \\.\\.%2f ) +/i' ,  $ val )  ;   ， }  ， / For XSS Injection done by adding javascript with script  ， / This is all cases a browser consider text is javascript : ",
    "time": "May 27, 2018"
}